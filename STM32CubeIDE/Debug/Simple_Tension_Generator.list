
Simple_Tension_Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a364  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800a53c  0800a53c  0001a53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a90c  0800a90c  00020614  2**0
                  CONTENTS
  4 .ARM          00000008  0800a90c  0800a90c  0001a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a914  0800a914  00020614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a914  0800a914  0001a914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a918  0800a918  0001a918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000614  20000000  0800a91c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000185c  20000614  0800af30  00020614  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e70  0800af30  00021e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020614  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004607c  00000000  00000000  00020644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00057fae  00000000  00000000  000666c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000092da  00000000  00000000  000be66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f48  00000000  00000000  000c7948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010c9a6  00000000  00000000  000c9890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00005030  00000000  00000000  001d6238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00029ed4  00000000  00000000  001db268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002eb8f  00000000  00000000  0020513c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00233ccb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006010  00000000  00000000  00233d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000614 	.word	0x20000614
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a524 	.word	0x0800a524

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000618 	.word	0x20000618
 8000214:	0800a524 	.word	0x0800a524

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96e 	b.w	8000b28 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468c      	mov	ip, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8083 	bne.w	800097a <__udivmoddi4+0x116>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d947      	bls.n	800090a <__udivmoddi4+0xa6>
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	b142      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 8000880:	f1c2 0020 	rsb	r0, r2, #32
 8000884:	fa24 f000 	lsr.w	r0, r4, r0
 8000888:	4091      	lsls	r1, r2
 800088a:	4097      	lsls	r7, r2
 800088c:	ea40 0c01 	orr.w	ip, r0, r1
 8000890:	4094      	lsls	r4, r2
 8000892:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000896:	0c23      	lsrs	r3, r4, #16
 8000898:	fbbc f6f8 	udiv	r6, ip, r8
 800089c:	fa1f fe87 	uxth.w	lr, r7
 80008a0:	fb08 c116 	mls	r1, r8, r6, ip
 80008a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x60>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008b6:	f080 8119 	bcs.w	8000aec <__udivmoddi4+0x288>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 8116 	bls.w	8000aec <__udivmoddi4+0x288>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3310 	mls	r3, r8, r0, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d8:	45a6      	cmp	lr, r4
 80008da:	d909      	bls.n	80008f0 <__udivmoddi4+0x8c>
 80008dc:	193c      	adds	r4, r7, r4
 80008de:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e2:	f080 8105 	bcs.w	8000af0 <__udivmoddi4+0x28c>
 80008e6:	45a6      	cmp	lr, r4
 80008e8:	f240 8102 	bls.w	8000af0 <__udivmoddi4+0x28c>
 80008ec:	3802      	subs	r0, #2
 80008ee:	443c      	add	r4, r7
 80008f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f4:	eba4 040e 	sub.w	r4, r4, lr
 80008f8:	2600      	movs	r6, #0
 80008fa:	b11d      	cbz	r5, 8000904 <__udivmoddi4+0xa0>
 80008fc:	40d4      	lsrs	r4, r2
 80008fe:	2300      	movs	r3, #0
 8000900:	e9c5 4300 	strd	r4, r3, [r5]
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	b902      	cbnz	r2, 800090e <__udivmoddi4+0xaa>
 800090c:	deff      	udf	#255	; 0xff
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	2a00      	cmp	r2, #0
 8000914:	d150      	bne.n	80009b8 <__udivmoddi4+0x154>
 8000916:	1bcb      	subs	r3, r1, r7
 8000918:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800091c:	fa1f f887 	uxth.w	r8, r7
 8000920:	2601      	movs	r6, #1
 8000922:	fbb3 fcfe 	udiv	ip, r3, lr
 8000926:	0c21      	lsrs	r1, r4, #16
 8000928:	fb0e 331c 	mls	r3, lr, ip, r3
 800092c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000930:	fb08 f30c 	mul.w	r3, r8, ip
 8000934:	428b      	cmp	r3, r1
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0xe4>
 8000938:	1879      	adds	r1, r7, r1
 800093a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0xe2>
 8000940:	428b      	cmp	r3, r1
 8000942:	f200 80e9 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 8000946:	4684      	mov	ip, r0
 8000948:	1ac9      	subs	r1, r1, r3
 800094a:	b2a3      	uxth	r3, r4
 800094c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000950:	fb0e 1110 	mls	r1, lr, r0, r1
 8000954:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000958:	fb08 f800 	mul.w	r8, r8, r0
 800095c:	45a0      	cmp	r8, r4
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x10c>
 8000960:	193c      	adds	r4, r7, r4
 8000962:	f100 33ff 	add.w	r3, r0, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x10a>
 8000968:	45a0      	cmp	r8, r4
 800096a:	f200 80d9 	bhi.w	8000b20 <__udivmoddi4+0x2bc>
 800096e:	4618      	mov	r0, r3
 8000970:	eba4 0408 	sub.w	r4, r4, r8
 8000974:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000978:	e7bf      	b.n	80008fa <__udivmoddi4+0x96>
 800097a:	428b      	cmp	r3, r1
 800097c:	d909      	bls.n	8000992 <__udivmoddi4+0x12e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <__udivmoddi4+0x282>
 8000984:	2600      	movs	r6, #0
 8000986:	e9c5 0100 	strd	r0, r1, [r5]
 800098a:	4630      	mov	r0, r6
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	fab3 f683 	clz	r6, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d14a      	bne.n	8000a30 <__udivmoddi4+0x1cc>
 800099a:	428b      	cmp	r3, r1
 800099c:	d302      	bcc.n	80009a4 <__udivmoddi4+0x140>
 800099e:	4282      	cmp	r2, r0
 80009a0:	f200 80b8 	bhi.w	8000b14 <__udivmoddi4+0x2b0>
 80009a4:	1a84      	subs	r4, r0, r2
 80009a6:	eb61 0103 	sbc.w	r1, r1, r3
 80009aa:	2001      	movs	r0, #1
 80009ac:	468c      	mov	ip, r1
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d0a8      	beq.n	8000904 <__udivmoddi4+0xa0>
 80009b2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0xa0>
 80009b8:	f1c2 0320 	rsb	r3, r2, #32
 80009bc:	fa20 f603 	lsr.w	r6, r0, r3
 80009c0:	4097      	lsls	r7, r2
 80009c2:	fa01 f002 	lsl.w	r0, r1, r2
 80009c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ca:	40d9      	lsrs	r1, r3
 80009cc:	4330      	orrs	r0, r6
 80009ce:	0c03      	lsrs	r3, r0, #16
 80009d0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e0:	fb06 f108 	mul.w	r1, r6, r8
 80009e4:	4299      	cmp	r1, r3
 80009e6:	fa04 f402 	lsl.w	r4, r4, r2
 80009ea:	d909      	bls.n	8000a00 <__udivmoddi4+0x19c>
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80009f2:	f080 808d 	bcs.w	8000b10 <__udivmoddi4+0x2ac>
 80009f6:	4299      	cmp	r1, r3
 80009f8:	f240 808a 	bls.w	8000b10 <__udivmoddi4+0x2ac>
 80009fc:	3e02      	subs	r6, #2
 80009fe:	443b      	add	r3, r7
 8000a00:	1a5b      	subs	r3, r3, r1
 8000a02:	b281      	uxth	r1, r0
 8000a04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a10:	fb00 f308 	mul.w	r3, r0, r8
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x1c4>
 8000a18:	1879      	adds	r1, r7, r1
 8000a1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a1e:	d273      	bcs.n	8000b08 <__udivmoddi4+0x2a4>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d971      	bls.n	8000b08 <__udivmoddi4+0x2a4>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4439      	add	r1, r7
 8000a28:	1acb      	subs	r3, r1, r3
 8000a2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a2e:	e778      	b.n	8000922 <__udivmoddi4+0xbe>
 8000a30:	f1c6 0c20 	rsb	ip, r6, #32
 8000a34:	fa03 f406 	lsl.w	r4, r3, r6
 8000a38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a3c:	431c      	orrs	r4, r3
 8000a3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a42:	fa01 f306 	lsl.w	r3, r1, r6
 8000a46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a4e:	431f      	orrs	r7, r3
 8000a50:	0c3b      	lsrs	r3, r7, #16
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fa1f f884 	uxth.w	r8, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a62:	fb09 fa08 	mul.w	sl, r9, r8
 8000a66:	458a      	cmp	sl, r1
 8000a68:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x220>
 8000a72:	1861      	adds	r1, r4, r1
 8000a74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a78:	d248      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7a:	458a      	cmp	sl, r1
 8000a7c:	d946      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a82:	4421      	add	r1, r4
 8000a84:	eba1 010a 	sub.w	r1, r1, sl
 8000a88:	b2bf      	uxth	r7, r7
 8000a8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a96:	fb00 f808 	mul.w	r8, r0, r8
 8000a9a:	45b8      	cmp	r8, r7
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x24a>
 8000a9e:	19e7      	adds	r7, r4, r7
 8000aa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa4:	d22e      	bcs.n	8000b04 <__udivmoddi4+0x2a0>
 8000aa6:	45b8      	cmp	r8, r7
 8000aa8:	d92c      	bls.n	8000b04 <__udivmoddi4+0x2a0>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4427      	add	r7, r4
 8000aae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ab2:	eba7 0708 	sub.w	r7, r7, r8
 8000ab6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aba:	454f      	cmp	r7, r9
 8000abc:	46c6      	mov	lr, r8
 8000abe:	4649      	mov	r1, r9
 8000ac0:	d31a      	bcc.n	8000af8 <__udivmoddi4+0x294>
 8000ac2:	d017      	beq.n	8000af4 <__udivmoddi4+0x290>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x27a>
 8000ac6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aca:	eb67 0701 	sbc.w	r7, r7, r1
 8000ace:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ad2:	40f2      	lsrs	r2, r6
 8000ad4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ad8:	40f7      	lsrs	r7, r6
 8000ada:	e9c5 2700 	strd	r2, r7, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e70b      	b.n	8000904 <__udivmoddi4+0xa0>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e9      	b.n	80008c4 <__udivmoddi4+0x60>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6fd      	b.n	80008f0 <__udivmoddi4+0x8c>
 8000af4:	4543      	cmp	r3, r8
 8000af6:	d2e5      	bcs.n	8000ac4 <__udivmoddi4+0x260>
 8000af8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000afc:	eb69 0104 	sbc.w	r1, r9, r4
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7df      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b04:	4608      	mov	r0, r1
 8000b06:	e7d2      	b.n	8000aae <__udivmoddi4+0x24a>
 8000b08:	4660      	mov	r0, ip
 8000b0a:	e78d      	b.n	8000a28 <__udivmoddi4+0x1c4>
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	e7b9      	b.n	8000a84 <__udivmoddi4+0x220>
 8000b10:	4666      	mov	r6, ip
 8000b12:	e775      	b.n	8000a00 <__udivmoddi4+0x19c>
 8000b14:	4630      	mov	r0, r6
 8000b16:	e74a      	b.n	80009ae <__udivmoddi4+0x14a>
 8000b18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b1c:	4439      	add	r1, r7
 8000b1e:	e713      	b.n	8000948 <__udivmoddi4+0xe4>
 8000b20:	3802      	subs	r0, #2
 8000b22:	443c      	add	r4, r7
 8000b24:	e724      	b.n	8000970 <__udivmoddi4+0x10c>
 8000b26:	bf00      	nop

08000b28 <__aeabi_idiv0>:
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490e      	ldr	r1, [pc, #56]	; (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0b      	ldr	r4, [pc, #44]	; (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b56:	f003 fef9 	bl	800494c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f009 fca9 	bl	800a4b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5e:	f000 fc2b 	bl	80013b8 <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   r0, =_estack
 8000b64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000614 	.word	0x20000614
  ldr r2, =_sidata
 8000b70:	0800a91c 	.word	0x0800a91c
  ldr r2, =_sbss
 8000b74:	20000614 	.word	0x20000614
  ldr r4, =_ebss
 8000b78:	20001e70 	.word	0x20001e70

08000b7c <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <BusFault_Handler>
	...

08000b80 <ASPEP_start>:

    return crc == 0;
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000b80:	b510      	push	{r4, lr}
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 8000b82:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8000b84:	4604      	mov	r4, r0
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 8000b86:	6940      	ldr	r0, [r0, #20]
 8000b88:	4798      	blx	r3
  pHandle->ASPEP_State = ASPEP_IDLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pHandle->ASPEP_TL_State = WAITING_PACKET;
  pHandle -> syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000b90:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

  /* Configure UART to receive first packet*/
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000b94:	6960      	ldr	r0, [r4, #20]
 8000b96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b98:	f104 011c 	add.w	r1, r4, #28
 8000b9c:	2204      	movs	r2, #4
}
 8000b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000ba2:	4718      	bx	r3

08000ba4 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon (ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000ba4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t * packet = (uint32_t*) pHandle->ctrlBuffer.buffer;
  *packet =( BEACON |
           (capabilities->version <<4) |
           (capabilities->DATA_CRC << 7) |
 8000ba6:	780b      	ldrb	r3, [r1, #0]
           (capabilities->version <<4) |
 8000ba8:	790a      	ldrb	r2, [r1, #4]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000baa:	788c      	ldrb	r4, [r1, #2]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
 8000bac:	784f      	ldrb	r7, [r1, #1]
           (((uint32_t)capabilities->TXA_maxSize) << 21));
 8000bae:	78ce      	ldrb	r6, [r1, #3]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000bb0:	4d1b      	ldr	r5, [pc, #108]	; (8000c20 <ASPEP_sendBeacon+0x7c>)
           (capabilities->DATA_CRC << 7) |
 8000bb2:	01db      	lsls	r3, r3, #7
           (capabilities->version <<4) |
 8000bb4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000bb8:	f043 0205 	orr.w	r2, r3, #5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000bbc:	03a3      	lsls	r3, r4, #14
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000bbe:	f002 01f5 	and.w	r1, r2, #245	; 0xf5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000bc2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8000bc6:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 8000bca:	4313      	orrs	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000bcc:	5c69      	ldrb	r1, [r5, r1]
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000bce:	4c15      	ldr	r4, [pc, #84]	; (8000c24 <ASPEP_sendBeacon+0x80>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000bd0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000bd4:	404a      	eors	r2, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000bd6:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8000bda:	5caa      	ldrb	r2, [r5, r2]
 8000bdc:	4051      	eors	r1, r2
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000bde:	f3c3 6603 	ubfx	r6, r3, #24, #4
 8000be2:	5c6a      	ldrb	r2, [r5, r1]
 8000be4:	4072      	eors	r2, r6
    *headerPtr |= (uint32_t)crc << 28;
 8000be6:	5ca2      	ldrb	r2, [r4, r2]
 8000be8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000bec:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bee:	b672      	cpsid	i
uint8_t ASPEP_TXframeProcess (ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
  uint8_t result = ASPEP_OK;
  ASPEP_ComputeHeaderCRC  ((uint32_t*)txBuffer); /* Insert CRC header in the packet to send */
  __disable_irq(); /*TODO: Disable High frequency task is enough */
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000bf0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000bf2:	b143      	cbz	r3, 8000c06 <ASPEP_sendBeacon+0x62>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bf4:	b662      	cpsie	i
        pHandle -> syncBuffer.length = bufferLength;
      }
    }
    else  if ( dataType == ASPEP_CTRL )
    {
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000bf6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000bfa:	b913      	cbnz	r3, 8000c02 <ASPEP_sendBeacon+0x5e>
        result = ASPEP_BUFFER_ERROR;
      }
      else {
        pHandle -> ctrlBuffer.state = pending;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000c02:	bcf0      	pop	{r4, r5, r6, r7}
 8000c04:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c06:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 8000c0a:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000c0c:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 8000c0e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000c12:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000c14:	2204      	movs	r2, #4
 8000c16:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000c18:	6940      	ldr	r0, [r0, #20]
}
 8000c1a:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000c1c:	4718      	bx	r3
 8000c1e:	bf00      	nop
 8000c20:	0800a554 	.word	0x0800a554
 8000c24:	0800a544 	.word	0x0800a544

08000c28 <ASPEP_sendPing>:
{
 8000c28:	b470      	push	{r4, r5, r6}
  uint8_t ipID = pHandle->liid &0xF;
 8000c2a:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
  uint8_t Nbit = pHandle->syncPacketCount & 0x1; /* Keep only LSB */
 8000c2e:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 8000c32:	014c      	lsls	r4, r1, #5
 8000c34:	f003 060f 	and.w	r6, r3, #15
 8000c38:	ea44 1301 	orr.w	r3, r4, r1, lsl #4
 8000c3c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8000c40:	f005 0401 	and.w	r4, r5, #1
 8000c44:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8000c48:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 8000c4c:	f043 0306 	orr.w	r3, r3, #6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000c50:	4c16      	ldr	r4, [pc, #88]	; (8000cac <ASPEP_sendPing+0x84>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000c52:	4d17      	ldr	r5, [pc, #92]	; (8000cb0 <ASPEP_sendPing+0x88>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000c54:	f003 01f6 	and.w	r1, r3, #246	; 0xf6
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 8000c58:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000c5c:	5c61      	ldrb	r1, [r4, r1]
 8000c5e:	ea81 2112 	eor.w	r1, r1, r2, lsr #8
 8000c62:	b2c9      	uxtb	r1, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000c64:	5c63      	ldrb	r3, [r4, r1]
 8000c66:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000c6a:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000c6c:	5ce3      	ldrb	r3, [r4, r3]
 8000c6e:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    *headerPtr |= (uint32_t)crc << 28;
 8000c72:	5ceb      	ldrb	r3, [r5, r3]
 8000c74:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
 8000c78:	6202      	str	r2, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7a:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000c7c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000c7e:	b143      	cbz	r3, 8000c92 <ASPEP_sendPing+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c80:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000c82:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000c86:	b913      	cbnz	r3, 8000c8e <ASPEP_sendPing+0x66>
        pHandle -> ctrlBuffer.state = pending;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000c8e:	bc70      	pop	{r4, r5, r6}
 8000c90:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c92:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 8000c96:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000c98:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 8000c9a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000c9e:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000ca4:	6940      	ldr	r0, [r0, #20]
}
 8000ca6:	bc70      	pop	{r4, r5, r6}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000ca8:	4718      	bx	r3
 8000caa:	bf00      	nop
 8000cac:	0800a554 	.word	0x0800a554
 8000cb0:	0800a544 	.word	0x0800a544

08000cb4 <ASPEP_getBuffer>:
  if (syncAsync == MCTL_SYNC)
 8000cb4:	2a0a      	cmp	r2, #10
{
 8000cb6:	b410      	push	{r4}
 8000cb8:	4603      	mov	r3, r0
  if (syncAsync == MCTL_SYNC)
 8000cba:	d00b      	beq.n	8000cd4 <ASPEP_getBuffer+0x20>
    if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock ))
 8000cbc:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8000cc0:	2a01      	cmp	r2, #1
 8000cc2:	d921      	bls.n	8000d08 <ASPEP_getBuffer+0x54>
 8000cc4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8000cc8:	2a01      	cmp	r2, #1
 8000cca:	d911      	bls.n	8000cf0 <ASPEP_getBuffer+0x3c>
      result = false;
 8000ccc:	2000      	movs	r0, #0
}
 8000cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cd2:	4770      	bx	lr
    if (pHandle->syncBuffer.state <= writeLock ) /* Possible values are free or writeLock*/
 8000cd4:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000cd8:	2a01      	cmp	r2, #1
 8000cda:	d8f7      	bhi.n	8000ccc <ASPEP_getBuffer+0x18>
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000cdc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      pHandle->syncBuffer.state = writeLock;
 8000cde:	2401      	movs	r4, #1
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000ce0:	3204      	adds	r2, #4
 8000ce2:	600a      	str	r2, [r1, #0]
      pHandle->syncBuffer.state = writeLock;
 8000ce4:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 8000ce8:	4620      	mov	r0, r4
}
 8000cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cee:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000cf0:	6b82      	ldr	r2, [r0, #56]	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 8000cf2:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000cf4:	f103 0438 	add.w	r4, r3, #56	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 8000cf8:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000cfc:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000cfe:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000d00:	f85d 4b04 	ldr.w	r4, [sp], #4
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d04:	600a      	str	r2, [r1, #0]
}
 8000d06:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d08:	6b02      	ldr	r2, [r0, #48]	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 8000d0a:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d0c:	f103 0430 	add.w	r4, r3, #48	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 8000d10:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d14:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d16:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000d18:	f85d 4b04 	ldr.w	r4, [sp], #4
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d1c:	600a      	str	r2, [r1, #0]
}
 8000d1e:	4770      	bx	lr

08000d20 <ASPEP_sendPacket>:
{
 8000d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pHandle-> ASPEP_State == ASPEP_CONNECTED)
 8000d22:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 8000d26:	2c02      	cmp	r4, #2
 8000d28:	d002      	beq.n	8000d30 <ASPEP_sendPacket+0x10>
    result = ASPEP_NOT_CONNECTED;
 8000d2a:	2102      	movs	r1, #2
}
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpHeader =  (txDataLength << 4) | syncAsync;
 8000d30:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
    *header = tmpHeader;
 8000d34:	f841 4c04 	str.w	r4, [r1, #-4]
    if (pHandle->Capabilities.DATA_CRC == 1)
 8000d38:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
 8000d3c:	2c01      	cmp	r4, #1
    packet = packet - ASPEP_HEADER_SIZE; /* Header ues 4*8 bits on top of txBuffer*/
 8000d3e:	f1a1 0504 	sub.w	r5, r1, #4
    if (pHandle->Capabilities.DATA_CRC == 1)
 8000d42:	d106      	bne.n	8000d52 <ASPEP_sendPacket+0x32>
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000d44:	18ac      	adds	r4, r5, r2
      *(packet+ASPEP_HEADER_SIZE+txDataLength) = (uint8_t) 0xCA; /* Dummy CRC */
 8000d46:	26ca      	movs	r6, #202	; 0xca
 8000d48:	548e      	strb	r6, [r1, r2]
      txDataLength+=ASPEP_DATACRC_SIZE;
 8000d4a:	1c97      	adds	r7, r2, #2
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000d4c:	26fe      	movs	r6, #254	; 0xfe
      txDataLength+=ASPEP_DATACRC_SIZE;
 8000d4e:	b2ba      	uxth	r2, r7
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000d50:	7166      	strb	r6, [r4, #5]
    if (syncAsync == MCTL_SYNC )
 8000d52:	2b0a      	cmp	r3, #10
 8000d54:	d103      	bne.n	8000d5e <ASPEP_sendPacket+0x3e>
      if ( pSupHandle->MCP_PacketAvailable)
 8000d56:	7c04      	ldrb	r4, [r0, #16]
 8000d58:	b37c      	cbz	r4, 8000dba <ASPEP_sendPacket+0x9a>
        pSupHandle-> MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	7404      	strb	r4, [r0, #16]
    uint32_t header = *headerPtr;
 8000d5e:	f851 4c04 	ldr.w	r4, [r1, #-4]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000d62:	4f34      	ldr	r7, [pc, #208]	; (8000e34 <ASPEP_sendPacket+0x114>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000d64:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8000e38 <ASPEP_sendPacket+0x118>
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000d68:	b2e6      	uxtb	r6, r4
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000d6a:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 8000d6e:	5dbe      	ldrb	r6, [r7, r6]
 8000d70:	ea8e 0e06 	eor.w	lr, lr, r6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000d74:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8000d78:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8000d7c:	ea86 060e 	eor.w	r6, r6, lr
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 8000d80:	3204      	adds	r2, #4
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000d82:	5dbe      	ldrb	r6, [r7, r6]
 8000d84:	f3c4 6703 	ubfx	r7, r4, #24, #4
 8000d88:	407e      	eors	r6, r7
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 8000d8a:	b292      	uxth	r2, r2
    *headerPtr |= (uint32_t)crc << 28;
 8000d8c:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8000d90:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 8000d94:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000d9a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000d9c:	b1e9      	cbz	r1, 8000dda <ASPEP_sendPacket+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d9e:	b662      	cpsie	i
    if ( dataType == MCTL_ASYNC )
 8000da0:	2b09      	cmp	r3, #9
 8000da2:	d00d      	beq.n	8000dc0 <ASPEP_sendPacket+0xa0>
    else if (dataType == MCTL_SYNC )
 8000da4:	2b0a      	cmp	r3, #10
 8000da6:	d02f      	beq.n	8000e08 <ASPEP_sendPacket+0xe8>
    else  if ( dataType == ASPEP_CTRL )
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d133      	bne.n	8000e14 <ASPEP_sendPacket+0xf4>
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000dac:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 8000db0:	bb71      	cbnz	r1, 8000e10 <ASPEP_sendPacket+0xf0>
        pHandle -> ctrlBuffer.state = pending;
 8000db2:	2302      	movs	r3, #2
 8000db4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000db8:	e7b8      	b.n	8000d2c <ASPEP_sendPacket+0xc>
        result = MCTL_SYNC_NOT_EXPECTED;
 8000dba:	2101      	movs	r1, #1
}
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (pHandle->asyncNextBuffer == NULL)
 8000dc0:	e9d0 3410 	ldrd	r3, r4, [r0, #64]	; 0x40
      if ( txBuffer != (uint8_t *) pHandle->lastRequestedAsyncBuff->buffer)
 8000dc4:	6819      	ldr	r1, [r3, #0]
        result = ASPEP_BUFFER_ERROR;
 8000dc6:	428d      	cmp	r5, r1
 8000dc8:	bf14      	ite	ne
 8000dca:	2103      	movne	r1, #3
 8000dcc:	2100      	moveq	r1, #0
      if (pHandle->asyncNextBuffer == NULL)
 8000dce:	b37c      	cbz	r4, 8000e30 <ASPEP_sendPacket+0x110>
      pHandle->lastRequestedAsyncBuff->state = pending;
 8000dd0:	2402      	movs	r4, #2
 8000dd2:	719c      	strb	r4, [r3, #6]
      pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000dd4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000dd6:	809a      	strh	r2, [r3, #4]
 8000dd8:	e7a8      	b.n	8000d2c <ASPEP_sendPacket+0xc>
    if (dataType == MCTL_ASYNC )
 8000dda:	2b09      	cmp	r3, #9
 8000ddc:	d022      	beq.n	8000e24 <ASPEP_sendPacket+0x104>
    else if (dataType == MCTL_SYNC )
 8000dde:	2b0a      	cmp	r3, #10
      pHandle->syncBuffer.state = readLock;
 8000de0:	f04f 0103 	mov.w	r1, #3
      pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000de4:	bf0b      	itete	eq
 8000de6:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000dea:	f100 0320 	addne.w	r3, r0, #32
      pHandle->syncBuffer.state = readLock;
 8000dee:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = readLock;
 8000df2:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000df6:	6483      	str	r3, [r0, #72]	; 0x48
 8000df8:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000dfa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000dfc:	6940      	ldr	r0, [r0, #20]
 8000dfe:	4629      	mov	r1, r5
 8000e00:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 8000e02:	2100      	movs	r1, #0
}
 8000e04:	4608      	mov	r0, r1
 8000e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( pHandle -> syncBuffer.state != writeLock ) {
 8000e08:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d003      	beq.n	8000e18 <ASPEP_sendPacket+0xf8>
        result = ASPEP_BUFFER_ERROR;
 8000e10:	2103      	movs	r1, #3
 8000e12:	e78b      	b.n	8000d2c <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 8000e14:	2100      	movs	r1, #0
 8000e16:	e789      	b.n	8000d2c <ASPEP_sendPacket+0xc>
        pHandle -> syncBuffer.state = pending;
 8000e18:	2302      	movs	r3, #2
        pHandle -> syncBuffer.length = bufferLength;
 8000e1a:	8582      	strh	r2, [r0, #44]	; 0x2c
        pHandle -> syncBuffer.state = pending;
 8000e1c:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
  uint8_t result = ASPEP_OK;
 8000e20:	2100      	movs	r1, #0
 8000e22:	e783      	b.n	8000d2c <ASPEP_sendPacket+0xc>
      pHandle->lastRequestedAsyncBuff->state = readLock;
 8000e24:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e26:	2103      	movs	r1, #3
 8000e28:	7199      	strb	r1, [r3, #6]
      pHandle->lockBuffer = (void *) pHandle->lastRequestedAsyncBuff;
 8000e2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e2c:	6483      	str	r3, [r0, #72]	; 0x48
 8000e2e:	e7e3      	b.n	8000df8 <ASPEP_sendPacket+0xd8>
        pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000e30:	6443      	str	r3, [r0, #68]	; 0x44
 8000e32:	e7cd      	b.n	8000dd0 <ASPEP_sendPacket+0xb0>
 8000e34:	0800a554 	.word	0x0800a554
 8000e38:	0800a544 	.word	0x0800a544

08000e3c <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT (ASPEP_Handle_t *pHandle )
{
 8000e3c:	b538      	push	{r3, r4, r5, lr}
  /* First free previous readLock buffer */
  if (pHandle->ctrlBuffer.state == readLock)
 8000e3e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000e42:	2b03      	cmp	r3, #3
{
 8000e44:	4604      	mov	r4, r0
  if (pHandle->ctrlBuffer.state == readLock)
 8000e46:	d015      	beq.n	8000e74 <ASPEP_HWDataTransmittedIT+0x38>
  {
    pHandle -> ctrlBuffer.state = free;
  }
  else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
  {
    MCTL_Buff_t * tempBuff = (MCTL_Buff_t *) pHandle -> lockBuffer;
 8000e48:	6c83      	ldr	r3, [r0, #72]	; 0x48
    tempBuff->state = free;
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	719a      	strb	r2, [r3, #6]
  }
  if ( pHandle -> syncBuffer.state == pending )
 8000e4e:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d015      	beq.n	8000e82 <ASPEP_HWDataTransmittedIT+0x46>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
    pHandle ->syncBuffer.state = readLock;
  }
  /* Second prepare transfer of pending buffer */
  else if ( pHandle -> ctrlBuffer.state == pending )
 8000e56:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d11d      	bne.n	8000e9a <ASPEP_HWDataTransmittedIT+0x5e>
  {
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e5e:	f100 0120 	add.w	r1, r0, #32
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000e62:	6d83      	ldr	r3, [r0, #88]	; 0x58
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e64:	6481      	str	r1, [r0, #72]	; 0x48
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000e66:	2204      	movs	r2, #4
 8000e68:	6940      	ldr	r0, [r0, #20]
 8000e6a:	4798      	blx	r3
    pHandle -> ctrlBuffer.state = readLock;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    {
      pHandle->lockBuffer = NULL;
    }
    __enable_irq();
  }
}
 8000e72:	bd38      	pop	{r3, r4, r5, pc}
  if ( pHandle -> syncBuffer.state == pending )
 8000e74:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    pHandle -> ctrlBuffer.state = free;
 8000e78:	2200      	movs	r2, #0
  if ( pHandle -> syncBuffer.state == pending )
 8000e7a:	2b02      	cmp	r3, #2
    pHandle -> ctrlBuffer.state = free;
 8000e7c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if ( pHandle -> syncBuffer.state == pending )
 8000e80:	d10b      	bne.n	8000e9a <ASPEP_HWDataTransmittedIT+0x5e>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000e82:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8000e86:	64a3      	str	r3, [r4, #72]	; 0x48
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000e88:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e8c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e8e:	6960      	ldr	r0, [r4, #20]
 8000e90:	4798      	blx	r3
    pHandle ->syncBuffer.state = readLock;
 8000e92:	2303      	movs	r3, #3
 8000e94:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000e98:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9a:	b672      	cpsid	i
    if ( pHandle->asyncNextBuffer != NULL )
 8000e9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e9e:	b1d3      	cbz	r3, 8000ed6 <ASPEP_HWDataTransmittedIT+0x9a>
      pHandle->asyncNextBuffer->state = readLock;
 8000ea0:	2203      	movs	r2, #3
      pHandle->lockBuffer = (void *) pHandle->asyncNextBuffer;
 8000ea2:	64a3      	str	r3, [r4, #72]	; 0x48
      pHandle->asyncNextBuffer->state = readLock;
 8000ea4:	719a      	strb	r2, [r3, #6]
      pHandle->fASPEP_send (pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000ea6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ea8:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8000eaa:	889a      	ldrh	r2, [r3, #4]
 8000eac:	6819      	ldr	r1, [r3, #0]
 8000eae:	6960      	ldr	r0, [r4, #20]
 8000eb0:	47a8      	blx	r5
      if ( (pHandle->asyncBufferA.state == pending ) || (pHandle->asyncBufferB.state == pending))
 8000eb2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d007      	beq.n	8000eca <ASPEP_HWDataTransmittedIT+0x8e>
 8000eba:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d003      	beq.n	8000eca <ASPEP_HWDataTransmittedIT+0x8e>
        pHandle->asyncNextBuffer = NULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000ec6:	b662      	cpsie	i
}
 8000ec8:	bd38      	pop	{r3, r4, r5, pc}
        uint32_t temp = (uint32_t) &pHandle->asyncBufferA + (uint32_t) &pHandle->asyncBufferB - (uint32_t)  pHandle->asyncNextBuffer;
 8000eca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ecc:	0063      	lsls	r3, r4, #1
 8000ece:	3368      	adds	r3, #104	; 0x68
 8000ed0:	1a9b      	subs	r3, r3, r2
        pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp;
 8000ed2:	6463      	str	r3, [r4, #68]	; 0x44
      {
 8000ed4:	e7f7      	b.n	8000ec6 <ASPEP_HWDataTransmittedIT+0x8a>
      pHandle->lockBuffer = NULL;
 8000ed6:	64a3      	str	r3, [r4, #72]	; 0x48
 8000ed8:	e7f5      	b.n	8000ec6 <ASPEP_HWDataTransmittedIT+0x8a>
 8000eda:	bf00      	nop

08000edc <ASPEP_RXframeProcess>:

uint8_t* ASPEP_RXframeProcess (MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ASPEP_Capabilities_def MasterCapabilities;
  uint16_t packetNumber;
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);

  *packetLength = 0;
  if (pHandle->NewPacketAvailable)
 8000ede:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);
 8000ee2:	69c2      	ldr	r2, [r0, #28]
  *packetLength = 0;
 8000ee4:	2500      	movs	r5, #0
{
 8000ee6:	4604      	mov	r4, r0
  *packetLength = 0;
 8000ee8:	800d      	strh	r5, [r1, #0]
  if (pHandle->NewPacketAvailable)
 8000eea:	b18b      	cbz	r3, 8000f10 <ASPEP_RXframeProcess+0x34>
  {
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
    switch (pHandle->ASPEP_State)
 8000eec:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
 8000ef0:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
    switch (pHandle->ASPEP_State)
 8000ef4:	2e01      	cmp	r6, #1
 8000ef6:	d050      	beq.n	8000f9a <ASPEP_RXframeProcess+0xbe>
 8000ef8:	2e02      	cmp	r6, #2
 8000efa:	d03a      	beq.n	8000f72 <ASPEP_RXframeProcess+0x96>
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d030      	beq.n	8000f62 <ASPEP_RXframeProcess+0x86>
      }

      break;
    }
    /* The valid received packet is now safely consumes, we are ready to receive a new packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000f00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f02:	6960      	ldr	r0, [r4, #20]
 8000f04:	2204      	movs	r2, #4
 8000f06:	f104 011c 	add.w	r1, r4, #28
 8000f0a:	4798      	blx	r3
  else
  {
    /* Nothing to do, no response is due to the master */
  }
  return result;
}
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (pHandle->badPacketFlag > ASPEP_OK )
 8000f10:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d0f9      	beq.n	8000f0c <ASPEP_RXframeProcess+0x30>
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 8000f18:	042b      	lsls	r3, r5, #16
 8000f1a:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000f1e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8000f22:	4a7a      	ldr	r2, [pc, #488]	; (800110c <ASPEP_RXframeProcess+0x230>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000f24:	497a      	ldr	r1, [pc, #488]	; (8001110 <ASPEP_RXframeProcess+0x234>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000f26:	f083 0309 	eor.w	r3, r3, #9
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000f2a:	5cd3      	ldrb	r3, [r2, r3]
 8000f2c:	ea83 4315 	eor.w	r3, r3, r5, lsr #16
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 8000f30:	f045 050f 	orr.w	r5, r5, #15
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000f34:	5cd3      	ldrb	r3, [r2, r3]
    *headerPtr |= (uint32_t)crc << 28;
 8000f36:	5ccb      	ldrb	r3, [r1, r3]
 8000f38:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
 8000f3c:	6205      	str	r5, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3e:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000f40:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f42:	b3cb      	cbz	r3, 8000fb8 <ASPEP_RXframeProcess+0xdc>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f44:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000f46:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000f4a:	b913      	cbnz	r3, 8000f52 <ASPEP_RXframeProcess+0x76>
        pHandle -> ctrlBuffer.state = pending;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    pHandle->badPacketFlag = ASPEP_OK;
 8000f52:	2500      	movs	r5, #0
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 8000f54:	6960      	ldr	r0, [r4, #20]
 8000f56:	6d23      	ldr	r3, [r4, #80]	; 0x50
    pHandle->badPacketFlag = ASPEP_OK;
 8000f58:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 8000f5c:	4798      	blx	r3
}
 8000f5e:	4628      	mov	r0, r5
 8000f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (pHandle->rxPacketType == beacon )
 8000f62:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d04b      	beq.n	8001002 <ASPEP_RXframeProcess+0x126>
      else if (pHandle->rxPacketType == ping)
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d069      	beq.n	8001042 <ASPEP_RXframeProcess+0x166>
  uint8_t* result = NULL;
 8000f6e:	4635      	mov	r5, r6
 8000f70:	e7c6      	b.n	8000f00 <ASPEP_RXframeProcess+0x24>
      if (pHandle->rxPacketType == beacon )
 8000f72:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000f76:	2b05      	cmp	r3, #5
 8000f78:	d03a      	beq.n	8000ff0 <ASPEP_RXframeProcess+0x114>
      else if (pHandle->rxPacketType == ping )
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d068      	beq.n	8001050 <ASPEP_RXframeProcess+0x174>
      else if (pHandle->rxPacketType == data )
 8000f7e:	2b09      	cmp	r3, #9
 8000f80:	d1be      	bne.n	8000f00 <ASPEP_RXframeProcess+0x24>
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000f82:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
          *packetLength = pHandle->rxLength;
 8000f86:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
          result = pHandle->rxBuffer;
 8000f8a:	6985      	ldr	r5, [r0, #24]
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000f8c:	3301      	adds	r3, #1
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000f8e:	2001      	movs	r0, #1
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000f90:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000f94:	7420      	strb	r0, [r4, #16]
          *packetLength = pHandle->rxLength;
 8000f96:	800a      	strh	r2, [r1, #0]
          result = pHandle->rxBuffer;
 8000f98:	e7b2      	b.n	8000f00 <ASPEP_RXframeProcess+0x24>
      if (pHandle->rxPacketType == beacon )
 8000f9a:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	d016      	beq.n	8000fd0 <ASPEP_RXframeProcess+0xf4>
      else if (pHandle->rxPacketType == ping)
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d1ac      	bne.n	8000f00 <ASPEP_RXframeProcess+0x24>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 8000fa6:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000faa:	4631      	mov	r1, r6
 8000fac:	f7ff fe3c 	bl	8000c28 <ASPEP_sendPing>
        pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000fb6:	e7a3      	b.n	8000f00 <ASPEP_RXframeProcess+0x24>
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000fb8:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 8000fbc:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000fbe:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 8000fc0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000fc4:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000fca:	6940      	ldr	r0, [r0, #20]
 8000fcc:	4798      	blx	r3
 8000fce:	e7c0      	b.n	8000f52 <ASPEP_RXframeProcess+0x76>
  MasterCapabilities->DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000fd0:	7f01      	ldrb	r1, [r0, #28]
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000fd2:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8000fd6:	ebb3 1fd1 	cmp.w	r3, r1, lsr #7
 8000fda:	d059      	beq.n	8001090 <ASPEP_RXframeProcess+0x1b4>
          pHandle->ASPEP_State = ASPEP_IDLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        ASPEP_sendBeacon (pHandle, &pHandle->Capabilities);
 8000fe2:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff fddc 	bl	8000ba4 <ASPEP_sendBeacon>
  uint8_t* result = NULL;
 8000fec:	2500      	movs	r5, #0
 8000fee:	e787      	b.n	8000f00 <ASPEP_RXframeProcess+0x24>
  MasterCapabilities->DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000ff0:	7f01      	ldrb	r1, [r0, #28]
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000ff2:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8000ff6:	ebb3 1fd1 	cmp.w	r3, r1, lsr #7
 8000ffa:	d02e      	beq.n	800105a <ASPEP_RXframeProcess+0x17e>
 8000ffc:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8001000:	e7ef      	b.n	8000fe2 <ASPEP_RXframeProcess+0x106>
  MasterCapabilities->DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8001002:	7f01      	ldrb	r1, [r0, #28]
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8001004:	f890 7067 	ldrb.w	r7, [r0, #103]	; 0x67
 8001008:	ebb7 1fd1 	cmp.w	r7, r1, lsr #7
  MasterCapabilities->DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 800100c:	ea4f 15d1 	mov.w	r5, r1, lsr #7
  MasterCapabilities->TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 8001010:	f3c2 3086 	ubfx	r0, r2, #14, #7
  MasterCapabilities->TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 8001014:	f3c2 5346 	ubfx	r3, r2, #21, #7
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8001018:	d054      	beq.n	80010c4 <ASPEP_RXframeProcess+0x1e8>
 800101a:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 800101e:	f894 c06a 	ldrb.w	ip, [r4, #106]	; 0x6a
          pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001022:	42bd      	cmp	r5, r7
 8001024:	bf28      	it	cs
 8001026:	463d      	movcs	r5, r7
          pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001028:	4281      	cmp	r1, r0
 800102a:	bf28      	it	cs
 800102c:	4601      	movcs	r1, r0
          pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800102e:	4563      	cmp	r3, ip
 8001030:	bf28      	it	cs
 8001032:	4663      	movcs	r3, ip
          pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001034:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
          pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001038:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
          pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800103c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8001040:	e7cf      	b.n	8000fe2 <ASPEP_RXframeProcess+0x106>
        ASPEP_sendPing (pHandle,ASPEP_PING_RESET,packetNumber);
 8001042:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001046:	4631      	mov	r1, r6
 8001048:	f7ff fdee 	bl	8000c28 <ASPEP_sendPing>
  uint8_t* result = NULL;
 800104c:	4635      	mov	r5, r6
 800104e:	e757      	b.n	8000f00 <ASPEP_RXframeProcess+0x24>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 8001050:	7f42      	ldrb	r2, [r0, #29]
 8001052:	2101      	movs	r1, #1
 8001054:	f7ff fde8 	bl	8000c28 <ASPEP_sendPing>
 8001058:	e752      	b.n	8000f00 <ASPEP_RXframeProcess+0x24>
  MasterCapabilities->RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 800105a:	7f43      	ldrb	r3, [r0, #29]
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 800105c:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 8001060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001064:	4299      	cmp	r1, r3
 8001066:	d3c9      	bcc.n	8000ffc <ASPEP_RXframeProcess+0x120>
      (MasterCapabilities->RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8001068:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 800106c:	f3c2 3386 	ubfx	r3, r2, #14, #7
 8001070:	4299      	cmp	r1, r3
 8001072:	d1c3      	bne.n	8000ffc <ASPEP_RXframeProcess+0x120>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities->TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8001074:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
 8001078:	f3c2 5346 	ubfx	r3, r2, #21, #7
 800107c:	4299      	cmp	r1, r3
 800107e:	d1bd      	bne.n	8000ffc <ASPEP_RXframeProcess+0x120>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities->TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8001080:	f890 506b 	ldrb.w	r5, [r0, #107]	; 0x6b
 8001084:	f3c2 1302 	ubfx	r3, r2, #4, #3
          pHandle->ASPEP_State = ASPEP_IDLE;
 8001088:	1aeb      	subs	r3, r5, r3
 800108a:	425d      	negs	r5, r3
 800108c:	415d      	adcs	r5, r3
 800108e:	e7b5      	b.n	8000ffc <ASPEP_RXframeProcess+0x120>
  MasterCapabilities->RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8001090:	7f43      	ldrb	r3, [r0, #29]
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8001092:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 8001096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800109a:	4299      	cmp	r1, r3
 800109c:	d39e      	bcc.n	8000fdc <ASPEP_RXframeProcess+0x100>
      (MasterCapabilities->RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 800109e:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 80010a2:	f3c2 3386 	ubfx	r3, r2, #14, #7
 80010a6:	4299      	cmp	r1, r3
 80010a8:	d198      	bne.n	8000fdc <ASPEP_RXframeProcess+0x100>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities->TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 80010aa:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
 80010ae:	f3c2 5346 	ubfx	r3, r2, #21, #7
 80010b2:	4299      	cmp	r1, r3
 80010b4:	d192      	bne.n	8000fdc <ASPEP_RXframeProcess+0x100>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities->TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 80010b6:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
 80010ba:	f3c2 1302 	ubfx	r3, r2, #4, #3
 80010be:	4299      	cmp	r1, r3
 80010c0:	d18c      	bne.n	8000fdc <ASPEP_RXframeProcess+0x100>
 80010c2:	e78e      	b.n	8000fe2 <ASPEP_RXframeProcess+0x106>
  MasterCapabilities->RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80010c4:	7f61      	ldrb	r1, [r4, #29]
      (MasterCapabilities->RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 80010c6:	f894 6068 	ldrb.w	r6, [r4, #104]	; 0x68
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80010ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80010ce:	42b1      	cmp	r1, r6
 80010d0:	d8a3      	bhi.n	800101a <ASPEP_RXframeProcess+0x13e>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities->TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 80010d2:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 80010d6:	f894 c06a 	ldrb.w	ip, [r4, #106]	; 0x6a
      (MasterCapabilities->RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 80010da:	4288      	cmp	r0, r1
 80010dc:	d1a1      	bne.n	8001022 <ASPEP_RXframeProcess+0x146>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities->TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 80010de:	4563      	cmp	r3, ip
 80010e0:	d19f      	bne.n	8001022 <ASPEP_RXframeProcess+0x146>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities->TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 80010e2:	f894 e06b 	ldrb.w	lr, [r4, #107]	; 0x6b
 80010e6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80010ea:	4596      	cmp	lr, r2
 80010ec:	d199      	bne.n	8001022 <ASPEP_RXframeProcess+0x146>
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 80010ee:	1c4b      	adds	r3, r1, #1
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 80010f0:	1c72      	adds	r2, r6, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 80010f2:	015b      	lsls	r3, r3, #5
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 80010f4:	0152      	lsls	r2, r2, #5
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 80010f6:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80010fa:	2101      	movs	r1, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 80010fc:	81a3      	strh	r3, [r4, #12]
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 80010fe:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8001102:	f8a4 c00e 	strh.w	ip, [r4, #14]
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001106:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 800110a:	e76a      	b.n	8000fe2 <ASPEP_RXframeProcess+0x106>
 800110c:	0800a554 	.word	0x0800a554
 8001110:	0800a544 	.word	0x0800a544

08001114 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT (ASPEP_Handle_t *pHandle)
{
 8001114:	b538      	push	{r3, r4, r5, lr}
/* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.*/
/* This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_RXframeProcess*/
/* If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.*/
  switch (pHandle->ASPEP_TL_State) {
 8001116:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 800111a:	4604      	mov	r4, r0
  switch (pHandle->ASPEP_TL_State) {
 800111c:	b13b      	cbz	r3, 800112e <ASPEP_HWDataReceivedIT+0x1a>
 800111e:	2b01      	cmp	r3, #1
 8001120:	d104      	bne.n	800112c <ASPEP_HWDataReceivedIT+0x18>
    {
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
    }
    break;
  case WAITING_PAYLOAD:
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001122:	2200      	movs	r2, #0
    // Payload received,
    pHandle->NewPacketAvailable = true;
 8001124:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001128:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    /*The receiver is not reconfigure right now on purpose to avoid race condition when the packet will be processed in ASPEP_RXframeProcess */
    break;
  }
}
 800112c:	bd38      	pop	{r3, r4, r5, pc}
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 800112e:	69c2      	ldr	r2, [r0, #28]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8001130:	491f      	ldr	r1, [pc, #124]	; (80011b0 <ASPEP_HWDataReceivedIT+0x9c>)
 8001132:	b2d3      	uxtb	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8001134:	5ccb      	ldrb	r3, [r1, r3]
 8001136:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 800113a:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 800113c:	5ccb      	ldrb	r3, [r1, r3]
 800113e:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8001142:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 24) & 0xff) ];
 8001144:	5ccb      	ldrb	r3, [r1, r3]
 8001146:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 800114a:	5ccb      	ldrb	r3, [r1, r3]
 800114c:	b963      	cbnz	r3, 8001168 <ASPEP_HWDataReceivedIT+0x54>
       pHandle->rxPacketType = (ASPEP_packetType_def) (pHandle->rxHeader[0] & ID_MASK);
 800114e:	7f03      	ldrb	r3, [r0, #28]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	2b06      	cmp	r3, #6
 8001156:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
       switch (pHandle->rxPacketType) {
 800115a:	d809      	bhi.n	8001170 <ASPEP_HWDataReceivedIT+0x5c>
 800115c:	2b04      	cmp	r3, #4
 800115e:	d81e      	bhi.n	800119e <ASPEP_HWDataReceivedIT+0x8a>
         pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8001160:	2301      	movs	r3, #1
 8001162:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8001166:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8001168:	2304      	movs	r3, #4
 800116a:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 800116e:	bd38      	pop	{r3, r4, r5, pc}
 8001170:	2b09      	cmp	r3, #9
 8001172:	d1f5      	bne.n	8001160 <ASPEP_HWDataReceivedIT+0x4c>
         pHandle->rxLength = (*((uint32_t *)pHandle->rxHeader) & 0x0001FFF0) >> 4;
 8001174:	f3c2 120c 	ubfx	r2, r2, #4, #13
 8001178:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
         if (pHandle->rxLength == 0) /* data packet with length 0 is a valid packet*/
 800117c:	b17a      	cbz	r2, 800119e <ASPEP_HWDataReceivedIT+0x8a>
         else if (pHandle->rxLength <= pHandle->maxRXPayload)
 800117e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8001182:	4293      	cmp	r3, r2
 8001184:	d30f      	bcc.n	80011a6 <ASPEP_HWDataReceivedIT+0x92>
           pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer , pHandle->rxLength+ASPEP_DATACRC_SIZE*pHandle->Capabilities.DATA_CRC); /* need to read + 2 bytes CRC*/
 8001186:	f890 5067 	ldrb.w	r5, [r0, #103]	; 0x67
 800118a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800118c:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 8001190:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
 8001194:	4798      	blx	r3
           pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8001196:	2301      	movs	r3, #1
 8001198:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 800119c:	bd38      	pop	{r3, r4, r5, pc}
         pHandle->NewPacketAvailable = true;
 800119e:	2301      	movs	r3, #1
 80011a0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 80011a4:	bd38      	pop	{r3, r4, r5, pc}
           pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 80011a6:	2302      	movs	r3, #2
 80011a8:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 80011ac:	bd38      	pop	{r3, r4, r5, pc}
 80011ae:	bf00      	nop
 80011b0:	0800a554 	.word	0x0800a554

080011b4 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset (ASPEP_Handle_t *pHandle)
{ /* We must reset the RX state machine to be sure to not be in Waiting packet state */
 80011b4:	4601      	mov	r1, r0
  /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
  /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
  pHandle->ASPEP_TL_State = WAITING_PACKET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 80011bc:	311c      	adds	r1, #28
 80011be:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80011c0:	6940      	ldr	r0, [r0, #20]
 80011c2:	2204      	movs	r2, #4
 80011c4:	4718      	bx	r3
 80011c6:	bf00      	nop

080011c8 <Tension_PID>:
	}
	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
	}
}

void Tension_PID(void){
 80011c8:	b508      	push	{r3, lr}
	float Delta_t = 0.1;
	if (MC_GetSTMStateMotor1() == RUN)
 80011ca:	f000 fe4f 	bl	8001e6c <MC_GetSTMStateMotor1>
 80011ce:	2806      	cmp	r0, #6
 80011d0:	d000      	beq.n	80011d4 <Tension_PID+0xc>
		}
		refCurrent_Iqd.q = (int16_t)(refCurrent/S16A_TO_FLOAT);
		refCurrent_Iqd.d = 0;
		MC_SetCurrentReferenceMotor1(refCurrent_Iqd);
	}
}
 80011d2:	bd08      	pop	{r3, pc}
		error[1] = refTension - curTension;
 80011d4:	4a34      	ldr	r2, [pc, #208]	; (80012a8 <Tension_PID+0xe0>)
 80011d6:	4b35      	ldr	r3, [pc, #212]	; (80012ac <Tension_PID+0xe4>)
 80011d8:	edd2 7a00 	vldr	s15, [r2]
 80011dc:	ed93 7a00 	vldr	s14, [r3]
		MV = error[1] * Tension_P_gain + int_error * Tension_I_gain + d_error * Tension_D_gain + refTension;	// PID control
 80011e0:	4a33      	ldr	r2, [pc, #204]	; (80012b0 <Tension_PID+0xe8>)
		error[1] = refTension - curTension;
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <Tension_PID+0xec>)
 80011e4:	edd2 3a00 	vldr	s7, [r2]
		d_error = error[1] - error[0];
 80011e8:	edd3 6a00 	vldr	s13, [r3]
		MV = error[1] * Tension_P_gain + int_error * Tension_I_gain + d_error * Tension_D_gain + refTension;	// PID control
 80011ec:	4932      	ldr	r1, [pc, #200]	; (80012b8 <Tension_PID+0xf0>)
		int_error += error[1] * Delta_t;
 80011ee:	4a33      	ldr	r2, [pc, #204]	; (80012bc <Tension_PID+0xf4>)
 80011f0:	edd1 4a00 	vldr	s9, [r1]
 80011f4:	ed92 6a00 	vldr	s12, [r2]
 80011f8:	ed9f 4a31 	vldr	s8, [pc, #196]	; 80012c0 <Tension_PID+0xf8>
		MV = error[1] * Tension_P_gain + int_error * Tension_I_gain + d_error * Tension_D_gain + refTension;	// PID control
 80011fc:	4931      	ldr	r1, [pc, #196]	; (80012c4 <Tension_PID+0xfc>)
		if (Positive_Current_Limit < refCurrent) {
 80011fe:	eddf 5a32 	vldr	s11, [pc, #200]	; 80012c8 <Tension_PID+0x100>
		MV = error[1] * Tension_P_gain + int_error * Tension_I_gain + d_error * Tension_D_gain + refTension;	// PID control
 8001202:	ed91 5a00 	vldr	s10, [r1]
 8001206:	4831      	ldr	r0, [pc, #196]	; (80012cc <Tension_PID+0x104>)
		d_error = error[1] - error[0];
 8001208:	4931      	ldr	r1, [pc, #196]	; (80012d0 <Tension_PID+0x108>)
		error[1] = refTension - curTension;
 800120a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800120e:	eee7 7a23 	vfma.f32	s15, s14, s7
		d_error = error[1] - error[0];
 8001212:	ee77 6a66 	vsub.f32	s13, s14, s13
		int_error += error[1] * Delta_t;
 8001216:	eea7 6a04 	vfma.f32	s12, s14, s8
 800121a:	eee6 7aa4 	vfma.f32	s15, s13, s9
		error[1] = refTension - curTension;
 800121e:	ed83 7a01 	vstr	s14, [r3, #4]
		MV = error[1] * Tension_P_gain + int_error * Tension_I_gain + d_error * Tension_D_gain + refTension;	// PID control
 8001222:	eee6 7a05 	vfma.f32	s15, s12, s10
		error[0] = error[1];
 8001226:	ed83 7a00 	vstr	s14, [r3]
		if (Positive_Current_Limit < refCurrent) {
 800122a:	eef4 7ae5 	vcmpe.f32	s15, s11
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int_error += error[1] * Delta_t;
 8001232:	ed82 6a00 	vstr	s12, [r2]
		MV = error[1] * Tension_P_gain + int_error * Tension_I_gain + d_error * Tension_D_gain + refTension;	// PID control
 8001236:	edc0 7a00 	vstr	s15, [r0]
		d_error = error[1] - error[0];
 800123a:	edc1 6a00 	vstr	s13, [r1]
		if (Positive_Current_Limit < refCurrent) {
 800123e:	dc21      	bgt.n	8001284 <Tension_PID+0xbc>
		refCurrent =  MV * (drum_diameter/2) / gearRatio / Torque_Constant;
 8001240:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80012d4 <Tension_PID+0x10c>
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
		} else if (refCurrent < Negative_Current_Limit) {
 8001248:	2300      	movs	r3, #0
 800124a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001252:	d41e      	bmi.n	8001292 <Tension_PID+0xca>
		refCurrent =  MV * (drum_diameter/2) / gearRatio / Torque_Constant;
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <Tension_PID+0x110>)
 8001256:	ee17 0a90 	vmov	r0, s15
 800125a:	edc3 7a00 	vstr	s15, [r3]
 800125e:	f7ff fa69 	bl	8000734 <__aeabi_f2d>
 8001262:	a30f      	add	r3, pc, #60	; (adr r3, 80012a0 <Tension_PID+0xd8>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7fe ffd6 	bl	8000218 <__aeabi_dmul>
 800126c:	f7ff faba 	bl	80007e4 <__aeabi_d2iz>
 8001270:	b200      	sxth	r0, r0
		refCurrent_Iqd.q = (int16_t)(refCurrent/S16A_TO_FLOAT);
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <Tension_PID+0x114>)
		refCurrent_Iqd.d = 0;
 8001274:	2200      	movs	r2, #0
		refCurrent_Iqd.q = (int16_t)(refCurrent/S16A_TO_FLOAT);
 8001276:	8018      	strh	r0, [r3, #0]
		refCurrent_Iqd.d = 0;
 8001278:	805a      	strh	r2, [r3, #2]
		MC_SetCurrentReferenceMotor1(refCurrent_Iqd);
 800127a:	6818      	ldr	r0, [r3, #0]
}
 800127c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		MC_SetCurrentReferenceMotor1(refCurrent_Iqd);
 8001280:	f000 bdde 	b.w	8001e40 <MC_SetCurrentReferenceMotor1>
			refCurrent = Positive_Current_Limit;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <Tension_PID+0x110>)
 8001286:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	f640 0082 	movw	r0, #2178	; 0x882
 8001290:	e7ef      	b.n	8001272 <Tension_PID+0xaa>
			refCurrent = Negative_Current_Limit;
 8001292:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <Tension_PID+0x110>)
 8001294:	2000      	movs	r0, #0
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e7eb      	b.n	8001272 <Tension_PID+0xaa>
 800129a:	bf00      	nop
 800129c:	f3af 8000 	nop.w
 80012a0:	51419ef6 	.word	0x51419ef6
 80012a4:	4081045c 	.word	0x4081045c
 80012a8:	200007c8 	.word	0x200007c8
 80012ac:	200007c4 	.word	0x200007c4
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000634 	.word	0x20000634
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000aa4 	.word	0x20000aa4
 80012c0:	3dcccccd 	.word	0x3dcccccd
 80012c4:	20000004 	.word	0x20000004
 80012c8:	41bdcac1 	.word	0x41bdcac1
 80012cc:	20000b84 	.word	0x20000b84
 80012d0:	20000754 	.word	0x20000754
 80012d4:	3e2ca6f4 	.word	0x3e2ca6f4
 80012d8:	20000654 	.word	0x20000654
 80012dc:	20000aa0 	.word	0x20000aa0

080012e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim == &htim2) {	// 10Hz
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012e2:	4283      	cmp	r3, r0
 80012e4:	d000      	beq.n	80012e8 <HAL_TIM_PeriodElapsedCallback+0x8>
//		heartbeat = false;
	}

	if (htim == &htim3) {	// 100Hz
	}
}
 80012e6:	4770      	bx	lr
		flag = true;
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
}
 80012ee:	4770      	bx	lr
 80012f0:	20000aa8 	.word	0x20000aa8
 80012f4:	2000063d 	.word	0x2000063d

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b500      	push	{lr}
 80012fa:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t empty[] = {0,0,0,0,0,0,0,0};
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <Error_Handler+0x20>)
 8001300:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001304:	466b      	mov	r3, sp
 8001306:	e883 0003 	stmia.w	r3, {r0, r1}
  Send_CAN(ESTOP_ID,empty);
 800130a:	4619      	mov	r1, r3
 800130c:	f240 7077 	movw	r0, #1911	; 0x777
 8001310:	f000 fcb4 	bl	8001c7c <Send_CAN>
  while (1)
 8001314:	e7fe      	b.n	8001314 <Error_Handler+0x1c>
 8001316:	bf00      	nop
 8001318:	0800a53c 	.word	0x0800a53c

0800131c <SystemClock_Config>:
{
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	2100      	movs	r1, #0
{
 8001320:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001322:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001324:	2238      	movs	r2, #56	; 0x38
 8001326:	a806      	add	r0, sp, #24
 8001328:	f009 f8f4 	bl	800a514 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800132c:	4621      	mov	r1, r4
 800132e:	2244      	movs	r2, #68	; 0x44
 8001330:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001332:	e9cd 4400 	strd	r4, r4, [sp]
 8001336:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800133a:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	f009 f8ea 	bl	800a514 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001340:	4620      	mov	r0, r4
 8001342:	f005 f9cb 	bl	80066dc <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001346:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001348:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800134a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134e:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001350:	2155      	movs	r1, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001352:	2208      	movs	r2, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001356:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800135a:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800135e:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001364:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f005 fa3e 	bl	80067e8 <HAL_RCC_OscConfig>
 800136c:	b9f8      	cbnz	r0, 80013ae <SystemClock_Config+0x92>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136e:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001370:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001372:	2200      	movs	r2, #0
 8001374:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001376:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001378:	240f      	movs	r4, #15
 800137a:	2503      	movs	r5, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800137c:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001382:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001386:	f005 fcb3 	bl	8006cf0 <HAL_RCC_ClockConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	b978      	cbnz	r0, 80013ae <SystemClock_Config+0x92>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800138e:	f249 0402 	movw	r4, #36866	; 0x9002
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001392:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139a:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800139c:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800139e:	9415      	str	r4, [sp, #84]	; 0x54
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80013a0:	9121      	str	r1, [sp, #132]	; 0x84
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80013a2:	9224      	str	r2, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a4:	f005 fde0 	bl	8006f68 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	b908      	cbnz	r0, 80013ae <SystemClock_Config+0x92>
}
 80013aa:	b027      	add	sp, #156	; 0x9c
 80013ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80013ae:	f7ff ffa3 	bl	80012f8 <Error_Handler>
 80013b2:	bf00      	nop
 80013b4:	0000      	movs	r0, r0
	...

080013b8 <main>:
{
 80013b8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	2600      	movs	r6, #0
{
 80013be:	b0ff      	sub	sp, #508	; 0x1fc
	HAL_Init();
 80013c0:	f003 faf4 	bl	80049ac <HAL_Init>
  SystemClock_Config();
 80013c4:	f7ff ffaa 	bl	800131c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	e9cd 666e 	strd	r6, r6, [sp, #440]	; 0x1b8
 80013cc:	e9cd 6670 	strd	r6, r6, [sp, #448]	; 0x1c0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4cc5      	ldr	r4, [pc, #788]	; (80016e8 <main+0x330>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	9672      	str	r6, [sp, #456]	; 0x1c8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|STATUS_Pin, GPIO_PIN_RESET);
 80013d6:	48c5      	ldr	r0, [pc, #788]	; (80016ec <main+0x334>)
  hadc1.Instance = ADC1;
 80013d8:	4fc5      	ldr	r7, [pc, #788]	; (80016f0 <main+0x338>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	f042 0204 	orr.w	r2, r2, #4
 80013de:	64e2      	str	r2, [r4, #76]	; 0x4c
 80013e0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80013e2:	f002 0204 	and.w	r2, r2, #4
 80013e6:	9204      	str	r2, [sp, #16]
 80013e8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80013ec:	f042 0220 	orr.w	r2, r2, #32
 80013f0:	64e2      	str	r2, [r4, #76]	; 0x4c
 80013f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80013f4:	f002 0220 	and.w	r2, r2, #32
 80013f8:	9205      	str	r2, [sp, #20]
 80013fa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	64e2      	str	r2, [r4, #76]	; 0x4c
 8001404:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001406:	f002 0201 	and.w	r2, r2, #1
 800140a:	9206      	str	r2, [sp, #24]
 800140c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001410:	f042 0202 	orr.w	r2, r2, #2
 8001414:	64e2      	str	r2, [r4, #76]	; 0x4c
 8001416:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001418:	f002 0202 	and.w	r2, r2, #2
 800141c:	9207      	str	r2, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|STATUS_Pin, GPIO_PIN_RESET);
 800141e:	f244 0140 	movw	r1, #16448	; 0x4040
 8001422:	4632      	mov	r2, r6
  GPIO_InitStruct.Pin = CAN_TERM_Pin;
 8001424:	f04f 0800 	mov.w	r8, #0
 8001428:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	9d07      	ldr	r5, [sp, #28]
  GPIO_InitStruct.Pin = CAN_TERM_Pin;
 800142e:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|STATUS_Pin, GPIO_PIN_RESET);
 8001432:	f005 f8c7 	bl	80065c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CAN_TERM_Pin;
 8001436:	f04f 0b01 	mov.w	fp, #1
 800143a:	e9cd 8970 	strd	r8, r9, [sp, #448]	; 0x1c0
  HAL_GPIO_Init(CAN_TERM_GPIO_Port, &GPIO_InitStruct);
 800143e:	48ab      	ldr	r0, [pc, #684]	; (80016ec <main+0x334>)
 8001440:	a96e      	add	r1, sp, #440	; 0x1b8
  GPIO_InitStruct.Pin = STATUS_Pin;
 8001442:	f04f 0801 	mov.w	r8, #1
 8001446:	f04f 0900 	mov.w	r9, #0
  GPIO_InitStruct.Pin = CAN_TERM_Pin;
 800144a:	e9cd ab6e 	strd	sl, fp, [sp, #440]	; 0x1b8
  HAL_GPIO_Init(CAN_TERM_GPIO_Port, &GPIO_InitStruct);
 800144e:	f004 ffc5 	bl	80063dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STATUS_Pin;
 8001452:	f04f 0b01 	mov.w	fp, #1
 8001456:	e9cd 8970 	strd	r8, r9, [sp, #448]	; 0x1c0
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 800145a:	48a4      	ldr	r0, [pc, #656]	; (80016ec <main+0x334>)
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800145c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8001728 <main+0x370>
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8001460:	a96e      	add	r1, sp, #440	; 0x1b8
  GPIO_InitStruct.Pin = STATUS_Pin;
 8001462:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8001466:	e9cd ab6e 	strd	sl, fp, [sp, #440]	; 0x1b8
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800146a:	f44f 6880 	mov.w	r8, #1024	; 0x400
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 800146e:	f004 ffb5 	bl	80063dc <HAL_GPIO_Init>
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001472:	489e      	ldr	r0, [pc, #632]	; (80016ec <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	9670      	str	r6, [sp, #448]	; 0x1c0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001476:	a96e      	add	r1, sp, #440	; 0x1b8
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001478:	e9cd 896e 	strd	r8, r9, [sp, #440]	; 0x1b8
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800147c:	f004 ffae 	bl	80063dc <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001480:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001482:	f042 0204 	orr.w	r2, r2, #4
 8001486:	64a2      	str	r2, [r4, #72]	; 0x48
 8001488:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800148a:	f002 0204 	and.w	r2, r2, #4
 800148e:	9202      	str	r2, [sp, #8]
 8001490:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001492:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001494:	f042 0202 	orr.w	r2, r2, #2
 8001498:	64a2      	str	r2, [r4, #72]	; 0x48
 800149a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  ADC_MultiModeTypeDef multimode = {0};
 800149c:	961b      	str	r6, [sp, #108]	; 0x6c
  __HAL_RCC_DMA2_CLK_ENABLE();
 800149e:	f002 0202 	and.w	r2, r2, #2
 80014a2:	9203      	str	r2, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80014a4:	4631      	mov	r1, r6
 80014a6:	223c      	movs	r2, #60	; 0x3c
 80014a8:	a86e      	add	r0, sp, #440	; 0x1b8
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014aa:	9c03      	ldr	r4, [sp, #12]
  ADC_MultiModeTypeDef multimode = {0};
 80014ac:	e9cd 6619 	strd	r6, r6, [sp, #100]	; 0x64
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80014b0:	f009 f830 	bl	800a514 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80014b4:	2220      	movs	r2, #32
 80014b6:	4631      	mov	r1, r6
 80014b8:	a832      	add	r0, sp, #200	; 0xc8
 80014ba:	f009 f82b 	bl	800a514 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80014be:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
  hadc1.Instance = ADC1;
 80014c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014c6:	2501      	movs	r5, #1
  hadc1.Init.NbrOfConversion = 2;
 80014c8:	2402      	movs	r4, #2
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ca:	2304      	movs	r3, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014cc:	4638      	mov	r0, r7
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ce:	83be      	strh	r6, [r7, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d0:	e9c7 6601 	strd	r6, r6, [r7, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d4:	e9c7 660b 	strd	r6, r6, [r7, #44]	; 0x2c
  hadc1.Init.GainCompensation = 0;
 80014d8:	613e      	str	r6, [r7, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014da:	f887 6024 	strb.w	r6, [r7, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014de:	f887 6038 	strb.w	r6, [r7, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014e2:	63fe      	str	r6, [r7, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80014e4:	f887 6040 	strb.w	r6, [r7, #64]	; 0x40
  hadc1.Instance = ADC1;
 80014e8:	603a      	str	r2, [r7, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80014ea:	f8c7 b00c 	str.w	fp, [r7, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014ee:	617d      	str	r5, [r7, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f0:	61bb      	str	r3, [r7, #24]
  hadc1.Init.NbrOfConversion = 2;
 80014f2:	623c      	str	r4, [r7, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f4:	f003 fa8e 	bl	8004a14 <HAL_ADC_Init>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	f040 83ab 	bne.w	8001c54 <main+0x89c>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014fe:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001500:	a919      	add	r1, sp, #100	; 0x64
 8001502:	4638      	mov	r0, r7
 8001504:	f004 f8fa 	bl	80056fc <HAL_ADCEx_MultiModeConfigChannel>
 8001508:	4602      	mov	r2, r0
 800150a:	2800      	cmp	r0, #0
 800150c:	f040 83a2 	bne.w	8001c54 <main+0x89c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001510:	237f      	movs	r3, #127	; 0x7f
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001512:	f8ad 21dc 	strh.w	r2, [sp, #476]	; 0x1dc
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001516:	f88d 21de 	strb.w	r2, [sp, #478]	; 0x1de
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800151a:	f88d 21e8 	strb.w	r2, [sp, #488]	; 0x1e8
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800151e:	2201      	movs	r2, #1
 8001520:	e9cd 2370 	strd	r2, r3, [sp, #448]	; 0x1c0
 8001524:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800172c <main+0x374>
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001528:	9476      	str	r4, [sp, #472]	; 0x1d8
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800152a:	2204      	movs	r2, #4
 800152c:	2300      	movs	r3, #0
 800152e:	e9cd 2372 	strd	r2, r3, [sp, #456]	; 0x1c8
 8001532:	f04f 0909 	mov.w	r9, #9
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001536:	2284      	movs	r2, #132	; 0x84
 8001538:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800153a:	a96e      	add	r1, sp, #440	; 0x1b8
 800153c:	4638      	mov	r0, r7
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800153e:	e9cd 896e 	strd	r8, r9, [sp, #440]	; 0x1b8
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001542:	e9cd 2378 	strd	r2, r3, [sp, #480]	; 0x1e0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001546:	f003 fdd5 	bl	80050f4 <HAL_ADCEx_InjectedConfigChannel>
 800154a:	2800      	cmp	r0, #0
 800154c:	f040 8382 	bne.w	8001c54 <main+0x89c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001550:	a361      	add	r3, pc, #388	; (adr r3, 80016d8 <main+0x320>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001556:	a96e      	add	r1, sp, #440	; 0x1b8
 8001558:	4638      	mov	r0, r7
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800155a:	e9cd 236e 	strd	r2, r3, [sp, #440]	; 0x1b8
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800155e:	f003 fdc9 	bl	80050f4 <HAL_ADCEx_InjectedConfigChannel>
 8001562:	2800      	cmp	r0, #0
 8001564:	f040 8376 	bne.w	8001c54 <main+0x89c>
  sConfig.Channel = ADC_CHANNEL_1;
 8001568:	2204      	movs	r2, #4
 800156a:	2300      	movs	r3, #0
 800156c:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
 8001570:	4a60      	ldr	r2, [pc, #384]	; (80016f4 <main+0x33c>)
 8001572:	2306      	movs	r3, #6
 8001574:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001578:	a932      	add	r1, sp, #200	; 0xc8
  sConfig.Channel = ADC_CHANNEL_1;
 800157a:	2204      	movs	r2, #4
 800157c:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157e:	4638      	mov	r0, r7
  sConfig.Channel = ADC_CHANNEL_1;
 8001580:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001584:	f003 fb4c 	bl	8004c20 <HAL_ADC_ConfigChannel>
 8001588:	2800      	cmp	r0, #0
 800158a:	f040 8363 	bne.w	8001c54 <main+0x89c>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158e:	4638      	mov	r0, r7
  sConfig.Channel = ADC_CHANNEL_5;
 8001590:	a753      	add	r7, pc, #332	; (adr r7, 80016e0 <main+0x328>)
 8001592:	e9d7 6700 	ldrd	r6, r7, [r7]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001596:	a932      	add	r1, sp, #200	; 0xc8
  sConfig.Channel = ADC_CHANNEL_5;
 8001598:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159c:	f003 fb40 	bl	8004c20 <HAL_ADC_ConfigChannel>
 80015a0:	4601      	mov	r1, r0
 80015a2:	2800      	cmp	r0, #0
 80015a4:	f040 8356 	bne.w	8001c54 <main+0x89c>
  hadc2.Instance = ADC2;
 80015a8:	f8df a184 	ldr.w	sl, [pc, #388]	; 8001730 <main+0x378>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80015ac:	9101      	str	r1, [sp, #4]
 80015ae:	223c      	movs	r2, #60	; 0x3c
 80015b0:	a85e      	add	r0, sp, #376	; 0x178
 80015b2:	f008 ffaf 	bl	800a514 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015b6:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80015b8:	4a4f      	ldr	r2, [pc, #316]	; (80016f8 <main+0x340>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015ba:	f8aa 101c 	strh.w	r1, [sl, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015be:	2304      	movs	r3, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015c0:	4650      	mov	r0, sl
  hadc2.Instance = ADC2;
 80015c2:	f8ca 2000 	str.w	r2, [sl]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80015c6:	e9ca 1b02 	strd	r1, fp, [sl, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015ca:	e9ca 1504 	strd	r1, r5, [sl, #16]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015ce:	f8ca 1004 	str.w	r1, [sl, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d2:	f8ca 3018 	str.w	r3, [sl, #24]
  hadc2.Init.NbrOfConversion = 1;
 80015d6:	f8ca 5020 	str.w	r5, [sl, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015da:	f88a 1024 	strb.w	r1, [sl, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80015de:	f88a 1038 	strb.w	r1, [sl, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015e2:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80015e6:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015ea:	f003 fa13 	bl	8004a14 <HAL_ADC_Init>
 80015ee:	4602      	mov	r2, r0
 80015f0:	2800      	cmp	r0, #0
 80015f2:	f040 832f 	bne.w	8001c54 <main+0x89c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80015f6:	2601      	movs	r6, #1
 80015f8:	277f      	movs	r7, #127	; 0x7f
 80015fa:	e9cd 6760 	strd	r6, r7, [sp, #384]	; 0x180
 80015fe:	2504      	movs	r5, #4
 8001600:	2600      	movs	r6, #0
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001602:	9466      	str	r4, [sp, #408]	; 0x198
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001604:	2384      	movs	r3, #132	; 0x84
 8001606:	2480      	movs	r4, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001608:	a95e      	add	r1, sp, #376	; 0x178
 800160a:	4650      	mov	r0, sl
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800160c:	e9cd 895e 	strd	r8, r9, [sp, #376]	; 0x178
 8001610:	e9cd 5662 	strd	r5, r6, [sp, #392]	; 0x188
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001614:	e9cd 3468 	strd	r3, r4, [sp, #416]	; 0x1a0
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001618:	f8ad 219c 	strh.w	r2, [sp, #412]	; 0x19c
  sConfigInjected.QueueInjectedContext = DISABLE;
 800161c:	f88d 219e 	strb.w	r2, [sp, #414]	; 0x19e
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001620:	f88d 21a8 	strb.w	r2, [sp, #424]	; 0x1a8
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001624:	f003 fd66 	bl	80050f4 <HAL_ADCEx_InjectedConfigChannel>
 8001628:	2800      	cmp	r0, #0
 800162a:	f040 8313 	bne.w	8001c54 <main+0x89c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 800162e:	4a33      	ldr	r2, [pc, #204]	; (80016fc <main+0x344>)
 8001630:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001634:	a95e      	add	r1, sp, #376	; 0x178
 8001636:	4650      	mov	r0, sl
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001638:	e9cd 235e 	strd	r2, r3, [sp, #376]	; 0x178
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800163c:	f003 fd5a 	bl	80050f4 <HAL_ADCEx_InjectedConfigChannel>
 8001640:	4602      	mov	r2, r0
 8001642:	2800      	cmp	r0, #0
 8001644:	f040 8306 	bne.w	8001c54 <main+0x89c>
  hcomp1.Instance = COMP1;
 8001648:	482d      	ldr	r0, [pc, #180]	; (8001700 <main+0x348>)
 800164a:	4c2e      	ldr	r4, [pc, #184]	; (8001704 <main+0x34c>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800164c:	6042      	str	r2, [r0, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800164e:	2140      	movs	r1, #64	; 0x40
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001650:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001654:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hcomp1.Instance = COMP1;
 8001658:	6004      	str	r4, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800165a:	6081      	str	r1, [r0, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800165c:	f004 f8b4 	bl	80057c8 <HAL_COMP_Init>
 8001660:	2800      	cmp	r0, #0
 8001662:	f040 82f7 	bne.w	8001c54 <main+0x89c>
  hcomp2.Instance = COMP2;
 8001666:	4828      	ldr	r0, [pc, #160]	; (8001708 <main+0x350>)
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <main+0x354>)
 800166a:	6003      	str	r3, [r0, #0]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800166c:	2440      	movs	r4, #64	; 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800166e:	2300      	movs	r3, #0
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001670:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001674:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001678:	6043      	str	r3, [r0, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800167a:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800167c:	f004 f8a4 	bl	80057c8 <HAL_COMP_Init>
 8001680:	4602      	mov	r2, r0
 8001682:	2800      	cmp	r0, #0
 8001684:	f040 82e6 	bne.w	8001c54 <main+0x89c>
  hcomp4.Instance = COMP4;
 8001688:	4821      	ldr	r0, [pc, #132]	; (8001710 <main+0x358>)
 800168a:	4922      	ldr	r1, [pc, #136]	; (8001714 <main+0x35c>)
 800168c:	6001      	str	r1, [r0, #0]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800168e:	e9c0 2401 	strd	r2, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001692:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001696:	e9c0 2205 	strd	r2, r2, [r0, #20]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800169a:	f004 f895 	bl	80057c8 <HAL_COMP_Init>
 800169e:	2800      	cmp	r0, #0
 80016a0:	f040 82d8 	bne.w	8001c54 <main+0x89c>
  hcordic.Instance = CORDIC;
 80016a4:	481c      	ldr	r0, [pc, #112]	; (8001718 <main+0x360>)
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <main+0x364>)
 80016a8:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80016aa:	f004 f931 	bl	8005910 <HAL_CORDIC_Init>
 80016ae:	4601      	mov	r1, r0
 80016b0:	2800      	cmp	r0, #0
 80016b2:	f040 82cf 	bne.w	8001c54 <main+0x89c>
  hdac3.Instance = DAC3;
 80016b6:	4d1a      	ldr	r5, [pc, #104]	; (8001720 <main+0x368>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80016b8:	a844      	add	r0, sp, #272	; 0x110
 80016ba:	2230      	movs	r2, #48	; 0x30
 80016bc:	f008 ff2a 	bl	800a514 <memset>
  hdac3.Instance = DAC3;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <main+0x36c>)
 80016c2:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80016c4:	4628      	mov	r0, r5
 80016c6:	f004 f9b7 	bl	8005a38 <HAL_DAC_Init>
 80016ca:	2800      	cmp	r0, #0
 80016cc:	f040 82c2 	bne.w	8001c54 <main+0x89c>
 80016d0:	e030      	b.n	8001734 <main+0x37c>
 80016d2:	bf00      	nop
 80016d4:	f3af 8000 	nop.w
 80016d8:	32601000 	.word	0x32601000
 80016dc:	0000010f 	.word	0x0000010f
 80016e0:	14f00020 	.word	0x14f00020
 80016e4:	0000000c 	.word	0x0000000c
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000800 	.word	0x48000800
 80016f0:	200008d8 	.word	0x200008d8
 80016f4:	04300002 	.word	0x04300002
 80016f8:	50000100 	.word	0x50000100
 80016fc:	cb8c0000 	.word	0xcb8c0000
 8001700:	20000808 	.word	0x20000808
 8001704:	40010200 	.word	0x40010200
 8001708:	20000a7c 	.word	0x20000a7c
 800170c:	40010204 	.word	0x40010204
 8001710:	200008b4 	.word	0x200008b4
 8001714:	4001020c 	.word	0x4001020c
 8001718:	200009a4 	.word	0x200009a4
 800171c:	40020c00 	.word	0x40020c00
 8001720:	200006f4 	.word	0x200006f4
 8001724:	50001000 	.word	0x50001000
 8001728:	10210000 	.word	0x10210000
 800172c:	0c900008 	.word	0x0c900008
 8001730:	20000758 	.word	0x20000758
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001734:	2600      	movs	r6, #0
 8001736:	2700      	movs	r7, #0
 8001738:	e9cd 6746 	strd	r6, r7, [sp, #280]	; 0x118
 800173c:	2600      	movs	r6, #0
 800173e:	2702      	movs	r7, #2
 8001740:	e9cd 6748 	strd	r6, r7, [sp, #288]	; 0x120
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001744:	4602      	mov	r2, r0
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001746:	2302      	movs	r3, #2
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001748:	f8ad 0114 	strh.w	r0, [sp, #276]	; 0x114
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800174c:	2602      	movs	r6, #2
 800174e:	2700      	movs	r7, #0
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001750:	a944      	add	r1, sp, #272	; 0x110
 8001752:	4628      	mov	r0, r5
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001754:	e9cd 674a 	strd	r6, r7, [sp, #296]	; 0x128
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001758:	9344      	str	r3, [sp, #272]	; 0x110
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800175a:	f004 f983 	bl	8005a64 <HAL_DAC_ConfigChannel>
 800175e:	2800      	cmp	r0, #0
 8001760:	f040 8278 	bne.w	8001c54 <main+0x89c>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001764:	2210      	movs	r2, #16
 8001766:	a944      	add	r1, sp, #272	; 0x110
 8001768:	4628      	mov	r0, r5
 800176a:	f004 f97b 	bl	8005a64 <HAL_DAC_ConfigChannel>
 800176e:	4602      	mov	r2, r0
 8001770:	2800      	cmp	r0, #0
 8001772:	f040 826f 	bne.w	8001c54 <main+0x89c>
  hopamp1.Instance = OPAMP1;
 8001776:	48c3      	ldr	r0, [pc, #780]	; (8001a84 <main+0x6cc>)
 8001778:	49c3      	ldr	r1, [pc, #780]	; (8001a88 <main+0x6d0>)
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800177a:	6042      	str	r2, [r0, #4]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800177c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001780:	f44f 4540 	mov.w	r5, #49152	; 0xc000
 8001784:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001788:	6084      	str	r4, [r0, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800178a:	6102      	str	r2, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 800178c:	7502      	strb	r2, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800178e:	6182      	str	r2, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001790:	62c2      	str	r2, [r0, #44]	; 0x2c
  hopamp1.Instance = OPAMP1;
 8001792:	6001      	str	r1, [r0, #0]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001794:	f004 ff1c 	bl	80065d0 <HAL_OPAMP_Init>
 8001798:	2800      	cmp	r0, #0
 800179a:	f040 825b 	bne.w	8001c54 <main+0x89c>
  hopamp2.Instance = OPAMP2;
 800179e:	4bbb      	ldr	r3, [pc, #748]	; (8001a8c <main+0x6d4>)
 80017a0:	4abb      	ldr	r2, [pc, #748]	; (8001a90 <main+0x6d8>)
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80017a2:	6118      	str	r0, [r3, #16]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80017a4:	e9c3 0401 	strd	r0, r4, [r3, #4]
  hopamp2.Init.InternalOutput = DISABLE;
 80017a8:	7518      	strb	r0, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80017aa:	6198      	str	r0, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017ac:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80017ae:	4618      	mov	r0, r3
  hopamp2.Instance = OPAMP2;
 80017b0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80017b2:	e9c3 6509 	strd	r6, r5, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80017b6:	f004 ff0b 	bl	80065d0 <HAL_OPAMP_Init>
 80017ba:	4602      	mov	r2, r0
 80017bc:	2800      	cmp	r0, #0
 80017be:	f040 8249 	bne.w	8001c54 <main+0x89c>
  hopamp3.Instance = OPAMP3;
 80017c2:	48b4      	ldr	r0, [pc, #720]	; (8001a94 <main+0x6dc>)
 80017c4:	49b4      	ldr	r1, [pc, #720]	; (8001a98 <main+0x6e0>)
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80017c6:	6246      	str	r6, [r0, #36]	; 0x24
  hopamp3.Init.InternalOutput = ENABLE;
 80017c8:	2601      	movs	r6, #1
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80017ca:	e9c0 2401 	strd	r2, r4, [r0, #4]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017ce:	e9c0 520a 	strd	r5, r2, [r0, #40]	; 0x28
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80017d2:	6102      	str	r2, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80017d4:	6182      	str	r2, [r0, #24]
  hopamp3.Instance = OPAMP3;
 80017d6:	6001      	str	r1, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 80017d8:	7506      	strb	r6, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80017da:	f004 fef9 	bl	80065d0 <HAL_OPAMP_Init>
 80017de:	4604      	mov	r4, r0
 80017e0:	2800      	cmp	r0, #0
 80017e2:	f040 8237 	bne.w	8001c54 <main+0x89c>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e6:	2234      	movs	r2, #52	; 0x34
 80017e8:	4621      	mov	r1, r4
 80017ea:	a850      	add	r0, sp, #320	; 0x140
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017ec:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
 80017f0:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80017f8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 8001800:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
 8001804:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001808:	9428      	str	r4, [sp, #160]	; 0xa0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180a:	940a      	str	r4, [sp, #40]	; 0x28
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800180c:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180e:	9430      	str	r4, [sp, #192]	; 0xc0
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001810:	f008 fe80 	bl	800a514 <memset>
  htim1.Instance = TIM1;
 8001814:	48a1      	ldr	r0, [pc, #644]	; (8001a9c <main+0x6e4>)
 8001816:	4da2      	ldr	r5, [pc, #648]	; (8001aa0 <main+0x6e8>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001818:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800181a:	2120      	movs	r1, #32
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800181c:	f640 3211 	movw	r2, #2833	; 0xb11
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001820:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001824:	e9c0 1202 	strd	r1, r2, [r0, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001828:	6146      	str	r6, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	6184      	str	r4, [r0, #24]
  htim1.Instance = TIM1;
 800182c:	6005      	str	r5, [r0, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800182e:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001830:	f005 fda4 	bl	800737c <HAL_TIM_Base_Init>
 8001834:	2800      	cmp	r0, #0
 8001836:	f040 820d 	bne.w	8001c54 <main+0x89c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800183a:	4898      	ldr	r0, [pc, #608]	; (8001a9c <main+0x6e4>)
 800183c:	f005 fe76 	bl	800752c <HAL_TIM_PWM_Init>
 8001840:	2800      	cmp	r0, #0
 8001842:	f040 8207 	bne.w	8001c54 <main+0x89c>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001846:	2310      	movs	r3, #16
 8001848:	2206      	movs	r2, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800184a:	4894      	ldr	r0, [pc, #592]	; (8001a9c <main+0x6e4>)
 800184c:	a924      	add	r1, sp, #144	; 0x90
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800184e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001852:	f006 f867 	bl	8007924 <HAL_TIM_SlaveConfigSynchro>
 8001856:	4603      	mov	r3, r0
 8001858:	2800      	cmp	r0, #0
 800185a:	f040 81fb 	bne.w	8001c54 <main+0x89c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001860:	2270      	movs	r2, #112	; 0x70
 8001862:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001864:	488d      	ldr	r0, [pc, #564]	; (8001a9c <main+0x6e4>)
 8001866:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001868:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186c:	f006 fb18 	bl	8007ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	2800      	cmp	r0, #0
 8001872:	f040 81ef 	bne.w	8001c54 <main+0x89c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001876:	2402      	movs	r4, #2
 8001878:	2501      	movs	r5, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800187a:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800187c:	aa0c      	add	r2, sp, #48	; 0x30
 800187e:	4887      	ldr	r0, [pc, #540]	; (8001a9c <main+0x6e4>)
 8001880:	2102      	movs	r1, #2
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001882:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001886:	f006 fba1 	bl	8007fcc <HAL_TIMEx_ConfigBreakInput>
 800188a:	2800      	cmp	r0, #0
 800188c:	f040 81e2 	bne.w	8001c54 <main+0x89c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001890:	2404      	movs	r4, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001892:	4882      	ldr	r0, [pc, #520]	; (8001a9c <main+0x6e4>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001894:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001896:	aa0c      	add	r2, sp, #48	; 0x30
 8001898:	2102      	movs	r1, #2
 800189a:	f006 fb97 	bl	8007fcc <HAL_TIMEx_ConfigBreakInput>
 800189e:	2800      	cmp	r0, #0
 80018a0:	f040 81d8 	bne.w	8001c54 <main+0x89c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80018a4:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80018a6:	487d      	ldr	r0, [pc, #500]	; (8001a9c <main+0x6e4>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80018a8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80018aa:	aa0c      	add	r2, sp, #48	; 0x30
 80018ac:	2102      	movs	r1, #2
 80018ae:	f006 fb8d 	bl	8007fcc <HAL_TIMEx_ConfigBreakInput>
 80018b2:	2800      	cmp	r0, #0
 80018b4:	f040 81ce 	bne.w	8001c54 <main+0x89c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b8:	2660      	movs	r6, #96	; 0x60
 80018ba:	2700      	movs	r7, #0
 80018bc:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c0:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c2:	2600      	movs	r6, #0
 80018c4:	2700      	movs	r7, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c6:	9030      	str	r0, [sp, #192]	; 0xc0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c8:	a92a      	add	r1, sp, #168	; 0xa8
 80018ca:	4874      	ldr	r0, [pc, #464]	; (8001a9c <main+0x6e4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018cc:	e9cd 672c 	strd	r6, r7, [sp, #176]	; 0xb0
 80018d0:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d4:	f006 f9ea 	bl	8007cac <HAL_TIM_PWM_ConfigChannel>
 80018d8:	2800      	cmp	r0, #0
 80018da:	f040 81bb 	bne.w	8001c54 <main+0x89c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018de:	486f      	ldr	r0, [pc, #444]	; (8001a9c <main+0x6e4>)
 80018e0:	4622      	mov	r2, r4
 80018e2:	a92a      	add	r1, sp, #168	; 0xa8
 80018e4:	f006 f9e2 	bl	8007cac <HAL_TIM_PWM_ConfigChannel>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	f040 81b3 	bne.w	8001c54 <main+0x89c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018ee:	486b      	ldr	r0, [pc, #428]	; (8001a9c <main+0x6e4>)
 80018f0:	2208      	movs	r2, #8
 80018f2:	a92a      	add	r1, sp, #168	; 0xa8
 80018f4:	f006 f9da 	bl	8007cac <HAL_TIM_PWM_ConfigChannel>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	f040 81ab 	bne.w	8001c54 <main+0x89c>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80018fe:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001900:	4866      	ldr	r0, [pc, #408]	; (8001a9c <main+0x6e4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001902:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001904:	a92a      	add	r1, sp, #168	; 0xa8
 8001906:	220c      	movs	r2, #12
 8001908:	f006 f9d0 	bl	8007cac <HAL_TIM_PWM_ConfigChannel>
 800190c:	2800      	cmp	r0, #0
 800190e:	f040 81a1 	bne.w	8001c54 <main+0x89c>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001912:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001914:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8001918:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800191c:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001920:	2544      	movs	r5, #68	; 0x44
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001922:	935c      	str	r3, [sp, #368]	; 0x170
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192a:	e9cd 6750 	strd	r6, r7, [sp, #320]	; 0x140
 800192e:	e9cd 4552 	strd	r4, r5, [sp, #328]	; 0x148
 8001932:	e9cd 2354 	strd	r2, r3, [sp, #336]	; 0x150
 8001936:	2400      	movs	r4, #0
 8001938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800193c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001940:	4856      	ldr	r0, [pc, #344]	; (8001a9c <main+0x6e4>)
 8001942:	a950      	add	r1, sp, #320	; 0x140
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001944:	2500      	movs	r5, #0
 8001946:	2603      	movs	r6, #3
 8001948:	2700      	movs	r7, #0
 800194a:	e9cd 4556 	strd	r4, r5, [sp, #344]	; 0x158
 800194e:	e9cd 2358 	strd	r2, r3, [sp, #352]	; 0x160
 8001952:	e9cd 675a 	strd	r6, r7, [sp, #360]	; 0x168
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001956:	f006 faeb 	bl	8007f30 <HAL_TIMEx_ConfigBreakDeadTime>
 800195a:	4604      	mov	r4, r0
 800195c:	2800      	cmp	r0, #0
 800195e:	f040 8179 	bne.w	8001c54 <main+0x89c>
  htim4.Instance = TIM4;
 8001962:	4d50      	ldr	r5, [pc, #320]	; (8001aa4 <main+0x6ec>)
  HAL_TIM_MspPostInit(&htim1);
 8001964:	484d      	ldr	r0, [pc, #308]	; (8001a9c <main+0x6e4>)
 8001966:	f002 fddb 	bl	8004520 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 800196a:	4a4f      	ldr	r2, [pc, #316]	; (8001aa8 <main+0x6f0>)
 800196c:	602a      	str	r2, [r5, #0]
  htim4.Init.Period = M1_PULSE_NBR;
 800196e:	f240 138f 	movw	r3, #399	; 0x18f
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001972:	2201      	movs	r2, #1
  htim4.Init.Period = M1_PULSE_NBR;
 8001974:	60eb      	str	r3, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001976:	2300      	movs	r3, #0
 8001978:	e9cd 233c 	strd	r2, r3, [sp, #240]	; 0xf0
 800197c:	e9cd 2340 	strd	r2, r3, [sp, #256]	; 0x100
 8001980:	e9cd 673a 	strd	r6, r7, [sp, #232]	; 0xe8
 8001984:	2300      	movs	r3, #0
 8001986:	220c      	movs	r2, #12
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001988:	4628      	mov	r0, r5
 800198a:	a93a      	add	r1, sp, #232	; 0xe8
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 800198c:	260c      	movs	r6, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800198e:	e9cd 233e 	strd	r2, r3, [sp, #248]	; 0xf8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001992:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  htim4.Init.Prescaler = 0;
 8001996:	606c      	str	r4, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	60ac      	str	r4, [r5, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199a:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199e:	9418      	str	r4, [sp, #96]	; 0x60
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 80019a0:	9642      	str	r6, [sp, #264]	; 0x108
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80019a2:	f005 fe47 	bl	8007634 <HAL_TIM_Encoder_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2800      	cmp	r0, #0
 80019aa:	f040 8153 	bne.w	8001c54 <main+0x89c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019ae:	4628      	mov	r0, r5
 80019b0:	a916      	add	r1, sp, #88	; 0x58
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b2:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019b6:	f006 fa73 	bl	8007ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2800      	cmp	r0, #0
 80019be:	f040 8149 	bne.w	8001c54 <main+0x89c>
  huart2.Instance = USART2;
 80019c2:	4c3a      	ldr	r4, [pc, #232]	; (8001aac <main+0x6f4>)
 80019c4:	493a      	ldr	r1, [pc, #232]	; (8001ab0 <main+0x6f8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	60a0      	str	r0, [r4, #8]
  huart2.Init.BaudRate = 1843200;
 80019c8:	f44f 12e1 	mov.w	r2, #1843200	; 0x1c2000
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019cc:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 1843200;
 80019ce:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019d2:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	e9c4 6305 	strd	r6, r3, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019da:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019de:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019e2:	f006 fc15 	bl	8008210 <HAL_UART_Init>
 80019e6:	4601      	mov	r1, r0
 80019e8:	2800      	cmp	r0, #0
 80019ea:	f040 8133 	bne.w	8001c54 <main+0x89c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ee:	4620      	mov	r0, r4
 80019f0:	f006 fde4 	bl	80085bc <HAL_UARTEx_SetTxFifoThreshold>
 80019f4:	4601      	mov	r1, r0
 80019f6:	2800      	cmp	r0, #0
 80019f8:	f040 812c 	bne.w	8001c54 <main+0x89c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019fc:	4620      	mov	r0, r4
 80019fe:	f006 fe1b 	bl	8008638 <HAL_UARTEx_SetRxFifoThreshold>
 8001a02:	2800      	cmp	r0, #0
 8001a04:	f040 8126 	bne.w	8001c54 <main+0x89c>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f006 fdb9 	bl	8008580 <HAL_UARTEx_DisableFifoMode>
 8001a0e:	4604      	mov	r4, r0
 8001a10:	2800      	cmp	r0, #0
 8001a12:	f040 811f 	bne.w	8001c54 <main+0x89c>
  MX_MotorControl_Init();
 8001a16:	f001 f855 	bl	8002ac4 <MX_MotorControl_Init>
  hfdcan1.Instance = FDCAN1;
 8001a1a:	4826      	ldr	r0, [pc, #152]	; (8001ab4 <main+0x6fc>)
 8001a1c:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <main+0x700>)
 8001a1e:	6002      	str	r2, [r0, #0]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001a20:	2102      	movs	r1, #2
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001a22:	2201      	movs	r2, #1
  hfdcan1.Init.NominalPrescaler = 20;
 8001a24:	2614      	movs	r6, #20
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001a26:	250e      	movs	r5, #14
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001a28:	8204      	strh	r4, [r0, #16]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001a2e:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001a32:	e9c0 5107 	strd	r5, r1, [r0, #28]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001a36:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001a3a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a3e:	6044      	str	r4, [r0, #4]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001a40:	7484      	strb	r4, [r0, #18]
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a42:	63c4      	str	r4, [r0, #60]	; 0x3c
  hfdcan1.Init.NominalPrescaler = 20;
 8001a44:	6146      	str	r6, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001a46:	6182      	str	r2, [r0, #24]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001a48:	f004 f986 	bl	8005d58 <HAL_FDCAN_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	f040 8100 	bne.w	8001c54 <main+0x89c>
  htim2.Instance = TIM2;
 8001a54:	4c19      	ldr	r4, [pc, #100]	; (8001abc <main+0x704>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	9315      	str	r3, [sp, #84]	; 0x54
  htim2.Instance = TIM2;
 8001a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 1700 - 1;
 8001a5c:	f240 61a3 	movw	r1, #1699	; 0x6a3
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a62:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	61a0      	str	r0, [r4, #24]
  htim2.Instance = TIM2;
 8001a66:	6022      	str	r2, [r4, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a68:	4620      	mov	r0, r4
  htim2.Init.Period = 9999;
 8001a6a:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	e9cd 3320 	strd	r3, r3, [sp, #128]	; 0x80
 8001a72:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a76:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  htim2.Init.Prescaler = 1700 - 1;
 8001a7a:	6061      	str	r1, [r4, #4]
  htim2.Init.Period = 9999;
 8001a7c:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a7e:	f005 fc7d 	bl	800737c <HAL_TIM_Base_Init>
 8001a82:	e01d      	b.n	8001ac0 <main+0x708>
 8001a84:	20000878 	.word	0x20000878
 8001a88:	40010300 	.word	0x40010300
 8001a8c:	200006b8 	.word	0x200006b8
 8001a90:	40010304 	.word	0x40010304
 8001a94:	200007cc 	.word	0x200007cc
 8001a98:	40010308 	.word	0x40010308
 8001a9c:	20000a30 	.word	0x20000a30
 8001aa0:	40012c00 	.word	0x40012c00
 8001aa4:	20000708 	.word	0x20000708
 8001aa8:	40000800 	.word	0x40000800
 8001aac:	20000af4 	.word	0x20000af4
 8001ab0:	40004400 	.word	0x40004400
 8001ab4:	200009cc 	.word	0x200009cc
 8001ab8:	40006400 	.word	0x40006400
 8001abc:	20000aa8 	.word	0x20000aa8
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	f040 80c7 	bne.w	8001c54 <main+0x89c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aca:	4620      	mov	r0, r4
 8001acc:	a920      	add	r1, sp, #128	; 0x80
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ace:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ad0:	f005 fe62 	bl	8007798 <HAL_TIM_ConfigClockSource>
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	f040 80bd 	bne.w	8001c54 <main+0x89c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001adc:	a913      	add	r1, sp, #76	; 0x4c
 8001ade:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae0:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae4:	f006 f9dc 	bl	8007ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2800      	cmp	r0, #0
 8001aec:	f040 80b2 	bne.w	8001c54 <main+0x89c>
  htim3.Instance = TIM3;
 8001af0:	4d59      	ldr	r5, [pc, #356]	; (8001c58 <main+0x8a0>)
 8001af2:	4a5a      	ldr	r2, [pc, #360]	; (8001c5c <main+0x8a4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	60a8      	str	r0, [r5, #8]
  htim3.Init.Prescaler = 1700 - 1;
 8001af6:	f240 61a3 	movw	r1, #1699	; 0x6a3
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	6128      	str	r0, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	61a8      	str	r0, [r5, #24]
  htim3.Instance = TIM3;
 8001afe:	602a      	str	r2, [r5, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b00:	4628      	mov	r0, r5
  htim3.Init.Period = 999;
 8001b02:	f240 32e7 	movw	r2, #999	; 0x3e7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b06:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8001b0a:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  htim3.Init.Prescaler = 1700 - 1;
 8001b12:	6069      	str	r1, [r5, #4]
  htim3.Init.Period = 999;
 8001b14:	60ea      	str	r2, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b16:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b18:	f005 fc30 	bl	800737c <HAL_TIM_Base_Init>
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	f040 8099 	bne.w	8001c54 <main+0x89c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b26:	a91c      	add	r1, sp, #112	; 0x70
 8001b28:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b2c:	f005 fe34 	bl	8007798 <HAL_TIM_ConfigClockSource>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2800      	cmp	r0, #0
 8001b34:	f040 808e 	bne.w	8001c54 <main+0x89c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b38:	a910      	add	r1, sp, #64	; 0x40
 8001b3a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3c:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b40:	f006 f9ae 	bl	8007ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4604      	mov	r4, r0
 8001b46:	2800      	cmp	r0, #0
 8001b48:	f040 8084 	bne.w	8001c54 <main+0x89c>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2104      	movs	r1, #4
 8001b50:	2018      	movs	r0, #24
 8001b52:	f003 ff0b 	bl	800596c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001b56:	2018      	movs	r0, #24
 8001b58:	f003 ff40 	bl	80059dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001b5c:	4622      	mov	r2, r4
 8001b5e:	4621      	mov	r1, r4
 8001b60:	2019      	movs	r0, #25
 8001b62:	f003 ff03 	bl	800596c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b66:	2019      	movs	r0, #25
 8001b68:	f003 ff38 	bl	80059dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001b6c:	4622      	mov	r2, r4
 8001b6e:	2102      	movs	r1, #2
 8001b70:	2012      	movs	r0, #18
 8001b72:	f003 fefb 	bl	800596c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b76:	2012      	movs	r0, #18
 8001b78:	f003 ff30 	bl	80059dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	2103      	movs	r1, #3
 8001b80:	201e      	movs	r0, #30
 8001b82:	f003 fef3 	bl	800596c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b86:	201e      	movs	r0, #30
 8001b88:	f003 ff28 	bl	80059dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2103      	movs	r1, #3
 8001b90:	2026      	movs	r0, #38	; 0x26
 8001b92:	f003 feeb 	bl	800596c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b96:	2026      	movs	r0, #38	; 0x26
 8001b98:	f003 ff20 	bl	80059dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	2103      	movs	r1, #3
 8001ba0:	2028      	movs	r0, #40	; 0x28
 8001ba2:	f003 fee3 	bl	800596c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ba6:	2028      	movs	r0, #40	; 0x28
 8001ba8:	f003 ff18 	bl	80059dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001bac:	4622      	mov	r2, r4
 8001bae:	4621      	mov	r1, r4
 8001bb0:	2039      	movs	r0, #57	; 0x39
 8001bb2:	f003 fedb 	bl	800596c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001bb6:	2039      	movs	r0, #57	; 0x39
 8001bb8:	f003 ff10 	bl	80059dc <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin, GPIO_PIN_SET);
 8001bbc:	4828      	ldr	r0, [pc, #160]	; (8001c60 <main+0x8a8>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc4:	f004 fcfe 	bl	80065c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8001bc8:	4622      	mov	r2, r4
 8001bca:	2140      	movs	r1, #64	; 0x40
 8001bcc:	4824      	ldr	r0, [pc, #144]	; (8001c60 <main+0x8a8>)
 8001bce:	f004 fcf9 	bl	80065c4 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f005 fc56 	bl	8007484 <HAL_TIM_Base_Start_IT>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001bd8:	4822      	ldr	r0, [pc, #136]	; (8001c64 <main+0x8ac>)
 8001bda:	f004 f9ad 	bl	8005f38 <HAL_FDCAN_Start>
 8001bde:	4602      	mov	r2, r0
 8001be0:	2800      	cmp	r0, #0
 8001be2:	d137      	bne.n	8001c54 <main+0x89c>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8001be4:	481f      	ldr	r0, [pc, #124]	; (8001c64 <main+0x8ac>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	f004 faaa 	bl	8006140 <HAL_FDCAN_ActivateNotification>
 8001bec:	4606      	mov	r6, r0
 8001bee:	bb88      	cbnz	r0, 8001c54 <main+0x89c>
  refCurrent_Iqd.q = (int16_t)(refCurrent/S16A_TO_FLOAT);
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <main+0x8b0>)
  refCurrent = 0;
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <main+0x8b4>)
  refCurrent_Iqd.q = (int16_t)(refCurrent/S16A_TO_FLOAT);
 8001bf4:	6018      	str	r0, [r3, #0]
  refCurrent = 0;
 8001bf6:	2100      	movs	r1, #0
  MC_SetCurrentReferenceMotor1(refCurrent_Iqd);
 8001bf8:	6818      	ldr	r0, [r3, #0]
  refCurrent = 0;
 8001bfa:	6011      	str	r1, [r2, #0]
  MC_SetCurrentReferenceMotor1(refCurrent_Iqd);
 8001bfc:	f000 f920 	bl	8001e40 <MC_SetCurrentReferenceMotor1>
 8001c00:	4d1b      	ldr	r5, [pc, #108]	; (8001c70 <main+0x8b8>)
 8001c02:	4c1c      	ldr	r4, [pc, #112]	; (8001c74 <main+0x8bc>)
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8001c04:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8001c60 <main+0x8a8>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001c08:	4f1b      	ldr	r7, [pc, #108]	; (8001c78 <main+0x8c0>)
	  curSpeed = MC_GetMecSpeedAverageMotor1();
 8001c0a:	f000 f923 	bl	8001e54 <MC_GetMecSpeedAverageMotor1>
	  if(curSpeed > 100 || curSpeed < -100){
 8001c0e:	f100 0364 	add.w	r3, r0, #100	; 0x64
 8001c12:	2bc8      	cmp	r3, #200	; 0xc8
	  curSpeed = MC_GetMecSpeedAverageMotor1();
 8001c14:	6028      	str	r0, [r5, #0]
	  if(curSpeed > 100 || curSpeed < -100){
 8001c16:	d80c      	bhi.n	8001c32 <main+0x87a>
  	  if(flag){
 8001c18:	7823      	ldrb	r3, [r4, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f5      	beq.n	8001c0a <main+0x852>
  		  Tension_PID();
 8001c1e:	f7ff fad3 	bl	80011c8 <Tension_PID>
  		  flag = false;
 8001c22:	7026      	strb	r6, [r4, #0]
	  curSpeed = MC_GetMecSpeedAverageMotor1();
 8001c24:	f000 f916 	bl	8001e54 <MC_GetMecSpeedAverageMotor1>
	  if(curSpeed > 100 || curSpeed < -100){
 8001c28:	f100 0364 	add.w	r3, r0, #100	; 0x64
 8001c2c:	2bc8      	cmp	r3, #200	; 0xc8
	  curSpeed = MC_GetMecSpeedAverageMotor1();
 8001c2e:	6028      	str	r0, [r5, #0]
	  if(curSpeed > 100 || curSpeed < -100){
 8001c30:	d9f2      	bls.n	8001c18 <main+0x860>
	MC_StopMotor1();
 8001c32:	f000 f8ff 	bl	8001e34 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2140      	movs	r1, #64	; 0x40
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	f004 fcc2 	bl	80065c4 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001c40:	4638      	mov	r0, r7
 8001c42:	f005 fc59 	bl	80074f8 <HAL_TIM_Base_Stop_IT>
  	  if(flag){
 8001c46:	7823      	ldrb	r3, [r4, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0de      	beq.n	8001c0a <main+0x852>
  		  Tension_PID();
 8001c4c:	f7ff fabc 	bl	80011c8 <Tension_PID>
  		  flag = false;
 8001c50:	7026      	strb	r6, [r4, #0]
 8001c52:	e7e7      	b.n	8001c24 <main+0x86c>
    Error_Handler();
 8001c54:	f7ff fb50 	bl	80012f8 <Error_Handler>
 8001c58:	2000082c 	.word	0x2000082c
 8001c5c:	40000400 	.word	0x40000400
 8001c60:	48000800 	.word	0x48000800
 8001c64:	200009cc 	.word	0x200009cc
 8001c68:	20000aa0 	.word	0x20000aa0
 8001c6c:	20000654 	.word	0x20000654
 8001c70:	20000630 	.word	0x20000630
 8001c74:	2000063d 	.word	0x2000063d
 8001c78:	20000aa8 	.word	0x20000aa8

08001c7c <Send_CAN>:
void Send_CAN(uint16_t id, uint8_t *data) {
 8001c7c:	b570      	push	{r4, r5, r6, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
	TxHeader.IdType = FDCAN_STANDARD_ID;				// Standard ID element
 8001c80:	2300      	movs	r3, #0
void Send_CAN(uint16_t id, uint8_t *data) {
 8001c82:	460a      	mov	r2, r1
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;			// 8 bytes data field
 8001c84:	f44f 2600 	mov.w	r6, #524288	; 0x80000
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;// FDCAN frames transmitted/received with bit rate switching
 8001c88:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
	TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;	// Store Tx events
 8001c8c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	TxHeader.Identifier = id;								// Tx CAN ID
 8001c90:	9001      	str	r0, [sp, #4]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 8001c92:	a901      	add	r1, sp, #4
 8001c94:	480a      	ldr	r0, [pc, #40]	; (8001cc0 <Send_CAN+0x44>)
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;// Transmitting node is error active
 8001c96:	9305      	str	r3, [sp, #20]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;				// Data frame
 8001c98:	e9cd 3302 	strd	r3, r3, [sp, #8]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;// Frame transmitted/received in Classic CAN format
 8001c9c:	9307      	str	r3, [sp, #28]
	TxHeader.MessageMarker = 0;
 8001c9e:	9309      	str	r3, [sp, #36]	; 0x24
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;			// 8 bytes data field
 8001ca0:	9604      	str	r6, [sp, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;// FDCAN frames transmitted/received with bit rate switching
 8001ca2:	9506      	str	r5, [sp, #24]
	TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;	// Store Tx events
 8001ca4:	9408      	str	r4, [sp, #32]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 8001ca6:	f004 f95f 	bl	8005f68 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001caa:	b938      	cbnz	r0, 8001cbc <Send_CAN+0x40>
	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 8001cac:	4c04      	ldr	r4, [pc, #16]	; (8001cc0 <Send_CAN+0x44>)
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f004 fa40 	bl	8006134 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001cb4:	2803      	cmp	r0, #3
 8001cb6:	d1fa      	bne.n	8001cae <Send_CAN+0x32>
}
 8001cb8:	b00a      	add	sp, #40	; 0x28
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 8001cbc:	f7ff fb1c 	bl	80012f8 <Error_Handler>
 8001cc0:	200009cc 	.word	0x200009cc

08001cc4 <HAL_FDCAN_RxFifo0Callback>:
	if (hfdcan->Instance == hfdcan1.Instance) {
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8001cc6:	6802      	ldr	r2, [r0, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d000      	beq.n	8001cd0 <HAL_FDCAN_RxFifo0Callback+0xc>
 8001cce:	4770      	bx	lr
		if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001cd0:	07cb      	lsls	r3, r1, #31
 8001cd2:	d5fc      	bpl.n	8001cce <HAL_FDCAN_RxFifo0Callback+0xa>
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001cd4:	b510      	push	{r4, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader,
 8001cd8:	466b      	mov	r3, sp
 8001cda:	aa02      	add	r2, sp, #8
 8001cdc:	2140      	movs	r1, #64	; 0x40
 8001cde:	f004 f9ab 	bl	8006038 <HAL_FDCAN_GetRxMessage>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d163      	bne.n	8001dae <HAL_FDCAN_RxFifo0Callback+0xea>
			switch (RxHeader.Identifier) {
 8001ce6:	9b02      	ldr	r3, [sp, #8]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d81a      	bhi.n	8001d22 <HAL_FDCAN_RxFifo0Callback+0x5e>
 8001cec:	b1bb      	cbz	r3, 8001d1e <HAL_FDCAN_RxFifo0Callback+0x5a>
 8001cee:	3b02      	subs	r3, #2
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d85e      	bhi.n	8001db2 <HAL_FDCAN_RxFifo0Callback+0xee>
 8001cf4:	e8df f003 	tbb	[pc, r3]
 8001cf8:	4b27022e 	.word	0x4b27022e
				if(Negative_Tension_Limit <= recieved_tension && recieved_tension <= Positive_Tension_Limit) {
 8001cfc:	eddd 7a00 	vldr	s15, [sp]
 8001d00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	db09      	blt.n	8001d1e <HAL_FDCAN_RxFifo0Callback+0x5a>
 8001d0a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	d802      	bhi.n	8001d1e <HAL_FDCAN_RxFifo0Callback+0x5a>
					refTension = recieved_tension;
 8001d18:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <HAL_FDCAN_RxFifo0Callback+0x138>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
}
 8001d1e:	b00c      	add	sp, #48	; 0x30
 8001d20:	bd10      	pop	{r4, pc}
			switch (RxHeader.Identifier) {
 8001d22:	f240 7277 	movw	r2, #1911	; 0x777
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d1f9      	bne.n	8001d1e <HAL_FDCAN_RxFifo0Callback+0x5a>
	MC_StopMotor1();
 8001d2a:	f000 f883 	bl	8001e34 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4833      	ldr	r0, [pc, #204]	; (8001e00 <HAL_FDCAN_RxFifo0Callback+0x13c>)
 8001d32:	2140      	movs	r1, #64	; 0x40
 8001d34:	f004 fc46 	bl	80065c4 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001d38:	4832      	ldr	r0, [pc, #200]	; (8001e04 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8001d3a:	f005 fbdd 	bl	80074f8 <HAL_TIM_Base_Stop_IT>
				motor_ready = false;
 8001d3e:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <HAL_FDCAN_RxFifo0Callback+0x144>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
}
 8001d44:	e7eb      	b.n	8001d1e <HAL_FDCAN_RxFifo0Callback+0x5a>
				memcpy(&curTension, &RxData[0], 4);
 8001d46:	4a31      	ldr	r2, [pc, #196]	; (8001e0c <HAL_FDCAN_RxFifo0Callback+0x148>)
 8001d48:	9900      	ldr	r1, [sp, #0]
				heartbeat = true;
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_FDCAN_RxFifo0Callback+0x14c>)
				memcpy(&curTension, &RxData[0], 4);
 8001d4c:	6011      	str	r1, [r2, #0]
				heartbeat = true;
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
				break;
 8001d52:	e7e4      	b.n	8001d1e <HAL_FDCAN_RxFifo0Callback+0x5a>
				if (RxData[0]) {
 8001d54:	f89d 4000 	ldrb.w	r4, [sp]
 8001d58:	b1f4      	cbz	r4, 8001d98 <HAL_FDCAN_RxFifo0Callback+0xd4>
					if (motor_ready) {
 8001d5a:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <HAL_FDCAN_RxFifo0Callback+0x144>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0dd      	beq.n	8001d1e <HAL_FDCAN_RxFifo0Callback+0x5a>
	error[0] = 0;
 8001d62:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <HAL_FDCAN_RxFifo0Callback+0x150>)
	d_error = 0;
 8001d64:	492c      	ldr	r1, [pc, #176]	; (8001e18 <HAL_FDCAN_RxFifo0Callback+0x154>)
	int_error = 0;
 8001d66:	482d      	ldr	r0, [pc, #180]	; (8001e1c <HAL_FDCAN_RxFifo0Callback+0x158>)
	error[0] = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6013      	str	r3, [r2, #0]
	error[1] = 0;
 8001d6c:	6053      	str	r3, [r2, #4]
	d_error = 0;
 8001d6e:	600b      	str	r3, [r1, #0]
	int_error = 0;
 8001d70:	6003      	str	r3, [r0, #0]
	MC_StartMotor1();
 8001d72:	f000 f859 	bl	8001e28 <MC_StartMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	4821      	ldr	r0, [pc, #132]	; (8001e00 <HAL_FDCAN_RxFifo0Callback+0x13c>)
 8001d7a:	2140      	movs	r1, #64	; 0x40
 8001d7c:	f004 fc22 	bl	80065c4 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d80:	4820      	ldr	r0, [pc, #128]	; (8001e04 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8001d82:	f005 fb7f 	bl	8007484 <HAL_TIM_Base_Start_IT>
						heartbeat = true;
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	e7c7      	b.n	8001d1e <HAL_FDCAN_RxFifo0Callback+0x5a>
				memcpy(&requested_response_type, &RxData[0], 1);
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_FDCAN_RxFifo0Callback+0x15c>)
 8001d90:	f89d 2000 	ldrb.w	r2, [sp]
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e7c8      	b.n	8001d2a <HAL_FDCAN_RxFifo0Callback+0x66>
	MC_StopMotor1();
 8001d98:	f000 f84c 	bl	8001e34 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8001d9c:	4818      	ldr	r0, [pc, #96]	; (8001e00 <HAL_FDCAN_RxFifo0Callback+0x13c>)
 8001d9e:	4622      	mov	r2, r4
 8001da0:	2140      	movs	r1, #64	; 0x40
 8001da2:	f004 fc0f 	bl	80065c4 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001da6:	4817      	ldr	r0, [pc, #92]	; (8001e04 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8001da8:	f005 fba6 	bl	80074f8 <HAL_TIM_Base_Stop_IT>
}
 8001dac:	e7b7      	b.n	8001d1e <HAL_FDCAN_RxFifo0Callback+0x5a>
				Error_Handler();
 8001dae:	f7ff faa3 	bl	80012f8 <Error_Handler>
	MC_StopMotor1();
 8001db2:	f000 f83f 	bl	8001e34 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2140      	movs	r1, #64	; 0x40
 8001dba:	4811      	ldr	r0, [pc, #68]	; (8001e00 <HAL_FDCAN_RxFifo0Callback+0x13c>)
 8001dbc:	f004 fc02 	bl	80065c4 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001dc0:	4810      	ldr	r0, [pc, #64]	; (8001e04 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8001dc2:	f005 fb99 	bl	80074f8 <HAL_TIM_Base_Stop_IT>
	if (MC_GetSTMStateMotor1() == FAULT_NOW
 8001dc6:	f000 f851 	bl	8001e6c <MC_GetSTMStateMotor1>
 8001dca:	280a      	cmp	r0, #10
 8001dcc:	d00a      	beq.n	8001de4 <HAL_FDCAN_RxFifo0Callback+0x120>
			|| MC_GetSTMStateMotor1() == FAULT_OVER) {
 8001dce:	f000 f84d 	bl	8001e6c <MC_GetSTMStateMotor1>
 8001dd2:	280b      	cmp	r0, #11
 8001dd4:	d006      	beq.n	8001de4 <HAL_FDCAN_RxFifo0Callback+0x120>
			errorID = nominal;
 8001dd6:	4913      	ldr	r1, [pc, #76]	; (8001e24 <HAL_FDCAN_RxFifo0Callback+0x160>)
			motor_ready = true;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_FDCAN_RxFifo0Callback+0x144>)
			errorID = nominal;
 8001dda:	2000      	movs	r0, #0
			motor_ready = true;
 8001ddc:	2201      	movs	r2, #1
			errorID = nominal;
 8001dde:	7008      	strb	r0, [r1, #0]
			motor_ready = true;
 8001de0:	701a      	strb	r2, [r3, #0]
}
 8001de2:	e79c      	b.n	8001d1e <HAL_FDCAN_RxFifo0Callback+0x5a>
		if (MC_AcknowledgeFaultMotor1()) {
 8001de4:	f000 f83c 	bl	8001e60 <MC_AcknowledgeFaultMotor1>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d1f4      	bne.n	8001dd6 <HAL_FDCAN_RxFifo0Callback+0x112>
			errorID = fault_yet;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_FDCAN_RxFifo0Callback+0x160>)
 8001dee:	2203      	movs	r2, #3
 8001df0:	701a      	strb	r2, [r3, #0]
			Error_Handler();
 8001df2:	f7ff fa81 	bl	80012f8 <Error_Handler>
 8001df6:	bf00      	nop
 8001df8:	200009cc 	.word	0x200009cc
 8001dfc:	200007c8 	.word	0x200007c8
 8001e00:	48000800 	.word	0x48000800
 8001e04:	20000aa8 	.word	0x20000aa8
 8001e08:	2000063f 	.word	0x2000063f
 8001e0c:	200007c4 	.word	0x200007c4
 8001e10:	2000063e 	.word	0x2000063e
 8001e14:	20000634 	.word	0x20000634
 8001e18:	20000754 	.word	0x20000754
 8001e1c:	20000aa4 	.word	0x20000aa4
 8001e20:	20000640 	.word	0x20000640
 8001e24:	2000063c 	.word	0x2000063c

08001e28 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001e28:	4b01      	ldr	r3, [pc, #4]	; (8001e30 <MC_StartMotor1+0x8>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	f000 b852 	b.w	8001ed4 <MCI_StartMotor>
 8001e30:	20001e14 	.word	0x20001e14

08001e34 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001e34:	4b01      	ldr	r3, [pc, #4]	; (8001e3c <MC_StopMotor1+0x8>)
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	f000 b856 	b.w	8001ee8 <MCI_StopMotor>
 8001e3c:	20001e14 	.word	0x20001e14

08001e40 <MC_SetCurrentReferenceMotor1>:
  *
  * @param  Iqdref current reference in the Direct-Quadratic reference frame. Expressed
  *         in the qd_t format.
  */
__weak void MC_SetCurrentReferenceMotor1( qd_t Iqdref )
{
 8001e40:	b082      	sub	sp, #8
	MCI_SetCurrentReferences( pMCI[M1], Iqdref );
 8001e42:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <MC_SetCurrentReferenceMotor1+0x10>)
{
 8001e44:	9001      	str	r0, [sp, #4]
	MCI_SetCurrentReferences( pMCI[M1], Iqdref );
 8001e46:	4601      	mov	r1, r0
 8001e48:	6818      	ldr	r0, [r3, #0]
}
 8001e4a:	b002      	add	sp, #8
	MCI_SetCurrentReferences( pMCI[M1], Iqdref );
 8001e4c:	f000 b838 	b.w	8001ec0 <MCI_SetCurrentReferences>
 8001e50:	20001e14 	.word	0x20001e14

08001e54 <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8001e54:	4b01      	ldr	r3, [pc, #4]	; (8001e5c <MC_GetMecSpeedAverageMotor1+0x8>)
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	f000 b8a2 	b.w	8001fa0 <MCI_GetAvrgMecSpeedUnit>
 8001e5c:	20001e14 	.word	0x20001e14

08001e60 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
	return MCI_FaultAcknowledged( pMCI[M1] );
 8001e60:	4b01      	ldr	r3, [pc, #4]	; (8001e68 <MC_AcknowledgeFaultMotor1+0x8>)
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	f000 b844 	b.w	8001ef0 <MCI_FaultAcknowledged>
 8001e68:	20001e14 	.word	0x20001e14

08001e6c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001e6c:	4b01      	ldr	r3, [pc, #4]	; (8001e74 <MC_GetSTMStateMotor1+0x8>)
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	f000 b882 	b.w	8001f78 <MCI_GetSTMState>
 8001e74:	20001e14 	.word	0x20001e14

08001e78 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8001e78:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001e7a:	2400      	movs	r4, #0
 8001e7c:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8001e7e:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8001e80:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 8001e82:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001e84:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8001e86:	e9c0 1200 	strd	r1, r2, [r0]
}
 8001e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8001e8e:	6083      	str	r3, [r0, #8]
}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8001e94:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001e96:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001e9a:	2401      	movs	r4, #1
 8001e9c:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001e9e:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8001ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8001ea4:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ea6:	8303      	strh	r3, [r0, #24]
}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8001eac:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001eae:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001eb0:	2402      	movs	r4, #2
 8001eb2:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8001eb4:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8001eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8001eba:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ebc:	8303      	strh	r3, [r0, #24]
}
 8001ebe:	4770      	bx	lr

08001ec0 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8001ec0:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001ec2:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ec4:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8001ec6:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001eca:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ecc:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8001ece:	b002      	add	sp, #8
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop

08001ed4 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8001ed4:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001ed6:	2103      	movs	r1, #3
{
 8001ed8:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001eda:	6800      	ldr	r0, [r0, #0]
 8001edc:	f008 fa08 	bl	800a2f0 <STM_NextState>

  if ( RetVal == true )
 8001ee0:	b108      	cbz	r0, 8001ee6 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8001ee6:	bd10      	pop	{r4, pc}

08001ee8 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8001ee8:	6800      	ldr	r0, [r0, #0]
 8001eea:	2107      	movs	r1, #7
 8001eec:	f008 ba00 	b.w	800a2f0 <STM_NextState>

08001ef0 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8001ef0:	6800      	ldr	r0, [r0, #0]
 8001ef2:	f008 ba73 	b.w	800a3dc <STM_FaultAcknowledged>
 8001ef6:	bf00      	nop

08001ef8 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8001ef8:	6800      	ldr	r0, [r0, #0]
 8001efa:	2101      	movs	r1, #1
 8001efc:	f008 b9f8 	b.w	800a2f0 <STM_NextState>

08001f00 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8001f00:	b178      	cbz	r0, 8001f22 <MCI_ExecBufferedCommands+0x22>
{
 8001f02:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001f04:	7e03      	ldrb	r3, [r0, #24]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	4604      	mov	r4, r0
 8001f0a:	d000      	beq.n	8001f0e <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8001f0c:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8001f0e:	7b01      	ldrb	r1, [r0, #12]
 8001f10:	2902      	cmp	r1, #2
 8001f12:	d020      	beq.n	8001f56 <MCI_ExecBufferedCommands+0x56>
 8001f14:	2903      	cmp	r1, #3
 8001f16:	d005      	beq.n	8001f24 <MCI_ExecBufferedCommands+0x24>
 8001f18:	2901      	cmp	r1, #1
 8001f1a:	d00c      	beq.n	8001f36 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	7623      	strb	r3, [r4, #24]
}
 8001f20:	bd10      	pop	{r4, pc}
 8001f22:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001f24:	6882      	ldr	r2, [r0, #8]
 8001f26:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001f2a:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001f2e:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001f30:	2302      	movs	r3, #2
 8001f32:	7623      	strb	r3, [r4, #24]
}
 8001f34:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001f36:	6883      	ldr	r3, [r0, #8]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001f3e:	6840      	ldr	r0, [r0, #4]
 8001f40:	f008 f916 	bl	800a170 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001f44:	8ae2      	ldrh	r2, [r4, #22]
 8001f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f4a:	6860      	ldr	r0, [r4, #4]
 8001f4c:	f008 f914 	bl	800a178 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d0e3      	beq.n	8001f1c <MCI_ExecBufferedCommands+0x1c>
 8001f54:	e7ec      	b.n	8001f30 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001f56:	6883      	ldr	r3, [r0, #8]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001f5e:	6840      	ldr	r0, [r0, #4]
 8001f60:	f008 f906 	bl	800a170 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001f64:	8ae2      	ldrh	r2, [r4, #22]
 8001f66:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001f6a:	6860      	ldr	r0, [r4, #4]
 8001f6c:	f008 f904 	bl	800a178 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d0d3      	beq.n	8001f1c <MCI_ExecBufferedCommands+0x1c>
 8001f74:	e7dc      	b.n	8001f30 <MCI_ExecBufferedCommands+0x30>
 8001f76:	bf00      	nop

08001f78 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8001f78:	6800      	ldr	r0, [r0, #0]
 8001f7a:	f008 ba2d 	b.w	800a3d8 <STM_GetState>
 8001f7e:	bf00      	nop

08001f80 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8001f80:	7e40      	ldrb	r0, [r0, #25]
 8001f82:	4770      	bx	lr

08001f84 <MCI_GetLastRampFinalSpeed>:
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
 {
   return  pHandle->hFinalSpeed;
 }
 8001f84:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <MCI_GetLastRampFinalTorque>:
  * @retval int16_t last ramp final torque sent by the user expressed in digit
  */
__weak int16_t MCI_GetLastRampFinalTorque( MCI_Handle_t * pHandle )
{
    return pHandle->hFinalTorque;
}
 8001f8c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop

08001f94 <MCI_GetLastRampFinalDuration>:
  * @retval uint16_t last ramp final torque sent by the user expressed in digit
  */
__weak uint16_t MCI_GetLastRampFinalDuration( MCI_Handle_t * pHandle )
{
    return pHandle->hDurationms;
}
 8001f94:	8ac0      	ldrh	r0, [r0, #22]
 8001f96:	4770      	bx	lr

08001f98 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8001f98:	6840      	ldr	r0, [r0, #4]
 8001f9a:	f008 b935 	b.w	800a208 <STC_StopRamp>
 8001f9e:	bf00      	nop

08001fa0 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8001fa0:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8001fa2:	6840      	ldr	r0, [r0, #4]
 8001fa4:	f008 f8ca 	bl	800a13c <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8001fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8001fac:	f008 b872 	b.w	800a094 <SPD_GetAvrgMecSpeedUnit>

08001fb0 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8001fb0:	6840      	ldr	r0, [r0, #4]
 8001fb2:	f008 b8cd 	b.w	800a150 <STC_GetMecSpeedRefUnit>
 8001fb6:	bf00      	nop

08001fb8 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8001fb8:	6882      	ldr	r2, [r0, #8]
 8001fba:	6810      	ldr	r0, [r2, #0]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	b282      	uxth	r2, r0
 8001fc0:	f362 030f 	bfi	r3, r2, #0, #16
 8001fc4:	0c00      	lsrs	r0, r0, #16
 8001fc6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001fca:	b082      	sub	sp, #8
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	b002      	add	sp, #8
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop

08001fd4 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8001fd4:	6882      	ldr	r2, [r0, #8]
 8001fd6:	6850      	ldr	r0, [r2, #4]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	b282      	uxth	r2, r0
 8001fdc:	f362 030f 	bfi	r3, r2, #0, #16
 8001fe0:	0c00      	lsrs	r0, r0, #16
 8001fe2:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001fe6:	b082      	sub	sp, #8
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	b002      	add	sp, #8
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop

08001ff0 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8001ff0:	6882      	ldr	r2, [r0, #8]
 8001ff2:	68d0      	ldr	r0, [r2, #12]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	b282      	uxth	r2, r0
 8001ff8:	f362 030f 	bfi	r3, r2, #0, #16
 8001ffc:	0c00      	lsrs	r0, r0, #16
 8001ffe:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002002:	b082      	sub	sp, #8
}
 8002004:	4618      	mov	r0, r3
 8002006:	b002      	add	sp, #8
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 800200c:	6882      	ldr	r2, [r0, #8]
 800200e:	6910      	ldr	r0, [r2, #16]
 8002010:	2300      	movs	r3, #0
 8002012:	b282      	uxth	r2, r0
 8002014:	f362 030f 	bfi	r3, r2, #0, #16
 8002018:	0c00      	lsrs	r0, r0, #16
 800201a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800201e:	b082      	sub	sp, #8
}
 8002020:	4618      	mov	r0, r3
 8002022:	b002      	add	sp, #8
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop

08002028 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8002028:	6882      	ldr	r2, [r0, #8]
 800202a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800202e:	2300      	movs	r3, #0
 8002030:	b282      	uxth	r2, r0
 8002032:	f362 030f 	bfi	r3, r2, #0, #16
 8002036:	0c00      	lsrs	r0, r0, #16
 8002038:	f360 431f 	bfi	r3, r0, #16, #16
{
 800203c:	b082      	sub	sp, #8
}
 800203e:	4618      	mov	r0, r3
 8002040:	b002      	add	sp, #8
 8002042:	4770      	bx	lr

08002044 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8002044:	6882      	ldr	r2, [r0, #8]
 8002046:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800204a:	2300      	movs	r3, #0
 800204c:	b282      	uxth	r2, r0
 800204e:	f362 030f 	bfi	r3, r2, #0, #16
 8002052:	0c00      	lsrs	r0, r0, #16
 8002054:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002058:	b082      	sub	sp, #8
}
 800205a:	4618      	mov	r0, r3
 800205c:	b002      	add	sp, #8
 800205e:	4770      	bx	lr

08002060 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8002060:	6883      	ldr	r3, [r0, #8]
}
 8002062:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8002066:	4770      	bx	lr

08002068 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8002068:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 800206a:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 800206e:	f008 f905 	bl	800a27c <STC_GetDefaultIqdref>
 8002072:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002076:	8220      	strh	r0, [r4, #16]
 8002078:	8263      	strh	r3, [r4, #18]
}
 800207a:	bd10      	pop	{r4, pc}

0800207c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 800207c:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800207e:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8002082:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8002086:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800208a:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 800208e:	4250      	negs	r0, r2
 8002090:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8002094:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8002098:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 800209a:	da05      	bge.n	80020a8 <MCM_Clarke+0x2c>
 800209c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 800209e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80020a2:	da0c      	bge.n	80020be <MCM_Clarke+0x42>
 80020a4:	4a09      	ldr	r2, [pc, #36]	; (80020cc <MCM_Clarke+0x50>)
 80020a6:	e001      	b.n	80020ac <MCM_Clarke+0x30>
 80020a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2000      	movs	r0, #0
 80020b0:	b292      	uxth	r2, r2
 80020b2:	f363 000f 	bfi	r0, r3, #0, #16
 80020b6:	f362 401f 	bfi	r0, r2, #16, #16
}
 80020ba:	b004      	add	sp, #16
 80020bc:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80020be:	4803      	ldr	r0, [pc, #12]	; (80020cc <MCM_Clarke+0x50>)
 80020c0:	b20a      	sxth	r2, r1
 80020c2:	4282      	cmp	r2, r0
 80020c4:	bfb8      	it	lt
 80020c6:	4602      	movlt	r2, r0
 80020c8:	e7f0      	b.n	80020ac <MCM_Clarke+0x30>
 80020ca:	bf00      	nop
 80020cc:	ffff8001 	.word	0xffff8001

080020d0 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MCM_Trig_Functions+0x28>)
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 80020d2:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 80020d6:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80020da:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
 80020de:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 80020e0:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80020e2:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 80020e4:	2000      	movs	r0, #0
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	f362 000f 	bfi	r0, r2, #0, #16
 80020ec:	0c1b      	lsrs	r3, r3, #16
{
 80020ee:	b082      	sub	sp, #8
  return (CosSin.Components);
 80020f0:	f363 401f 	bfi	r0, r3, #16, #16

}
 80020f4:	b002      	add	sp, #8
 80020f6:	4770      	bx	lr
 80020f8:	40020c00 	.word	0x40020c00

080020fc <MCM_Park>:
{
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	4605      	mov	r5, r0
 8002102:	9001      	str	r0, [sp, #4]
 8002104:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002106:	4608      	mov	r0, r1
 8002108:	f7ff ffe2 	bl	80020d0 <MCM_Trig_Functions>
 800210c:	b22d      	sxth	r5, r5
 800210e:	b204      	sxth	r4, r0
 8002110:	1436      	asrs	r6, r6, #16
 8002112:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8002114:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8002118:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 800211c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002120:	da12      	bge.n	8002148 <MCM_Park+0x4c>
 8002122:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8002124:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002128:	4914      	ldr	r1, [pc, #80]	; (800217c <MCM_Park+0x80>)
 800212a:	da21      	bge.n	8002170 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 800212c:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8002130:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8002134:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8002138:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 800213c:	da07      	bge.n	800214e <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 800213e:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8002142:	da0f      	bge.n	8002164 <MCM_Park+0x68>
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <MCM_Park+0x80>)
 8002146:	e004      	b.n	8002152 <MCM_Park+0x56>
 8002148:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800214c:	e7ee      	b.n	800212c <MCM_Park+0x30>
 800214e:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8002152:	b28a      	uxth	r2, r1
 8002154:	2000      	movs	r0, #0
 8002156:	b29b      	uxth	r3, r3
 8002158:	f362 000f 	bfi	r0, r2, #0, #16
 800215c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002160:	b004      	add	sp, #16
 8002162:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <MCM_Park+0x80>)
 8002166:	b213      	sxth	r3, r2
 8002168:	4283      	cmp	r3, r0
 800216a:	bfb8      	it	lt
 800216c:	4603      	movlt	r3, r0
 800216e:	e7f0      	b.n	8002152 <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8002170:	b21a      	sxth	r2, r3
 8002172:	4291      	cmp	r1, r2
 8002174:	bfb8      	it	lt
 8002176:	4611      	movlt	r1, r2
 8002178:	e7d8      	b.n	800212c <MCM_Park+0x30>
 800217a:	bf00      	nop
 800217c:	ffff8001 	.word	0xffff8001

08002180 <MCM_Rev_Park>:
{
 8002180:	b530      	push	{r4, r5, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	4604      	mov	r4, r0
 8002186:	9001      	str	r0, [sp, #4]
 8002188:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800218a:	4608      	mov	r0, r1
 800218c:	f7ff ffa0 	bl	80020d0 <MCM_Trig_Functions>
 8002190:	142d      	asrs	r5, r5, #16
 8002192:	1403      	asrs	r3, r0, #16
 8002194:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8002196:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800219a:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 800219c:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 80021a0:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 80021a4:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 80021a8:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 80021ac:	2000      	movs	r0, #0
 80021ae:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80021b2:	f362 000f 	bfi	r0, r2, #0, #16
 80021b6:	f363 401f 	bfi	r0, r3, #16, #16
}
 80021ba:	b005      	add	sp, #20
 80021bc:	bd30      	pop	{r4, r5, pc}
 80021be:	bf00      	nop

080021c0 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 80021c0:	2800      	cmp	r0, #0
 80021c2:	dd09      	ble.n	80021d8 <MCM_Sqrt+0x18>
 80021c4:	b672      	cpsid	i
  {

    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <MCM_Sqrt+0x1c>)
 80021c8:	f240 1269 	movw	r2, #361	; 0x169
 80021cc:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 80021ce:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80021d0:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, (uint32_t) (wInput));
    /* Read sqrt and return */
    wtemprootnew = ((int32_t) (LL_CORDIC_ReadData(CORDIC))>>15);
 80021d2:	13c0      	asrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 80021d4:	b662      	cpsie	i
}
 80021d6:	4770      	bx	lr
	__enable_irq();

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 80021d8:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 80021da:	4770      	bx	lr
 80021dc:	40020c00 	.word	0x40020c00

080021e0 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80021e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e2:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <FOC_Clear+0x74>)
 80021e8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80021ec:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80021f0:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 80021f2:	2500      	movs	r5, #0
{
 80021f4:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 80021f6:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 80021fa:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 80021fc:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 80021fe:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002202:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 8002206:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 800220a:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 800220e:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002212:	4811      	ldr	r0, [pc, #68]	; (8002258 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8002214:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002216:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 800221a:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800221e:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8002220:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8002222:	50d5      	str	r5, [r2, r3]
 8002224:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8002228:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800222a:	f006 fed5 	bl	8008fd8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <FOC_Clear+0x7c>)
 8002230:	4629      	mov	r1, r5
 8002232:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002236:	f006 fecf 	bl	8008fd8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <FOC_Clear+0x80>)
 800223c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002240:	f007 ff7e 	bl	800a140 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <FOC_Clear+0x84>)
 8002246:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800224a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800224e:	f000 bd83 	b.w	8002d58 <PWMC_SwitchOffPWM>
 8002252:	bf00      	nop
 8002254:	20000bc8 	.word	0x20000bc8
 8002258:	2000045c 	.word	0x2000045c
 800225c:	20000458 	.word	0x20000458
 8002260:	20000460 	.word	0x20000460
 8002264:	20000bbc 	.word	0x20000bbc

08002268 <MCboot>:
{
 8002268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 800226c:	4f3f      	ldr	r7, [pc, #252]	; (800236c <MCboot+0x104>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800226e:	4d40      	ldr	r5, [pc, #256]	; (8002370 <MCboot+0x108>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8002270:	f8df a138 	ldr.w	sl, [pc, #312]	; 80023ac <MCboot+0x144>
  ENC_Init (&ENCODER_M1);
 8002274:	4e3f      	ldr	r6, [pc, #252]	; (8002374 <MCboot+0x10c>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8002276:	4c40      	ldr	r4, [pc, #256]	; (8002378 <MCboot+0x110>)
 8002278:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80023b0 <MCboot+0x148>
 800227c:	f8df b134 	ldr.w	fp, [pc, #308]	; 80023b4 <MCboot+0x14c>
  RVBS_Init(&BusVoltageSensor_M1);
 8002280:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80023b8 <MCboot+0x150>
{
 8002284:	b085      	sub	sp, #20
 8002286:	4602      	mov	r2, r0
  STM_Init(&STM[M1]);
 8002288:	4638      	mov	r0, r7
{
 800228a:	9201      	str	r2, [sp, #4]
  STM_Init(&STM[M1]);
 800228c:	f008 f80c 	bl	800a2a8 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 8002290:	4a3a      	ldr	r2, [pc, #232]	; (800237c <MCboot+0x114>)
  bMCBootCompleted = 0;
 8002292:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <MCboot+0x118>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002294:	483b      	ldr	r0, [pc, #236]	; (8002384 <MCboot+0x11c>)
  pCLM[M1] = &CircleLimitationM1;
 8002296:	493c      	ldr	r1, [pc, #240]	; (8002388 <MCboot+0x120>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002298:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 800229a:	2500      	movs	r5, #0
 800229c:	701d      	strb	r5, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 800229e:	6011      	str	r1, [r2, #0]
  R3_2_Init(&PWM_Handle_M1);
 80022a0:	f007 faac 	bl	80097fc <R3_2_Init>
  ASPEP_start (&aspepOverUartA);
 80022a4:	4839      	ldr	r0, [pc, #228]	; (800238c <MCboot+0x124>)
 80022a6:	f7fe fc6b 	bl	8000b80 <ASPEP_start>
  startTimers();
 80022aa:	f006 ff41 	bl	8009130 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80022ae:	4650      	mov	r0, sl
 80022b0:	f006 fe7e 	bl	8008fb0 <PID_HandleInit>
  ENC_Init (&ENCODER_M1);
 80022b4:	4630      	mov	r0, r6
 80022b6:	f006 fa83 	bl	80087c0 <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80022ba:	4633      	mov	r3, r6
 80022bc:	6821      	ldr	r1, [r4, #0]
 80022be:	464a      	mov	r2, r9
 80022c0:	4658      	mov	r0, fp
 80022c2:	f006 fa2d 	bl	8008720 <EAC_Init>
  pEAC[M1] = &EncAlignCtrlM1;
 80022c6:	4a32      	ldr	r2, [pc, #200]	; (8002390 <MCboot+0x128>)
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80022c8:	6820      	ldr	r0, [r4, #0]
  pEAC[M1] = &EncAlignCtrlM1;
 80022ca:	f8c2 b000 	str.w	fp, [r2]
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80022ce:	4651      	mov	r1, sl
 80022d0:	4632      	mov	r2, r6
 80022d2:	f007 ff1d 	bl	800a110 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 80022d6:	4648      	mov	r0, r9
 80022d8:	f008 f8a0 	bl	800a41c <VSS_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80022dc:	482d      	ldr	r0, [pc, #180]	; (8002394 <MCboot+0x12c>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80022de:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80023bc <MCboot+0x154>
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80022e2:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80023c0 <MCboot+0x158>
  PID_HandleInit(&PIDIqHandle_M1);
 80022e6:	f006 fe63 	bl	8008fb0 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80022ea:	482b      	ldr	r0, [pc, #172]	; (8002398 <MCboot+0x130>)
 80022ec:	f006 fe60 	bl	8008fb0 <PID_HandleInit>
  RVBS_Init(&BusVoltageSensor_M1);
 80022f0:	4640      	mov	r0, r8
 80022f2:	f007 fe75 	bl	8009fe0 <RVBS_Init>
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <MCboot+0x134>)
  NTC_Init(&TempSensor_M1);
 80022f8:	4829      	ldr	r0, [pc, #164]	; (80023a0 <MCboot+0x138>)
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80022fa:	681b      	ldr	r3, [r3, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80022fc:	e9c3 9843 	strd	r9, r8, [r3, #268]	; 0x10c
  NTC_Init(&TempSensor_M1);
 8002300:	f006 fe12 	bl	8008f28 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <MCboot+0x13c>)
 8002306:	4828      	ldr	r0, [pc, #160]	; (80023a8 <MCboot+0x140>)
 8002308:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 800230a:	f04f 0801 	mov.w	r8, #1
  REMNG_Init(pREMNG[M1]);
 800230e:	f007 feb5 	bl	800a07c <REMNG_Init>
  FOC_Clear(M1);
 8002312:	4628      	mov	r0, r5
 8002314:	f7ff ff64 	bl	80021e0 <FOC_Clear>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002318:	6820      	ldr	r0, [r4, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 800231a:	f889 8024 	strb.w	r8, [r9, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800231e:	f007 ffad 	bl	800a27c <STC_GetDefaultIqdref>
 8002322:	4603      	mov	r3, r0
 8002324:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8002328:	f8a9 3010 	strh.w	r3, [r9, #16]
 800232c:	f8a9 2012 	strh.w	r2, [r9, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002330:	6820      	ldr	r0, [r4, #0]
 8002332:	f007 ffa3 	bl	800a27c <STC_GetDefaultIqdref>
 8002336:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800233a:	464b      	mov	r3, r9
 800233c:	6822      	ldr	r2, [r4, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800233e:	f8a9 0014 	strh.w	r0, [r9, #20]
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002342:	4639      	mov	r1, r7
 8002344:	4650      	mov	r0, sl
 8002346:	f7ff fd97 	bl	8001e78 <MCI_Init>
  MCI_ExecSpeedRamp(&Mci[M1],
 800234a:	6820      	ldr	r0, [r4, #0]
 800234c:	f007 ff92 	bl	800a274 <STC_GetMecSpeedRefUnitDefault>
 8002350:	462a      	mov	r2, r5
 8002352:	4601      	mov	r1, r0
 8002354:	4650      	mov	r0, sl
 8002356:	f7ff fd9d 	bl	8001e94 <MCI_ExecSpeedRamp>
  pMCIList[M1] = &Mci[M1];
 800235a:	9a01      	ldr	r2, [sp, #4]
  bMCBootCompleted = 1;
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <MCboot+0x118>)
  pMCIList[M1] = &Mci[M1];
 800235e:	f8c2 a000 	str.w	sl, [r2]
  bMCBootCompleted = 1;
 8002362:	f883 8000 	strb.w	r8, [r3]
}
 8002366:	b005      	add	sp, #20
 8002368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800236c:	20000ba4 	.word	0x20000ba4
 8002370:	20000bbc 	.word	0x20000bbc
 8002374:	200000e8 	.word	0x200000e8
 8002378:	20000460 	.word	0x20000460
 800237c:	20000bf0 	.word	0x20000bf0
 8002380:	20000641 	.word	0x20000641
 8002384:	20000318 	.word	0x20000318
 8002388:	20000034 	.word	0x20000034
 800238c:	2000058c 	.word	0x2000058c
 8002390:	20000bc0 	.word	0x20000bc0
 8002394:	200001ac 	.word	0x200001ac
 8002398:	20000180 	.word	0x20000180
 800239c:	20000454 	.word	0x20000454
 80023a0:	200003f4 	.word	0x200003f4
 80023a4:	20000bf4 	.word	0x20000bf4
 80023a8:	200003a8 	.word	0x200003a8
 80023ac:	200001d8 	.word	0x200001d8
 80023b0:	2000041c 	.word	0x2000041c
 80023b4:	20000164 	.word	0x20000164
 80023b8:	2000000c 	.word	0x2000000c
 80023bc:	20000bc8 	.word	0x20000bc8
 80023c0:	20000b88 	.word	0x20000b88

080023c4 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop

080023c8 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80023c8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <FOC_CalcCurrRef+0x24>)
 80023cc:	2426      	movs	r4, #38	; 0x26
 80023ce:	fb04 3400 	mla	r4, r4, r0, r3
 80023d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80023d6:	b103      	cbz	r3, 80023da <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80023d8:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <FOC_CalcCurrRef+0x28>)
 80023dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80023e0:	f007 ff16 	bl	800a210 <STC_CalcTorqueReference>
 80023e4:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80023e6:	8220      	strh	r0, [r4, #16]
}
 80023e8:	bd10      	pop	{r4, pc}
 80023ea:	bf00      	nop
 80023ec:	20000bc8 	.word	0x20000bc8
 80023f0:	20000460 	.word	0x20000460

080023f4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80023f4:	4b01      	ldr	r3, [pc, #4]	; (80023fc <TSK_SetChargeBootCapDelayM1+0x8>)
 80023f6:	8018      	strh	r0, [r3, #0]
}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000642 	.word	0x20000642

08002400 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002402:	8818      	ldrh	r0, [r3, #0]
 8002404:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002406:	fab0 f080 	clz	r0, r0
 800240a:	0940      	lsrs	r0, r0, #5
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000642 	.word	0x20000642

08002414 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002414:	4b01      	ldr	r3, [pc, #4]	; (800241c <TSK_SetStopPermanencyTimeM1+0x8>)
 8002416:	8018      	strh	r0, [r3, #0]
}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000646 	.word	0x20000646

08002420 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002422:	8818      	ldrh	r0, [r3, #0]
 8002424:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002426:	fab0 f080 	clz	r0, r0
 800242a:	0940      	lsrs	r0, r0, #5
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000646 	.word	0x20000646

08002434 <TSK_MediumFrequencyTaskM1>:
{
 8002434:	b510      	push	{r4, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 8002436:	4c8d      	ldr	r4, [pc, #564]	; (800266c <TSK_MediumFrequencyTaskM1+0x238>)
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8002438:	488d      	ldr	r0, [pc, #564]	; (8002670 <TSK_MediumFrequencyTaskM1+0x23c>)
{
 800243a:	b082      	sub	sp, #8
  int16_t wAux = 0;
 800243c:	2300      	movs	r3, #0
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 800243e:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 8002442:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8002446:	f006 fa2b 	bl	80088a0 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 800244a:	6820      	ldr	r0, [r4, #0]
 800244c:	f006 fe3c 	bl	80090c8 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8002450:	4888      	ldr	r0, [pc, #544]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 8002452:	f007 ffc1 	bl	800a3d8 <STM_GetState>
  switch ( StateM1 )
 8002456:	2812      	cmp	r0, #18
 8002458:	d818      	bhi.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
 800245a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800245e:	002a      	.short	0x002a
 8002460:	00440038 	.word	0x00440038
 8002464:	00620053 	.word	0x00620053
 8002468:	00790067 	.word	0x00790067
 800246c:	00930080 	.word	0x00930080
 8002470:	00170013 	.word	0x00170013
 8002474:	00170017 	.word	0x00170017
 8002478:	00ac009d 	.word	0x00ac009d
 800247c:	00cd00b9 	.word	0x00cd00b9
 8002480:	001900dc 	.word	0x001900dc
    STM_NextState( &STM[M1], IDLE );
 8002484:	487b      	ldr	r0, [pc, #492]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 8002486:	2100      	movs	r1, #0
 8002488:	f007 ff32 	bl	800a2f0 <STM_NextState>
}
 800248c:	b002      	add	sp, #8
 800248e:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 8002490:	4877      	ldr	r0, [pc, #476]	; (8002670 <TSK_MediumFrequencyTaskM1+0x23c>)
 8002492:	f006 f9d3 	bl	800883c <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8002496:	4877      	ldr	r0, [pc, #476]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 8002498:	2104      	movs	r1, #4
 800249a:	f007 ff29 	bl	800a2f0 <STM_NextState>
 800249e:	2800      	cmp	r0, #0
 80024a0:	d0f4      	beq.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
      FOC_Clear( M1 );
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7ff fe9c 	bl	80021e0 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80024a8:	4b73      	ldr	r3, [pc, #460]	; (8002678 <TSK_MediumFrequencyTaskM1+0x244>)
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	f007 f834 	bl	8009518 <R3_2_SwitchOnPWM>
 80024b0:	e7ec      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 80024b2:	4872      	ldr	r0, [pc, #456]	; (800267c <TSK_MediumFrequencyTaskM1+0x248>)
 80024b4:	f006 f982 	bl	80087bc <EAC_GetRestartState>
 80024b8:	2800      	cmp	r0, #0
 80024ba:	d0e7      	beq.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 80024bc:	486f      	ldr	r0, [pc, #444]	; (800267c <TSK_MediumFrequencyTaskM1+0x248>)
 80024be:	2100      	movs	r1, #0
 80024c0:	f006 f97a 	bl	80087b8 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 80024c4:	2103      	movs	r1, #3
 80024c6:	486b      	ldr	r0, [pc, #428]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 80024c8:	f007 ff12 	bl	800a2f0 <STM_NextState>
 80024cc:	e7de      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 80024ce:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <TSK_MediumFrequencyTaskM1+0x244>)
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	f006 fff9 	bl	80094c8 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80024d6:	2014      	movs	r0, #20
 80024d8:	f7ff ff8c 	bl	80023f4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 80024dc:	210d      	movs	r1, #13
 80024de:	4865      	ldr	r0, [pc, #404]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 80024e0:	f007 ff06 	bl	800a2f0 <STM_NextState>
    break;
 80024e4:	e7d2      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 80024e6:	4865      	ldr	r0, [pc, #404]	; (800267c <TSK_MediumFrequencyTaskM1+0x248>)
 80024e8:	f006 f94c 	bl	8008784 <EAC_Exec>
 80024ec:	4604      	mov	r4, r0
 80024ee:	2800      	cmp	r0, #0
 80024f0:	f040 80aa 	bne.w	8002648 <TSK_MediumFrequencyTaskM1+0x214>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 80024f4:	4b62      	ldr	r3, [pc, #392]	; (8002680 <TSK_MediumFrequencyTaskM1+0x24c>)
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	f007 fe8a 	bl	800a210 <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 80024fc:	4b61      	ldr	r3, [pc, #388]	; (8002684 <TSK_MediumFrequencyTaskM1+0x250>)
 80024fe:	8258      	strh	r0, [r3, #18]
 8002500:	821c      	strh	r4, [r3, #16]
 8002502:	e7c3      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 8002504:	485d      	ldr	r0, [pc, #372]	; (800267c <TSK_MediumFrequencyTaskM1+0x248>)
 8002506:	f006 f955 	bl	80087b4 <EAC_IsAligned>
 800250a:	2800      	cmp	r0, #0
 800250c:	f040 8090 	bne.w	8002630 <TSK_MediumFrequencyTaskM1+0x1fc>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 8002510:	485a      	ldr	r0, [pc, #360]	; (800267c <TSK_MediumFrequencyTaskM1+0x248>)
 8002512:	2101      	movs	r1, #1
 8002514:	f006 f950 	bl	80087b8 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 8002518:	2101      	movs	r1, #1
 800251a:	4856      	ldr	r0, [pc, #344]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 800251c:	f007 fee8 	bl	800a2f0 <STM_NextState>
      break;
 8002520:	e7b4      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8002522:	2105      	movs	r1, #5
 8002524:	4853      	ldr	r0, [pc, #332]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 8002526:	f007 fee3 	bl	800a2f0 <STM_NextState>
    break;
 800252a:	e7af      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
	  FOC_InitAdditionalMethods(M1);
 800252c:	2000      	movs	r0, #0
 800252e:	f7ff ff49 	bl	80023c4 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8002532:	2000      	movs	r0, #0
 8002534:	f7ff ff48 	bl	80023c8 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8002538:	2106      	movs	r1, #6
 800253a:	484e      	ldr	r0, [pc, #312]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 800253c:	f007 fed8 	bl	800a2f0 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8002540:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <TSK_MediumFrequencyTaskM1+0x24c>)
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	f007 fea8 	bl	800a298 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002548:	484f      	ldr	r0, [pc, #316]	; (8002688 <TSK_MediumFrequencyTaskM1+0x254>)
 800254a:	f7ff fcd9 	bl	8001f00 <MCI_ExecBufferedCommands>
    break;
 800254e:	e79d      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    MCI_ExecBufferedCommands( &Mci[M1] );
 8002550:	484d      	ldr	r0, [pc, #308]	; (8002688 <TSK_MediumFrequencyTaskM1+0x254>)
 8002552:	f7ff fcd5 	bl	8001f00 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8002556:	2000      	movs	r0, #0
 8002558:	f7ff ff36 	bl	80023c8 <FOC_CalcCurrRef>
    break;
 800255c:	e796      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800255e:	4b46      	ldr	r3, [pc, #280]	; (8002678 <TSK_MediumFrequencyTaskM1+0x244>)
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	f007 f825 	bl	80095b0 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8002566:	2000      	movs	r0, #0
 8002568:	f7ff fe3a 	bl	80021e0 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800256c:	6820      	ldr	r0, [r4, #0]
 800256e:	f006 fc97 	bl	8008ea0 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8002572:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002576:	f7ff ff4d 	bl	8002414 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800257a:	2108      	movs	r1, #8
 800257c:	483d      	ldr	r0, [pc, #244]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 800257e:	f007 feb7 	bl	800a2f0 <STM_NextState>
    break;
 8002582:	e783      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8002584:	f7ff ff4c 	bl	8002420 <TSK_StopPermanencyTimeHasElapsedM1>
 8002588:	2800      	cmp	r0, #0
 800258a:	f43f af7f 	beq.w	800248c <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], STOP_IDLE );
 800258e:	2109      	movs	r1, #9
 8002590:	4838      	ldr	r0, [pc, #224]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 8002592:	f007 fead 	bl	800a2f0 <STM_NextState>
 8002596:	e779      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8002598:	f7ff ff32 	bl	8002400 <TSK_ChargeBootCapDelayHasElapsedM1>
 800259c:	2800      	cmp	r0, #0
 800259e:	f43f af75 	beq.w	800248c <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80025a2:	4b35      	ldr	r3, [pc, #212]	; (8002678 <TSK_MediumFrequencyTaskM1+0x244>)
 80025a4:	2100      	movs	r1, #0
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	f000 fbd8 	bl	8002d5c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 80025ac:	210e      	movs	r1, #14
 80025ae:	4831      	ldr	r0, [pc, #196]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 80025b0:	f007 fe9e 	bl	800a2f0 <STM_NextState>
 80025b4:	e76a      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <TSK_MediumFrequencyTaskM1+0x244>)
 80025b8:	2101      	movs	r1, #1
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	f000 fbce 	bl	8002d5c <PWMC_CurrentReadingCalibr>
 80025c0:	2800      	cmp	r0, #0
 80025c2:	f43f af63 	beq.w	800248c <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 80025c6:	210f      	movs	r1, #15
 80025c8:	482a      	ldr	r0, [pc, #168]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 80025ca:	f007 fe91 	bl	800a2f0 <STM_NextState>
 80025ce:	e75d      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80025d0:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <TSK_MediumFrequencyTaskM1+0x24c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80025d2:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <TSK_MediumFrequencyTaskM1+0x250>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80025d4:	6810      	ldr	r0, [r2, #0]
 80025d6:	492d      	ldr	r1, [pc, #180]	; (800268c <TSK_MediumFrequencyTaskM1+0x258>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80025de:	f007 fdab 	bl	800a138 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 80025e2:	4826      	ldr	r0, [pc, #152]	; (800267c <TSK_MediumFrequencyTaskM1+0x248>)
 80025e4:	f006 f8a6 	bl	8008734 <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 80025e8:	4822      	ldr	r0, [pc, #136]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 80025ea:	2102      	movs	r1, #2
 80025ec:	f007 fe80 	bl	800a2f0 <STM_NextState>
 80025f0:	2800      	cmp	r0, #0
 80025f2:	f43f af4b 	beq.w	800248c <TSK_MediumFrequencyTaskM1+0x58>
 80025f6:	e754      	b.n	80024a2 <TSK_MediumFrequencyTaskM1+0x6e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80025f8:	f7ff ff02 	bl	8002400 <TSK_ChargeBootCapDelayHasElapsedM1>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	f43f af45 	beq.w	800248c <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <TSK_MediumFrequencyTaskM1+0x244>)
 8002604:	2100      	movs	r1, #0
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	f000 fba8 	bl	8002d5c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 800260c:	2111      	movs	r1, #17
 800260e:	4819      	ldr	r0, [pc, #100]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 8002610:	f007 fe6e 	bl	800a2f0 <STM_NextState>
 8002614:	e73a      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <TSK_MediumFrequencyTaskM1+0x244>)
 8002618:	2101      	movs	r1, #1
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	f000 fb9e 	bl	8002d5c <PWMC_CurrentReadingCalibr>
 8002620:	2800      	cmp	r0, #0
 8002622:	f43f af33 	beq.w	800248c <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], CLEAR );
 8002626:	2112      	movs	r1, #18
 8002628:	4812      	ldr	r0, [pc, #72]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 800262a:	f007 fe61 	bl	800a2f0 <STM_NextState>
 800262e:	e72d      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <TSK_MediumFrequencyTaskM1+0x244>)
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	f006 ff48 	bl	80094c8 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8002638:	2014      	movs	r0, #20
 800263a:	f7ff fedb 	bl	80023f4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800263e:	2110      	movs	r1, #16
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 8002642:	f007 fe55 	bl	800a2f0 <STM_NextState>
    break;
 8002646:	e721      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <TSK_MediumFrequencyTaskM1+0x244>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 800264a:	4c0d      	ldr	r4, [pc, #52]	; (8002680 <TSK_MediumFrequencyTaskM1+0x24c>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	f006 ffaf 	bl	80095b0 <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8002652:	6820      	ldr	r0, [r4, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	f007 fd8b 	bl	800a170 <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	4904      	ldr	r1, [pc, #16]	; (8002670 <TSK_MediumFrequencyTaskM1+0x23c>)
 800265e:	f007 fd6b 	bl	800a138 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 8002662:	2107      	movs	r1, #7
 8002664:	4803      	ldr	r0, [pc, #12]	; (8002674 <TSK_MediumFrequencyTaskM1+0x240>)
 8002666:	f007 fe43 	bl	800a2f0 <STM_NextState>
 800266a:	e70f      	b.n	800248c <TSK_MediumFrequencyTaskM1+0x58>
 800266c:	20000454 	.word	0x20000454
 8002670:	200000e8 	.word	0x200000e8
 8002674:	20000ba4 	.word	0x20000ba4
 8002678:	20000bbc 	.word	0x20000bbc
 800267c:	20000164 	.word	0x20000164
 8002680:	20000460 	.word	0x20000460
 8002684:	20000bc8 	.word	0x20000bc8
 8002688:	20000b88 	.word	0x20000b88
 800268c:	2000041c 	.word	0x2000041c

08002690 <MC_Scheduler>:
  if (bMCBootCompleted == 1)
 8002690:	4b1e      	ldr	r3, [pc, #120]	; (800270c <MC_Scheduler+0x7c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d000      	beq.n	800269a <MC_Scheduler+0xa>
 8002698:	4770      	bx	lr
{
 800269a:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 800269c:	4c1c      	ldr	r4, [pc, #112]	; (8002710 <MC_Scheduler+0x80>)
 800269e:	8823      	ldrh	r3, [r4, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b1a3      	cbz	r3, 80026ce <MC_Scheduler+0x3e>
      hMFTaskCounterM1--;
 80026a4:	8823      	ldrh	r3, [r4, #0]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <MC_Scheduler+0x84>)
 80026ae:	8813      	ldrh	r3, [r2, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	b11b      	cbz	r3, 80026bc <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80026b4:	8813      	ldrh	r3, [r2, #0]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80026bc:	4a16      	ldr	r2, [pc, #88]	; (8002718 <MC_Scheduler+0x88>)
 80026be:	8813      	ldrh	r3, [r2, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	b11b      	cbz	r3, 80026cc <MC_Scheduler+0x3c>
      hStopPermanencyCounterM1--;
 80026c4:	8813      	ldrh	r3, [r2, #0]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	8013      	strh	r3, [r2, #0]
}
 80026cc:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 80026ce:	4d13      	ldr	r5, [pc, #76]	; (800271c <MC_Scheduler+0x8c>)
      TSK_MediumFrequencyTaskM1();
 80026d0:	f7ff feb0 	bl	8002434 <TSK_MediumFrequencyTaskM1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 80026d4:	4629      	mov	r1, r5
 80026d6:	f851 0b0c 	ldr.w	r0, [r1], #12
 80026da:	6883      	ldr	r3, [r0, #8]
 80026dc:	4798      	blx	r3
 80026de:	6068      	str	r0, [r5, #4]
      if (MCP_Over_UartA.rxBuffer)
 80026e0:	b130      	cbz	r0, 80026f0 <MC_Scheduler+0x60>
        if (MCP_Over_UartA.pTransportLayer->fGetBuffer (MCP_Over_UartA.pTransportLayer, (void **) &MCP_Over_UartA.txBuffer, MCTL_SYNC))
 80026e2:	4629      	mov	r1, r5
 80026e4:	220a      	movs	r2, #10
 80026e6:	f851 0b08 	ldr.w	r0, [r1], #8
 80026ea:	6803      	ldr	r3, [r0, #0]
 80026ec:	4798      	blx	r3
 80026ee:	b910      	cbnz	r0, 80026f6 <MC_Scheduler+0x66>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80026f0:	2301      	movs	r3, #1
 80026f2:	8023      	strh	r3, [r4, #0]
 80026f4:	e7da      	b.n	80026ac <MC_Scheduler+0x1c>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80026f6:	4628      	mov	r0, r5
 80026f8:	f006 f9c2 	bl	8008a80 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket (MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer, MCP_Over_UartA.txLength, MCTL_SYNC);
 80026fc:	6828      	ldr	r0, [r5, #0]
 80026fe:	89ea      	ldrh	r2, [r5, #14]
 8002700:	6846      	ldr	r6, [r0, #4]
 8002702:	68a9      	ldr	r1, [r5, #8]
 8002704:	230a      	movs	r3, #10
 8002706:	47b0      	blx	r6
 8002708:	e7f2      	b.n	80026f0 <MC_Scheduler+0x60>
 800270a:	bf00      	nop
 800270c:	20000641 	.word	0x20000641
 8002710:	20000644 	.word	0x20000644
 8002714:	20000642 	.word	0x20000642
 8002718:	20000646 	.word	0x20000646
 800271c:	20000568 	.word	0x20000568

08002720 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8002724:	4838      	ldr	r0, [pc, #224]	; (8002808 <TSK_HighFrequencyTask+0xe8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002726:	4f39      	ldr	r7, [pc, #228]	; (800280c <TSK_HighFrequencyTask+0xec>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002728:	4c39      	ldr	r4, [pc, #228]	; (8002810 <TSK_HighFrequencyTask+0xf0>)
{
 800272a:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 800272c:	f006 f898 	bl	8008860 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002730:	4b38      	ldr	r3, [pc, #224]	; (8002814 <TSK_HighFrequencyTask+0xf4>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	f007 fd02 	bl	800a13c <STC_GetSpeedSensor>
 8002738:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800273a:	f007 fca7 	bl	800a08c <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800273e:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8002740:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002742:	6838      	ldr	r0, [r7, #0]
 8002744:	f000 f9d2 	bl	8002aec <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8002748:	f001 fc54 	bl	8003ff4 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 800274c:	f001 fc08 	bl	8003f60 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002750:	9803      	ldr	r0, [sp, #12]
 8002752:	f7ff fc93 	bl	800207c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002756:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8002758:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800275a:	f7ff fccf 	bl	80020fc <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 800275e:	4a2e      	ldr	r2, [pc, #184]	; (8002818 <TSK_HighFrequencyTask+0xf8>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002760:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002764:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002766:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002768:	1ac9      	subs	r1, r1, r3
 800276a:	6810      	ldr	r0, [r2, #0]
 800276c:	f006 fc66 	bl	800903c <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002770:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002774:	4b29      	ldr	r3, [pc, #164]	; (800281c <TSK_HighFrequencyTask+0xfc>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002776:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 800277a:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 800277c:	1a89      	subs	r1, r1, r2
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	f006 fc5c 	bl	800903c <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002784:	4b26      	ldr	r3, [pc, #152]	; (8002820 <TSK_HighFrequencyTask+0x100>)
 8002786:	f8ad 8008 	strh.w	r8, [sp, #8]
 800278a:	f8ad 000a 	strh.w	r0, [sp, #10]
 800278e:	9902      	ldr	r1, [sp, #8]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	f005 ff95 	bl	80086c0 <Circle_Limitation>
 8002796:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002798:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800279a:	fa0f f883 	sxth.w	r8, r3
 800279e:	141d      	asrs	r5, r3, #16
 80027a0:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80027a2:	f007 fc7b 	bl	800a09c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80027a6:	4631      	mov	r1, r6
 80027a8:	9802      	ldr	r0, [sp, #8]
 80027aa:	f7ff fce9 	bl	8002180 <MCM_Rev_Park>
 80027ae:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80027b0:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80027b2:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80027b4:	f000 f99c 	bl	8002af0 <PWMC_SetPhaseVoltage>
 80027b8:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80027ba:	9803      	ldr	r0, [sp, #12]
 80027bc:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80027be:	9804      	ldr	r0, [sp, #16]
 80027c0:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80027c2:	9801      	ldr	r0, [sp, #4]
 80027c4:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 80027c6:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 80027c8:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80027ca:	f8a4 8016 	strh.w	r8, [r4, #22]
 80027ce:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 80027d0:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 80027d2:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 80027d6:	d011      	beq.n	80027fc <TSK_HighFrequencyTask+0xdc>
  GLOBAL_TIMESTAMP++;
 80027d8:	4a12      	ldr	r2, [pc, #72]	; (8002824 <TSK_HighFrequencyTask+0x104>)
  if (MCPA_UART_A.Mark != 0)
 80027da:	4813      	ldr	r0, [pc, #76]	; (8002828 <TSK_HighFrequencyTask+0x108>)
  GLOBAL_TIMESTAMP++;
 80027dc:	6813      	ldr	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 80027de:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
  GLOBAL_TIMESTAMP++;
 80027e2:	3301      	adds	r3, #1
 80027e4:	6013      	str	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 80027e6:	b919      	cbnz	r1, 80027f0 <TSK_HighFrequencyTask+0xd0>
}
 80027e8:	2000      	movs	r0, #0
 80027ea:	b006      	add	sp, #24
 80027ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCPA_dataLog (&MCPA_UART_A);
 80027f0:	f006 f9c2 	bl	8008b78 <MCPA_dataLog>
}
 80027f4:	2000      	movs	r0, #0
 80027f6:	b006      	add	sp, #24
 80027f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	480b      	ldr	r0, [pc, #44]	; (800282c <TSK_HighFrequencyTask+0x10c>)
 8002800:	f007 fd58 	bl	800a2b4 <STM_FaultProcessing>
 8002804:	e7e8      	b.n	80027d8 <TSK_HighFrequencyTask+0xb8>
 8002806:	bf00      	nop
 8002808:	200000e8 	.word	0x200000e8
 800280c:	20000bbc 	.word	0x20000bbc
 8002810:	20000bc8 	.word	0x20000bc8
 8002814:	20000460 	.word	0x20000460
 8002818:	2000045c 	.word	0x2000045c
 800281c:	20000458 	.word	0x20000458
 8002820:	20000bf0 	.word	0x20000bf0
 8002824:	20000650 	.word	0x20000650
 8002828:	200004dc 	.word	0x200004dc
 800282c:	20000ba4 	.word	0x20000ba4

08002830 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002834:	4e23      	ldr	r6, [pc, #140]	; (80028c4 <TSK_SafetyTask_PWMOFF+0x94>)
{
 8002836:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002838:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800283c:	f006 fb86 	bl	8008f4c <NTC_CalcAvTemp>
 8002840:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002842:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002846:	f000 fab3 	bl	8002db0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800284a:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800284e:	4328      	orrs	r0, r5
 8002850:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8002852:	b36c      	cbz	r4, 80028b0 <TSK_SafetyTask_PWMOFF+0x80>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8002854:	4f1c      	ldr	r7, [pc, #112]	; (80028c8 <TSK_SafetyTask_PWMOFF+0x98>)
 8002856:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800285a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800285e:	43ea      	mvns	r2, r5
 8002860:	b292      	uxth	r2, r2
 8002862:	4629      	mov	r1, r5
 8002864:	4638      	mov	r0, r7
 8002866:	f007 fd25 	bl	800a2b4 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800286a:	4638      	mov	r0, r7
 800286c:	f007 fdb4 	bl	800a3d8 <STM_GetState>
 8002870:	280a      	cmp	r0, #10
 8002872:	d002      	beq.n	800287a <TSK_SafetyTask_PWMOFF+0x4a>
 8002874:	280b      	cmp	r0, #11
 8002876:	d015      	beq.n	80028a4 <TSK_SafetyTask_PWMOFF+0x74>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pEAC[bMotor] != MC_NULL)
 800287a:	4b14      	ldr	r3, [pc, #80]	; (80028cc <TSK_SafetyTask_PWMOFF+0x9c>)
 800287c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002880:	b110      	cbz	r0, 8002888 <TSK_SafetyTask_PWMOFF+0x58>
      EAC_SetRestartState( pEAC[bMotor], false );
 8002882:	2100      	movs	r1, #0
 8002884:	f005 ff98 	bl	80087b8 <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002888:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800288c:	f000 fa64 	bl	8002d58 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff fca5 	bl	80021e0 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002896:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <TSK_SafetyTask_PWMOFF+0xa0>)
 8002898:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800289c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80028a0:	f006 bafe 	b.w	8008ea0 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80028a4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80028a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80028ac:	f000 ba54 	b.w	8002d58 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 80028b0:	4808      	ldr	r0, [pc, #32]	; (80028d4 <TSK_SafetyTask_PWMOFF+0xa4>)
 80028b2:	f007 fbad 	bl	800a010 <RVBS_CalcAvVbus>
 80028b6:	f000 000e 	and.w	r0, r0, #14
 80028ba:	4305      	orrs	r5, r0
 80028bc:	e7ca      	b.n	8002854 <TSK_SafetyTask_PWMOFF+0x24>
 80028be:	bf00      	nop
 80028c0:	20000464 	.word	0x20000464
 80028c4:	20000bbc 	.word	0x20000bbc
 80028c8:	20000ba4 	.word	0x20000ba4
 80028cc:	20000bc0 	.word	0x20000bc0
 80028d0:	20000454 	.word	0x20000454
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <TSK_SafetyTask>:
{
 80028d8:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <TSK_SafetyTask+0x1c>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d000      	beq.n	80028e4 <TSK_SafetyTask+0xc>
}
 80028e2:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7ff ffa3 	bl	8002830 <TSK_SafetyTask_PWMOFF>
}
 80028ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80028ee:	f001 bb07 	b.w	8003f00 <RCM_ExecUserConv>
 80028f2:	bf00      	nop
 80028f4:	20000641 	.word	0x20000641

080028f8 <MC_RunMotorControlTasks>:
{
 80028f8:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <MC_RunMotorControlTasks+0x14>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b903      	cbnz	r3, 8002902 <MC_RunMotorControlTasks+0xa>
}
 8002900:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002902:	f7ff fec5 	bl	8002690 <MC_Scheduler>
    TSK_SafetyTask();
 8002906:	f7ff ffe7 	bl	80028d8 <TSK_SafetyTask>
}
 800290a:	bd08      	pop	{r3, pc}
 800290c:	20000641 	.word	0x20000641

08002910 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002910:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <TSK_HardwareFaultTask+0x18>)
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	f006 fe4b 	bl	80095b0 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800291a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800291e:	4803      	ldr	r0, [pc, #12]	; (800292c <TSK_HardwareFaultTask+0x1c>)
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	f007 bcc6 	b.w	800a2b4 <STM_FaultProcessing>
 8002928:	20000bbc 	.word	0x20000bbc
 800292c:	20000ba4 	.word	0x20000ba4

08002930 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002930:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002932:	f7ff fa9b 	bl	8001e6c <MC_GetSTMStateMotor1>
 8002936:	b918      	cbnz	r0, 8002940 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 800293c:	f7ff ba74 	b.w	8001e28 <MC_StartMotor1>
}
 8002940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002944:	f7ff ba76 	b.w	8001e34 <MC_StopMotor1>

08002948 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002948:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800294a:	4a55      	ldr	r2, [pc, #340]	; (8002aa0 <mc_lock_pins+0x158>)
 800294c:	4855      	ldr	r0, [pc, #340]	; (8002aa4 <mc_lock_pins+0x15c>)
 800294e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002950:	2604      	movs	r6, #4
 8002952:	b094      	sub	sp, #80	; 0x50
 8002954:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002956:	61d0      	str	r0, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002958:	69d3      	ldr	r3, [r2, #28]
 800295a:	9313      	str	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800295c:	4c52      	ldr	r4, [pc, #328]	; (8002aa8 <mc_lock_pins+0x160>)
  (void) temp;
 800295e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002960:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002962:	2702      	movs	r7, #2
 8002964:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002966:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002968:	69d3      	ldr	r3, [r2, #28]
 800296a:	9312      	str	r3, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, PinMask);
 800296c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002970:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
  (void) temp;
 8002974:	9d12      	ldr	r5, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002976:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002978:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800297a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800297c:	69d3      	ldr	r3, [r2, #28]
 800297e:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002984:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002988:	2501      	movs	r5, #1
  (void) temp;
 800298a:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800298e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002990:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002992:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002994:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8002998:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  (void) temp;
 800299c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029a0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029a2:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029a4:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029a6:	69d1      	ldr	r1, [r2, #28]
 80029a8:	910f      	str	r1, [sp, #60]	; 0x3c
  (void) temp;
 80029aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029ac:	493f      	ldr	r1, [pc, #252]	; (8002aac <mc_lock_pins+0x164>)
 80029ae:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029b0:	2580      	movs	r5, #128	; 0x80
 80029b2:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029b4:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029b6:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80029ba:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  (void) temp;
 80029be:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029c2:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029c4:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029c6:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029c8:	69dc      	ldr	r4, [r3, #28]
 80029ca:	940d      	str	r4, [sp, #52]	; 0x34
  (void) temp;
 80029cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029ce:	4c38      	ldr	r4, [pc, #224]	; (8002ab0 <mc_lock_pins+0x168>)
 80029d0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029d2:	2708      	movs	r7, #8
 80029d4:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029d6:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029d8:	69dc      	ldr	r4, [r3, #28]
 80029da:	940c      	str	r4, [sp, #48]	; 0x30
  (void) temp;
 80029dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029de:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029e0:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029e2:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029e4:	69d8      	ldr	r0, [r3, #28]
 80029e6:	900b      	str	r0, [sp, #44]	; 0x2c
  (void) temp;
 80029e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029ea:	4832      	ldr	r0, [pc, #200]	; (8002ab4 <mc_lock_pins+0x16c>)
 80029ec:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029ee:	2440      	movs	r4, #64	; 0x40
 80029f0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029f2:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029f4:	69de      	ldr	r6, [r3, #28]
 80029f6:	960a      	str	r6, [sp, #40]	; 0x28
  (void) temp;
 80029f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029fa:	4e2f      	ldr	r6, [pc, #188]	; (8002ab8 <mc_lock_pins+0x170>)
 80029fc:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029fe:	2720      	movs	r7, #32
 8002a00:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a02:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a04:	69de      	ldr	r6, [r3, #28]
 8002a06:	9609      	str	r6, [sp, #36]	; 0x24
  (void) temp;
 8002a08:	9e09      	ldr	r6, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a0a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a0c:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a0e:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a10:	69d0      	ldr	r0, [r2, #28]
 8002a12:	9008      	str	r0, [sp, #32]
  (void) temp;
 8002a14:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a16:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a18:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a1a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a1c:	69d1      	ldr	r1, [r2, #28]
 8002a1e:	9107      	str	r1, [sp, #28]
  (void) temp;
 8002a20:	9807      	ldr	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a22:	4926      	ldr	r1, [pc, #152]	; (8002abc <mc_lock_pins+0x174>)
 8002a24:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a2a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a2c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a2e:	69d9      	ldr	r1, [r3, #28]
 8002a30:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a32:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a36:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 8002a3a:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a3c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a3e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a40:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a42:	69d9      	ldr	r1, [r3, #28]
 8002a44:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a46:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a4a:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8002a4e:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a50:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a52:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a54:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a56:	69d9      	ldr	r1, [r3, #28]
 8002a58:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a5e:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 8002a62:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a64:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a66:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a68:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a72:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  (void) temp;
 8002a76:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a78:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a7a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a7c:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a7e:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <mc_lock_pins+0x178>)
  temp = READ_REG(GPIOx->LCKR);
 8002a82:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a88:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 8002a8c:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a8e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a90:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a92:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002a98:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002a9a:	b014      	add	sp, #80	; 0x50
 8002a9c:	bcf0      	pop	{r4, r5, r6, r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	48000400 	.word	0x48000400
 8002aa4:	00010004 	.word	0x00010004
 8002aa8:	00010002 	.word	0x00010002
 8002aac:	00010080 	.word	0x00010080
 8002ab0:	00010008 	.word	0x00010008
 8002ab4:	00010040 	.word	0x00010040
 8002ab8:	00010020 	.word	0x00010020
 8002abc:	00010100 	.word	0x00010100
 8002ac0:	48000800 	.word	0x48000800

08002ac4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002ac4:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002ac6:	f004 fa25 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <MX_MotorControl_Init+0x20>)
 8002acc:	fba3 3000 	umull	r3, r0, r3, r0
 8002ad0:	09c0      	lsrs	r0, r0, #7
 8002ad2:	f002 ff91 	bl	80059f8 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002ad6:	4804      	ldr	r0, [pc, #16]	; (8002ae8 <MX_MotorControl_Init+0x24>)
 8002ad8:	f7ff fbc6 	bl	8002268 <MCboot>
  mc_lock_pins();

}
 8002adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002ae0:	f7ff bf32 	b.w	8002948 <mc_lock_pins>
 8002ae4:	10624dd3 	.word	0x10624dd3
 8002ae8:	20001e14 	.word	0x20001e14

08002aec <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8002aec:	6843      	ldr	r3, [r0, #4]
 8002aee:	4718      	bx	r3

08002af0 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8002af0:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002af2:	f8b0 605c 	ldrh.w	r6, [r0, #92]	; 0x5c
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002af6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
{
 8002af8:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002afa:	140c      	asrs	r4, r1, #16
{
 8002afc:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002afe:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002b02:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002b04:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002b08:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8002b0c:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002b10:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8002b14:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002b18:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002b20:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8002b24:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002b28:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8002b2c:	db7b      	blt.n	8002c26 <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8002b2e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002b32:	db50      	blt.n	8002bd6 <PWMC_SetPhaseVoltage+0xe6>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002b34:	1aad      	subs	r5, r5, r2
 8002b36:	bf44      	itt	mi
 8002b38:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002b3c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8002b40:	2900      	cmp	r1, #0
 8002b42:	bfbc      	itt	lt
 8002b44:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002b48:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bfb8      	it	lt
 8002b50:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002b54:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002b58:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002b5c:	bfb8      	it	lt
 8002b5e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8002b62:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8002b64:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002b68:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8002b6c:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8002b70:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
      pHandle->lowDuty = wTimePhB;
 8002b74:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8002b78:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));

  if ( pHandle->DTTest == 1u )
 8002b7c:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002b80:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002b84:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002b88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	b289      	uxth	r1, r1
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8002b94:	8742      	strh	r2, [r0, #58]	; 0x3a
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8002b96:	8781      	strh	r1, [r0, #60]	; 0x3c
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8002b98:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if ( pHandle->DTTest == 1u )
 8002b9a:	d118      	bne.n	8002bce <PWMC_SetPhaseVoltage+0xde>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8002b9c:	f9b0 404c 	ldrsh.w	r4, [r0, #76]	; 0x4c
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8002ba0:	f9b0 504e 	ldrsh.w	r5, [r0, #78]	; 0x4e
    if ( pHandle->Ia > 0 )
 8002ba4:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8002ba6:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
 8002baa:	bfcc      	ite	gt
 8002bac:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8002bae:	1b12      	suble	r2, r2, r4
 8002bb0:	b292      	uxth	r2, r2
 8002bb2:	8742      	strh	r2, [r0, #58]	; 0x3a
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8002bb4:	f9b0 2050 	ldrsh.w	r2, [r0, #80]	; 0x50
    if ( pHandle->Ib > 0 )
 8002bb8:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8002bba:	bfcc      	ite	gt
 8002bbc:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8002bbe:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8002bc0:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8002bc2:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8002bc4:	bfcc      	ite	gt
 8002bc6:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8002bc8:	1b1b      	suble	r3, r3, r4
 8002bca:	8781      	strh	r1, [r0, #60]	; 0x3c
 8002bcc:	87c3      	strh	r3, [r0, #62]	; 0x3e
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8002bce:	6983      	ldr	r3, [r0, #24]
}
 8002bd0:	b003      	add	sp, #12
 8002bd2:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8002bd4:	4718      	bx	r3
      if ( wX <= 0 )
 8002bd6:	2c00      	cmp	r4, #0
 8002bd8:	dd4b      	ble.n	8002c72 <PWMC_SetPhaseVoltage+0x182>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002bda:	1aa5      	subs	r5, r4, r2
 8002bdc:	bf44      	itt	mi
 8002bde:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002be2:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8002be6:	2900      	cmp	r1, #0
 8002be8:	bfb8      	it	lt
 8002bea:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8002bee:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8002bf2:	bfb8      	it	lt
 8002bf4:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8002bf8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002bfc:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8002bfe:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002c00:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002c04:	bfb8      	it	lt
 8002c06:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8002c0a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002c0e:	bfb8      	it	lt
 8002c10:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002c14:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8002c18:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->lowDuty = wTimePhA;
 8002c1c:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8002c20:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhC;
 8002c24:	e7aa      	b.n	8002b7c <PWMC_SetPhaseVoltage+0x8c>
    if ( wZ < 0 )
 8002c26:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002c2a:	db6f      	blt.n	8002d0c <PWMC_SetPhaseVoltage+0x21c>
      if ( wX <= 0 )
 8002c2c:	2c00      	cmp	r4, #0
 8002c2e:	dd47      	ble.n	8002cc0 <PWMC_SetPhaseVoltage+0x1d0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002c30:	1b2d      	subs	r5, r5, r4
 8002c32:	bf48      	it	mi
 8002c34:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8002c38:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002c3c:	bf48      	it	mi
 8002c3e:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bfb8      	it	lt
 8002c46:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8002c4a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002c4e:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002c52:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8002c56:	bfb8      	it	lt
 8002c58:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8002c5c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002c60:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8002c64:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8002c68:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8002c6c:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8002c70:	e784      	b.n	8002b7c <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002c72:	1b2d      	subs	r5, r5, r4
 8002c74:	bf44      	itt	mi
 8002c76:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002c7a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bfb8      	it	lt
 8002c82:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8002c86:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8002c8a:	bfb8      	it	lt
 8002c8c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8002c90:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhB = wTimePhC + wX / 131072;
 8002c94:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002c96:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002c9a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002c9e:	bfb8      	it	lt
 8002ca0:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8002ca4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002ca8:	bfb8      	it	lt
 8002caa:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002cae:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8002cb2:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->lowDuty = wTimePhA;
 8002cb6:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8002cba:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhB;
 8002cbe:	e75d      	b.n	8002b7c <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002cc0:	1aa5      	subs	r5, r4, r2
 8002cc2:	bf44      	itt	mi
 8002cc4:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002cc8:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8002ccc:	2900      	cmp	r1, #0
 8002cce:	bfb8      	it	lt
 8002cd0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8002cd4:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8002cd8:	bfb8      	it	lt
 8002cda:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8002cde:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002ce2:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8002ce4:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002ce6:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002cea:	bfb8      	it	lt
 8002cec:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8002cf0:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002cf4:	bfb8      	it	lt
 8002cf6:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002cfa:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8002cfe:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8002d02:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8002d06:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8002d0a:	e737      	b.n	8002b7c <PWMC_SetPhaseVoltage+0x8c>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002d0c:	1aad      	subs	r5, r5, r2
 8002d0e:	bf44      	itt	mi
 8002d10:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002d14:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8002d18:	2900      	cmp	r1, #0
 8002d1a:	bfbc      	itt	lt
 8002d1c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002d20:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bfb8      	it	lt
 8002d28:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002d2c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002d30:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002d34:	bfb8      	it	lt
 8002d36:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8002d3a:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8002d3c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002d40:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8002d44:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhC;
 8002d48:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8002d4c:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      pHandle->highDuty = wTimePhB;
 8002d50:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
 8002d54:	e712      	b.n	8002b7c <PWMC_SetPhaseVoltage+0x8c>
 8002d56:	bf00      	nop

08002d58 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8002d58:	6883      	ldr	r3, [r0, #8]
 8002d5a:	4718      	bx	r3

08002d5c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	4604      	mov	r4, r0
 8002d60:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8002d62:	b199      	cbz	r1, 8002d8c <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8002d64:	2901      	cmp	r1, #1
 8002d66:	d002      	beq.n	8002d6e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002d68:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8002d6e:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8002d72:	b1cb      	cbz	r3, 8002da8 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	9101      	str	r1, [sp, #4]
 8002d7a:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f2      	bne.n	8002d68 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8002d82:	6903      	ldr	r3, [r0, #16]
 8002d84:	4798      	blx	r3
        retVal = true;
 8002d86:	9901      	ldr	r1, [sp, #4]
 8002d88:	4608      	mov	r0, r1
 8002d8a:	e7ee      	b.n	8002d6a <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8002d8c:	f7ff ffe4 	bl	8002d58 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8002d90:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002d94:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	6923      	ldr	r3, [r4, #16]
 8002da0:	4798      	blx	r3
      retVal = true;
 8002da2:	2001      	movs	r0, #1
}
 8002da4:	b002      	add	sp, #8
 8002da6:	bd10      	pop	{r4, pc}
      retVal = true;
 8002da8:	4608      	mov	r0, r1
}
 8002daa:	b002      	add	sp, #8
 8002dac:	bd10      	pop	{r4, pc}
 8002dae:	bf00      	nop

08002db0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8002db0:	69c3      	ldr	r3, [r0, #28]
 8002db2:	4718      	bx	r3

08002db4 <RI_SetRegCommandParser>:
static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, uint16_t maxSize);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, uint16_t maxSize);
static uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, uint16_t maxSize);

__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle)
{
 8002db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t * dataElementID;
  uint8_t * rxData = pHandle->rxBuffer+MCP_HEADER_SIZE;
  uint8_t * txData = pHandle->txBuffer;
  int16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8002db8:	8985      	ldrh	r5, [r0, #12]
  uint8_t * txData = pHandle->txBuffer;
 8002dba:	f8d0 b008 	ldr.w	fp, [r0, #8]
  uint8_t * rxData = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8002dbe:	e9d0 2400 	ldrd	r2, r4, [r0]
  int16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8002dc2:	3d02      	subs	r5, #2
  int16_t txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* 1 Byte must be available for MCP CMD status*/
  uint16_t size;
  uint8_t retVal=MCP_CMD_OK;
  uint8_t accessResult;
  uint8_t number_of_item =0;
  pHandle->txLength = 0;
 8002dc4:	2300      	movs	r3, #0
{
 8002dc6:	b087      	sub	sp, #28
  int16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8002dc8:	b22d      	sxth	r5, r5
  int16_t txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* 1 Byte must be available for MCP CMD status*/
 8002dca:	8992      	ldrh	r2, [r2, #12]
 8002dcc:	9201      	str	r2, [sp, #4]
  while (rxLength > 0)
 8002dce:	429d      	cmp	r5, r3
{
 8002dd0:	4682      	mov	sl, r0
  pHandle->txLength = 0;
 8002dd2:	81c3      	strh	r3, [r0, #14]
  while (rxLength > 0)
 8002dd4:	f340 80f6 	ble.w	8002fc4 <RI_SetRegCommandParser+0x210>
  uint8_t retVal=MCP_CMD_OK;
 8002dd8:	9302      	str	r3, [sp, #8]
 8002dda:	f1cb 0201 	rsb	r2, fp, #1
 8002dde:	4bb3      	ldr	r3, [pc, #716]	; (80030ac <RI_SetRegCommandParser+0x2f8>)
 8002de0:	9200      	str	r2, [sp, #0]
 8002de2:	3402      	adds	r4, #2
  uint8_t * txData = pHandle->txBuffer;
 8002de4:	46d9      	mov	r9, fp
 8002de6:	462f      	mov	r7, r5
  {
     number_of_item ++;
     dataElementID = (uint16_t *) rxData;
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
     rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002de8:	46a0      	mov	r8, r4
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002dea:	b2bf      	uxth	r7, r7
     accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8002dec:	f838 0b02 	ldrh.w	r0, [r8], #2
  uint8_t typeID;
  uint8_t motorID;
  uint8_t retVal = MCP_CMD_OK;
  uint16_t regID = dataID & REG_MASK;
  typeID = dataID & TYPE_MASK;
  motorID = (dataID & MOTOR_MASK)-1;
 8002df0:	f000 0c07 	and.w	ip, r0, #7
 8002df4:	f10c 3cff 	add.w	ip, ip, #4294967295

  MCI_Handle_t * pMCI = &Mci[motorID];
 8002df8:	fa5f f68c 	uxtb.w	r6, ip
 8002dfc:	f000 0138 	and.w	r1, r0, #56	; 0x38
 8002e00:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
  uint16_t regID = dataID & REG_MASK;
 8002e04:	f020 0207 	bic.w	r2, r0, #7
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002e08:	1ebd      	subs	r5, r7, #2
 8002e0a:	3908      	subs	r1, #8
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002e0c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
  motorID = (dataID & MOTOR_MASK)-1;
 8002e10:	fa5f fc8c 	uxtb.w	ip, ip
  uint16_t regID = dataID & REG_MASK;
 8002e14:	b292      	uxth	r2, r2
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002e16:	b2ad      	uxth	r5, r5

  switch (typeID)
 8002e18:	2920      	cmp	r1, #32
 8002e1a:	d812      	bhi.n	8002e42 <RI_SetRegCommandParser+0x8e>
 8002e1c:	e8df f001 	tbb	[pc, r1]
 8002e20:	111111a7 	.word	0x111111a7
 8002e24:	11111111 	.word	0x11111111
 8002e28:	1111117a 	.word	0x1111117a
 8002e2c:	11111111 	.word	0x11111111
 8002e30:	111111b3 	.word	0x111111b3
 8002e34:	11111111 	.word	0x11111111
 8002e38:	1111115e 	.word	0x1111115e
 8002e3c:	11111111 	.word	0x11111111
 8002e40:	30          	.byte	0x30
 8002e41:	00          	.byte	0x00
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002e42:	2207      	movs	r2, #7
     if (number_of_item == 1 && rxLength == 0)
 8002e44:	9900      	ldr	r1, [sp, #0]
 8002e46:	4449      	add	r1, r9
 8002e48:	b2c9      	uxtb	r1, r1
 8002e4a:	2901      	cmp	r1, #1
     rxLength = (int16_t) (rxLength - size);
 8002e4c:	b22f      	sxth	r7, r5
     if (number_of_item == 1 && rxLength == 0)
 8002e4e:	f000 80b4 	beq.w	8002fba <RI_SetRegCommandParser+0x206>
       if (txSyncFreeSpace >=0 )
 8002e52:	9901      	ldr	r1, [sp, #4]
 8002e54:	4459      	add	r1, fp
 8002e56:	3901      	subs	r1, #1
 8002e58:	eba1 0109 	sub.w	r1, r1, r9
 8002e5c:	0409      	lsls	r1, r1, #16
 8002e5e:	f100 80a7 	bmi.w	8002fb0 <RI_SetRegCommandParser+0x1fc>
         *txData = accessResult;
 8002e62:	f809 2b01 	strb.w	r2, [r9], #1
         pHandle->txLength++;
 8002e66:	f8ba 100e 	ldrh.w	r1, [sl, #14]
 8002e6a:	3101      	adds	r1, #1
 8002e6c:	f8aa 100e 	strh.w	r1, [sl, #14]
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	f040 80ae 	bne.w	8002fd2 <RI_SetRegCommandParser+0x21e>
  while (rxLength > 0)
 8002e76:	2f00      	cmp	r7, #0
 8002e78:	f340 8274 	ble.w	8003364 <RI_SetRegCommandParser+0x5b0>
 8002e7c:	4644      	mov	r4, r8
 8002e7e:	e7b3      	b.n	8002de8 <RI_SetRegCommandParser+0x34>
    }
    break;
  case TYPE_DATA_RAW:
    {
      uint16_t rawSize = *(uint16_t *) data;
      *size = rawSize+2; /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
 8002e80:	8867      	ldrh	r7, [r4, #2]
 8002e82:	3702      	adds	r7, #2
 8002e84:	b2bf      	uxth	r7, r7
      uint8_t * rawData = data+2; /* rawData points to the first data (after size extraction) */
      if (*size > freeSpace )
 8002e86:	42bd      	cmp	r5, r7
 8002e88:	f0c0 81b2 	bcc.w	80031f0 <RI_SetRegCommandParser+0x43c>
        *size =0;
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
      }
      else
      {
        switch (regID)
 8002e8c:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 8002e90:	f000 81f9 	beq.w	8003286 <RI_SetRegCommandParser+0x4d2>
 8002e94:	d910      	bls.n	8002eb8 <RI_SetRegCommandParser+0x104>
 8002e96:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 8002e9a:	f000 81d8 	beq.w	800324e <RI_SetRegCommandParser+0x49a>
 8002e9e:	f5b2 6fa5 	cmp.w	r2, #1320	; 0x528
 8002ea2:	d10e      	bne.n	8002ec2 <RI_SetRegCommandParser+0x10e>
          }
          break;

        case MC_REG_ASYNC_UARTA:
          {
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 8002ea4:	4882      	ldr	r0, [pc, #520]	; (80030b0 <RI_SetRegCommandParser+0x2fc>)
 8002ea6:	1d21      	adds	r1, r4, #4
 8002ea8:	f005 ff88 	bl	8008dbc <MCPA_cfgLog>
 8002eac:	1bed      	subs	r5, r5, r7
          }
          break;
 8002eae:	4b7f      	ldr	r3, [pc, #508]	; (80030ac <RI_SetRegCommandParser+0x2f8>)
 8002eb0:	44b8      	add	r8, r7
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 8002eb2:	4602      	mov	r2, r0
          break;
 8002eb4:	b2ad      	uxth	r5, r5
 8002eb6:	e7c5      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
 8002eb8:	f5b2 7fb4 	cmp.w	r2, #360	; 0x168
 8002ebc:	f000 81d2 	beq.w	8003264 <RI_SetRegCommandParser+0x4b0>
 8002ec0:	d904      	bls.n	8002ecc <RI_SetRegCommandParser+0x118>
            currComp.d = *((uint16_t *) &rawData[2]);
            MCI_SetCurrentReferences(pMCI,currComp);
          }
          break;
        default:
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002ec2:	1bed      	subs	r5, r5, r7
 8002ec4:	b2ad      	uxth	r5, r5
 8002ec6:	44b8      	add	r8, r7
 8002ec8:	2205      	movs	r2, #5
 8002eca:	e7bb      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
 8002ecc:	2aa8      	cmp	r2, #168	; 0xa8
 8002ece:	f040 8178 	bne.w	80031c2 <RI_SetRegCommandParser+0x40e>
 8002ed2:	1bed      	subs	r5, r5, r7
 8002ed4:	b2ad      	uxth	r5, r5
 8002ed6:	44b8      	add	r8, r7
          retVal = MCP_ERROR_RO_REG;
 8002ed8:	2204      	movs	r2, #4
 8002eda:	e7b3      	b.n	8002e44 <RI_SetRegCommandParser+0x90>

uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, uint16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  *size= 1 ; /* /0 is the min String size */
  while ((*srcString != 0) && (*size < maxSize) )
 8002edc:	78a2      	ldrb	r2, [r4, #2]
 8002ede:	2a00      	cmp	r2, #0
 8002ee0:	f000 81e7 	beq.w	80032b2 <RI_SetRegCommandParser+0x4fe>
 8002ee4:	2d01      	cmp	r5, #1
 8002ee6:	f240 817d 	bls.w	80031e4 <RI_SetRegCommandParser+0x430>
 8002eea:	3403      	adds	r4, #3
  *size= 1 ; /* /0 is the min String size */
 8002eec:	2201      	movs	r2, #1
 8002eee:	e002      	b.n	8002ef6 <RI_SetRegCommandParser+0x142>
  while ((*srcString != 0) && (*size < maxSize) )
 8002ef0:	4295      	cmp	r5, r2
 8002ef2:	f000 816c 	beq.w	80031ce <RI_SetRegCommandParser+0x41a>
  {
    *destString = *srcString ;
    srcString = srcString+1;
 8002ef6:	4621      	mov	r1, r4
  while ((*srcString != 0) && (*size < maxSize) )
 8002ef8:	f814 0b01 	ldrb.w	r0, [r4], #1
    destString = destString+1;
    *size=*size+1;
 8002efc:	3201      	adds	r2, #1
 8002efe:	b292      	uxth	r2, r2
  while ((*srcString != 0) && (*size < maxSize) )
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d1f5      	bne.n	8002ef0 <RI_SetRegCommandParser+0x13c>
 8002f04:	4610      	mov	r0, r2
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *destString = 0;
 8002f06:	1aad      	subs	r5, r5, r2
 8002f08:	2200      	movs	r2, #0
 8002f0a:	700a      	strb	r2, [r1, #0]
 8002f0c:	b2ad      	uxth	r5, r5
 8002f0e:	4480      	add	r8, r0
      retVal = MCP_ERROR_RO_REG;
 8002f10:	2204      	movs	r2, #4
 8002f12:	e797      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
    uint16_t regdata16 = *(uint16_t *)data;
 8002f14:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 8002f18:	8861      	ldrh	r1, [r4, #2]
    switch (regID)
 8002f1a:	f000 8216 	beq.w	800334a <RI_SetRegCommandParser+0x596>
 8002f1e:	f200 8082 	bhi.w	8003026 <RI_SetRegCommandParser+0x272>
 8002f22:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 8002f26:	f000 81c8 	beq.w	80032ba <RI_SetRegCommandParser+0x506>
 8002f2a:	d969      	bls.n	8003000 <RI_SetRegCommandParser+0x24c>
 8002f2c:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 8002f30:	f000 8204 	beq.w	800333c <RI_SetRegCommandParser+0x588>
 8002f34:	f240 80c4 	bls.w	80030c0 <RI_SetRegCommandParser+0x30c>
 8002f38:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 8002f3c:	d05a      	beq.n	8002ff4 <RI_SetRegCommandParser+0x240>
 8002f3e:	d950      	bls.n	8002fe2 <RI_SetRegCommandParser+0x22e>
 8002f40:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 8002f44:	f040 80ab 	bne.w	800309e <RI_SetRegCommandParser+0x2ea>
        currComp = MCI_GetIqdref(pMCI);
 8002f48:	4630      	mov	r0, r6
 8002f4a:	9103      	str	r1, [sp, #12]
 8002f4c:	f7ff f85e 	bl	800200c <MCI_GetIqdref>
        currComp.q = (int16_t)regdata16;
 8002f50:	9903      	ldr	r1, [sp, #12]
        currComp = MCI_GetIqdref(pMCI);
 8002f52:	9005      	str	r0, [sp, #20]
        currComp.q = (int16_t)regdata16;
 8002f54:	f8ad 1014 	strh.w	r1, [sp, #20]
        MCI_SetCurrentReferences(pMCI,currComp);
 8002f58:	9905      	ldr	r1, [sp, #20]
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	f7fe ffb0 	bl	8001ec0 <MCI_SetCurrentReferences>
      break;
 8002f60:	1f3d      	subs	r5, r7, #4
 8002f62:	4b52      	ldr	r3, [pc, #328]	; (80030ac <RI_SetRegCommandParser+0x2f8>)
 8002f64:	f104 0804 	add.w	r8, r4, #4
 8002f68:	b2ad      	uxth	r5, r5
  uint8_t retVal = MCP_CMD_OK;
 8002f6a:	2200      	movs	r2, #0
      break;
 8002f6c:	e76a      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
    switch (regID)
 8002f6e:	2a48      	cmp	r2, #72	; 0x48
 8002f70:	f000 8138 	beq.w	80031e4 <RI_SetRegCommandParser+0x430>
 8002f74:	2a88      	cmp	r2, #136	; 0x88
 8002f76:	f000 8150 	beq.w	800321a <RI_SetRegCommandParser+0x466>
      retVal = MCP_ERROR_UNKNOWN_REG;
 8002f7a:	1efd      	subs	r5, r7, #3
 8002f7c:	b2ad      	uxth	r5, r5
 8002f7e:	f104 0803 	add.w	r8, r4, #3
 8002f82:	2205      	movs	r2, #5
 8002f84:	e75e      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
    switch (regID)
 8002f86:	2a98      	cmp	r2, #152	; 0x98
 8002f88:	f000 8134 	beq.w	80031f4 <RI_SetRegCommandParser+0x440>
 8002f8c:	f240 8101 	bls.w	8003192 <RI_SetRegCommandParser+0x3de>
 8002f90:	f5b2 7fac 	cmp.w	r2, #344	; 0x158
 8002f94:	f000 80a8 	beq.w	80030e8 <RI_SetRegCommandParser+0x334>
 8002f98:	f240 80a0 	bls.w	80030dc <RI_SetRegCommandParser+0x328>
 8002f9c:	f5b2 7fcc 	cmp.w	r2, #408	; 0x198
 8002fa0:	f000 80a2 	beq.w	80030e8 <RI_SetRegCommandParser+0x334>
      retVal = MCP_ERROR_UNKNOWN_REG;
 8002fa4:	1fbd      	subs	r5, r7, #6
 8002fa6:	b2ad      	uxth	r5, r5
 8002fa8:	f104 0806 	add.w	r8, r4, #6
 8002fac:	2205      	movs	r2, #5
 8002fae:	e749      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
         retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002fb0:	2208      	movs	r2, #8
}
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	b007      	add	sp, #28
 8002fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     if (number_of_item == 1 && rxLength == 0)
 8002fba:	2f00      	cmp	r7, #0
 8002fbc:	f47f af49 	bne.w	8002e52 <RI_SetRegCommandParser+0x9e>
  if (retVal == MCP_CMD_OK)
 8002fc0:	2a00      	cmp	r2, #0
 8002fc2:	d1f6      	bne.n	8002fb2 <RI_SetRegCommandParser+0x1fe>
    pHandle->txLength = 0;
 8002fc4:	2200      	movs	r2, #0
}
 8002fc6:	4610      	mov	r0, r2
    pHandle->txLength = 0;
 8002fc8:	f8aa 200e 	strh.w	r2, [sl, #14]
}
 8002fcc:	b007      	add	sp, #28
 8002fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002fd2:	2a07      	cmp	r2, #7
 8002fd4:	f040 80ee 	bne.w	80031b4 <RI_SetRegCommandParser+0x400>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002fd8:	2201      	movs	r2, #1
}
 8002fda:	4610      	mov	r0, r2
 8002fdc:	b007      	add	sp, #28
 8002fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe2:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
 8002fe6:	d005      	beq.n	8002ff4 <RI_SetRegCommandParser+0x240>
 8002fe8:	f240 80a8 	bls.w	800313c <RI_SetRegCommandParser+0x388>
 8002fec:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 8002ff0:	f040 8092 	bne.w	8003118 <RI_SetRegCommandParser+0x364>
     break;
 8002ff4:	1f3d      	subs	r5, r7, #4
 8002ff6:	b2ad      	uxth	r5, r5
 8002ff8:	f104 0804 	add.w	r8, r4, #4
      retVal = MCP_ERROR_RO_REG;
 8002ffc:	2204      	movs	r2, #4
     break;
 8002ffe:	e721      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
 8003000:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 8003004:	f000 8181 	beq.w	800330a <RI_SetRegCommandParser+0x556>
 8003008:	d928      	bls.n	800305c <RI_SetRegCommandParser+0x2a8>
 800300a:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800300e:	f000 8169 	beq.w	80032e4 <RI_SetRegCommandParser+0x530>
 8003012:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 8003016:	d143      	bne.n	80030a0 <RI_SetRegCommandParser+0x2ec>
      PID_SetKI(pPIDIq[motorID], regdata16);
 8003018:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <RI_SetRegCommandParser+0x300>)
 800301a:	b209      	sxth	r1, r1
 800301c:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 8003020:	f005 ffd0 	bl	8008fc4 <PID_SetKI>
     break;
 8003024:	e79c      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
 8003026:	f241 5510 	movw	r5, #5392	; 0x1510
 800302a:	42aa      	cmp	r2, r5
 800302c:	f000 817a 	beq.w	8003324 <RI_SetRegCommandParser+0x570>
 8003030:	d960      	bls.n	80030f4 <RI_SetRegCommandParser+0x340>
 8003032:	f241 50d0 	movw	r0, #5584	; 0x15d0
 8003036:	4282      	cmp	r2, r0
 8003038:	f000 817a 	beq.w	8003330 <RI_SetRegCommandParser+0x57c>
 800303c:	d91a      	bls.n	8003074 <RI_SetRegCommandParser+0x2c0>
 800303e:	f241 6010 	movw	r0, #5648	; 0x1610
 8003042:	4282      	cmp	r2, r0
 8003044:	f000 8155 	beq.w	80032f2 <RI_SetRegCommandParser+0x53e>
 8003048:	f241 6050 	movw	r0, #5712	; 0x1650
 800304c:	4282      	cmp	r2, r0
 800304e:	d127      	bne.n	80030a0 <RI_SetRegCommandParser+0x2ec>
      PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8003050:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <RI_SetRegCommandParser+0x300>)
 8003052:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 8003056:	f005 ffeb 	bl	8009030 <PID_SetKDDivisorPOW2>
 800305a:	e781      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
 800305c:	2a90      	cmp	r2, #144	; 0x90
 800305e:	f000 813a 	beq.w	80032d6 <RI_SetRegCommandParser+0x522>
 8003062:	2ad0      	cmp	r2, #208	; 0xd0
 8003064:	d11c      	bne.n	80030a0 <RI_SetRegCommandParser+0x2ec>
      PID_SetKI(pPIDSpeed[motorID], regdata16);
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <RI_SetRegCommandParser+0x304>)
 8003068:	b209      	sxth	r1, r1
 800306a:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 800306e:	f005 ffa9 	bl	8008fc4 <PID_SetKI>
      break;
 8003072:	e775      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
 8003074:	f241 5050 	movw	r0, #5456	; 0x1550
 8003078:	4282      	cmp	r2, r0
 800307a:	f000 8140 	beq.w	80032fe <RI_SetRegCommandParser+0x54a>
 800307e:	f241 5090 	movw	r0, #5520	; 0x1590
 8003082:	4282      	cmp	r2, r0
 8003084:	d10c      	bne.n	80030a0 <RI_SetRegCommandParser+0x2ec>
      PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <RI_SetRegCommandParser+0x308>)
 8003088:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800308c:	f005 ffd0 	bl	8009030 <PID_SetKDDivisorPOW2>
      break;
 8003090:	1f3d      	subs	r5, r7, #4
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <RI_SetRegCommandParser+0x2f8>)
 8003094:	b2ad      	uxth	r5, r5
 8003096:	f104 0804 	add.w	r8, r4, #4
  uint8_t retVal = MCP_CMD_OK;
 800309a:	2200      	movs	r2, #0
      break;
 800309c:	e6d2      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
 800309e:	d942      	bls.n	8003126 <RI_SetRegCommandParser+0x372>
      retVal = MCP_ERROR_UNKNOWN_REG;
 80030a0:	1f3d      	subs	r5, r7, #4
 80030a2:	b2ad      	uxth	r5, r5
 80030a4:	f104 0804 	add.w	r8, r4, #4
 80030a8:	2205      	movs	r2, #5
 80030aa:	e6cb      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
 80030ac:	20000b88 	.word	0x20000b88
 80030b0:	200004dc 	.word	0x200004dc
 80030b4:	2000045c 	.word	0x2000045c
 80030b8:	20000600 	.word	0x20000600
 80030bc:	20000458 	.word	0x20000458
 80030c0:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 80030c4:	f000 8100 	beq.w	80032c8 <RI_SetRegCommandParser+0x514>
 80030c8:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 80030cc:	d1e8      	bne.n	80030a0 <RI_SetRegCommandParser+0x2ec>
      PID_SetKI(pPIDId[motorID], regdata16);
 80030ce:	4ba8      	ldr	r3, [pc, #672]	; (8003370 <RI_SetRegCommandParser+0x5bc>)
 80030d0:	b209      	sxth	r1, r1
 80030d2:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80030d6:	f005 ff75 	bl	8008fc4 <PID_SetKI>
     break;
 80030da:	e7d9      	b.n	8003090 <RI_SetRegCommandParser+0x2dc>
 80030dc:	2ad8      	cmp	r2, #216	; 0xd8
 80030de:	d003      	beq.n	80030e8 <RI_SetRegCommandParser+0x334>
 80030e0:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 80030e4:	f47f af5e 	bne.w	8002fa4 <RI_SetRegCommandParser+0x1f0>
 80030e8:	1fbd      	subs	r5, r7, #6
 80030ea:	b2ad      	uxth	r5, r5
 80030ec:	f104 0806 	add.w	r8, r4, #6
      retVal = MCP_ERROR_RO_REG;
 80030f0:	2204      	movs	r2, #4
 80030f2:	e6a7      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
 80030f4:	f241 4550 	movw	r5, #5200	; 0x1450
 80030f8:	42aa      	cmp	r2, r5
 80030fa:	f000 810d 	beq.w	8003318 <RI_SetRegCommandParser+0x564>
 80030fe:	d923      	bls.n	8003148 <RI_SetRegCommandParser+0x394>
 8003100:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8003104:	f241 4290 	movw	r2, #5264	; 0x1490
 8003108:	4290      	cmp	r0, r2
 800310a:	d1c9      	bne.n	80030a0 <RI_SetRegCommandParser+0x2ec>
      PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800310c:	4a99      	ldr	r2, [pc, #612]	; (8003374 <RI_SetRegCommandParser+0x5c0>)
      PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 800310e:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 8003112:	f005 ff8d 	bl	8009030 <PID_SetKDDivisorPOW2>
 8003116:	e723      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
 8003118:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 800311c:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 8003120:	f43f af68 	beq.w	8002ff4 <RI_SetRegCommandParser+0x240>
 8003124:	e7bc      	b.n	80030a0 <RI_SetRegCommandParser+0x2ec>
 8003126:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 800312a:	f43f af63 	beq.w	8002ff4 <RI_SetRegCommandParser+0x240>
 800312e:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8003132:	f5b0 6f09 	cmp.w	r0, #2192	; 0x890
 8003136:	f43f af5d 	beq.w	8002ff4 <RI_SetRegCommandParser+0x240>
 800313a:	e7b1      	b.n	80030a0 <RI_SetRegCommandParser+0x2ec>
 800313c:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8003140:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 8003144:	d1ac      	bne.n	80030a0 <RI_SetRegCommandParser+0x2ec>
 8003146:	e755      	b.n	8002ff4 <RI_SetRegCommandParser+0x240>
 8003148:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 800314c:	d003      	beq.n	8003156 <RI_SetRegCommandParser+0x3a2>
 800314e:	d912      	bls.n	8003176 <RI_SetRegCommandParser+0x3c2>
 8003150:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 8003154:	d105      	bne.n	8003162 <RI_SetRegCommandParser+0x3ae>
 8003156:	1f3d      	subs	r5, r7, #4
 8003158:	b2ad      	uxth	r5, r5
 800315a:	f104 0804 	add.w	r8, r4, #4
  uint8_t retVal = MCP_CMD_OK;
 800315e:	2200      	movs	r2, #0
 8003160:	e670      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
 8003162:	d39d      	bcc.n	80030a0 <RI_SetRegCommandParser+0x2ec>
 8003164:	f5b2 6f6d 	cmp.w	r2, #3792	; 0xed0
 8003168:	f43f af44 	beq.w	8002ff4 <RI_SetRegCommandParser+0x240>
 800316c:	f5b2 6f71 	cmp.w	r2, #3856	; 0xf10
 8003170:	f43f af40 	beq.w	8002ff4 <RI_SetRegCommandParser+0x240>
 8003174:	e794      	b.n	80030a0 <RI_SetRegCommandParser+0x2ec>
 8003176:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
 800317a:	f43f af3b 	beq.w	8002ff4 <RI_SetRegCommandParser+0x240>
 800317e:	d90e      	bls.n	800319e <RI_SetRegCommandParser+0x3ea>
 8003180:	f5b2 6f2d 	cmp.w	r2, #2768	; 0xad0
 8003184:	f43f af36 	beq.w	8002ff4 <RI_SetRegCommandParser+0x240>
 8003188:	f5b2 6f31 	cmp.w	r2, #2832	; 0xb10
 800318c:	f43f af32 	beq.w	8002ff4 <RI_SetRegCommandParser+0x240>
 8003190:	e786      	b.n	80030a0 <RI_SetRegCommandParser+0x2ec>
 8003192:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8003196:	2818      	cmp	r0, #24
 8003198:	f47f af04 	bne.w	8002fa4 <RI_SetRegCommandParser+0x1f0>
 800319c:	e7a4      	b.n	80030e8 <RI_SetRegCommandParser+0x334>
 800319e:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 80031a2:	f5b0 6f21 	cmp.w	r0, #2576	; 0xa10
 80031a6:	f43f af25 	beq.w	8002ff4 <RI_SetRegCommandParser+0x240>
 80031aa:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 80031ae:	f43f af21 	beq.w	8002ff4 <RI_SetRegCommandParser+0x240>
 80031b2:	e775      	b.n	80030a0 <RI_SetRegCommandParser+0x2ec>
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80031b4:	2a0a      	cmp	r2, #10
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80031b6:	f04f 0201 	mov.w	r2, #1
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80031ba:	f43f aefa 	beq.w	8002fb2 <RI_SetRegCommandParser+0x1fe>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80031be:	9202      	str	r2, [sp, #8]
 80031c0:	e659      	b.n	8002e76 <RI_SetRegCommandParser+0xc2>
 80031c2:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 80031c6:	2828      	cmp	r0, #40	; 0x28
 80031c8:	f43f ae83 	beq.w	8002ed2 <RI_SetRegCommandParser+0x11e>
 80031cc:	e679      	b.n	8002ec2 <RI_SetRegCommandParser+0x10e>
     if (number_of_item == 1 && rxLength == 0)
 80031ce:	9a00      	ldr	r2, [sp, #0]
 80031d0:	444a      	add	r2, r9
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	2a01      	cmp	r2, #1
 80031d6:	44a8      	add	r8, r5
      retVal = MCP_ERROR_RO_REG;
 80031d8:	f04f 0204 	mov.w	r2, #4
     if (number_of_item == 1 && rxLength == 0)
 80031dc:	f43f aee9 	beq.w	8002fb2 <RI_SetRegCommandParser+0x1fe>
     rxLength = (int16_t) (rxLength - size);
 80031e0:	2700      	movs	r7, #0
 80031e2:	e636      	b.n	8002e52 <RI_SetRegCommandParser+0x9e>
 80031e4:	1efd      	subs	r5, r7, #3
 80031e6:	b2ad      	uxth	r5, r5
 80031e8:	f104 0803 	add.w	r8, r4, #3
      retVal = MCP_ERROR_RO_REG;
 80031ec:	2204      	movs	r2, #4
 80031ee:	e629      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 80031f0:	220a      	movs	r2, #10
 80031f2:	e627      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((regdata32*SPEED_UNIT)/_RPM),0);
 80031f4:	f8d4 2002 	ldr.w	r2, [r4, #2]
 80031f8:	4b5f      	ldr	r3, [pc, #380]	; (8003378 <RI_SetRegCommandParser+0x5c4>)
 80031fa:	fb83 3102 	smull	r3, r1, r3, r2
 80031fe:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8003202:	4630      	mov	r0, r6
 8003204:	2200      	movs	r2, #0
 8003206:	b209      	sxth	r1, r1
 8003208:	1fbd      	subs	r5, r7, #6
 800320a:	f7fe fe43 	bl	8001e94 <MCI_ExecSpeedRamp>
      break;
 800320e:	f104 0806 	add.w	r8, r4, #6
 8003212:	4b5a      	ldr	r3, [pc, #360]	; (800337c <RI_SetRegCommandParser+0x5c8>)
 8003214:	b2ad      	uxth	r5, r5
  uint8_t retVal = MCP_CMD_OK;
 8003216:	2200      	movs	r2, #0
      break;
 8003218:	e614      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
    uint8_t regdata8 = *data;
 800321a:	78a2      	ldrb	r2, [r4, #2]
        if ((STC_Modality_t)regdata8 == STC_TORQUE_MODE)
 800321c:	b13a      	cbz	r2, 800322e <RI_SetRegCommandParser+0x47a>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 800321e:	2a01      	cmp	r2, #1
 8003220:	d038      	beq.n	8003294 <RI_SetRegCommandParser+0x4e0>
 8003222:	1efd      	subs	r5, r7, #3
 8003224:	b2ad      	uxth	r5, r5
 8003226:	f104 0803 	add.w	r8, r4, #3
  uint8_t retVal = MCP_CMD_OK;
 800322a:	2200      	movs	r2, #0
 800322c:	e60a      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
          MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 800322e:	4630      	mov	r0, r6
 8003230:	9203      	str	r2, [sp, #12]
 8003232:	f7fe ff15 	bl	8002060 <MCI_GetTeref>
 8003236:	1efd      	subs	r5, r7, #3
 8003238:	9a03      	ldr	r2, [sp, #12]
 800323a:	4601      	mov	r1, r0
 800323c:	4630      	mov	r0, r6
 800323e:	f7fe fe35 	bl	8001eac <MCI_ExecTorqueRamp>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 8003242:	f104 0803 	add.w	r8, r4, #3
 8003246:	9a03      	ldr	r2, [sp, #12]
 8003248:	4b4c      	ldr	r3, [pc, #304]	; (800337c <RI_SetRegCommandParser+0x5c8>)
 800324a:	b2ad      	uxth	r5, r5
 800324c:	e5fa      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
            currComp.q = *((uint16_t *) rawData);
 800324e:	6861      	ldr	r1, [r4, #4]
 8003250:	9105      	str	r1, [sp, #20]
            MCI_SetCurrentReferences(pMCI,currComp);
 8003252:	4630      	mov	r0, r6
 8003254:	1bed      	subs	r5, r5, r7
 8003256:	f7fe fe33 	bl	8001ec0 <MCI_SetCurrentReferences>
          break;
 800325a:	b2ad      	uxth	r5, r5
 800325c:	4b47      	ldr	r3, [pc, #284]	; (800337c <RI_SetRegCommandParser+0x5c8>)
 800325e:	44b8      	add	r8, r7
  uint8_t retVal = MCP_CMD_OK;
 8003260:	2200      	movs	r2, #0
          break;
 8003262:	e5ef      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
            MCI_ExecSpeedRamp(pMCI,(int16_t)((rpm*SPEED_UNIT)/_RPM),duration);
 8003264:	6860      	ldr	r0, [r4, #4]
 8003266:	4b44      	ldr	r3, [pc, #272]	; (8003378 <RI_SetRegCommandParser+0x5c4>)
 8003268:	8922      	ldrh	r2, [r4, #8]
 800326a:	fb83 3100 	smull	r3, r1, r3, r0
 800326e:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8003272:	b209      	sxth	r1, r1
 8003274:	4630      	mov	r0, r6
 8003276:	f7fe fe0d 	bl	8001e94 <MCI_ExecSpeedRamp>
          break;
 800327a:	1bed      	subs	r5, r5, r7
 800327c:	4b3f      	ldr	r3, [pc, #252]	; (800337c <RI_SetRegCommandParser+0x5c8>)
 800327e:	44b8      	add	r8, r7
 8003280:	b2ad      	uxth	r5, r5
  uint8_t retVal = MCP_CMD_OK;
 8003282:	2200      	movs	r2, #0
          break;
 8003284:	e5de      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
            MCI_ExecTorqueRamp(pMCI,torque,duration);
 8003286:	8922      	ldrh	r2, [r4, #8]
 8003288:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800328c:	4630      	mov	r0, r6
 800328e:	f7fe fe0d 	bl	8001eac <MCI_ExecTorqueRamp>
 8003292:	e7f2      	b.n	800327a <RI_SetRegCommandParser+0x4c6>
          MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8003294:	4630      	mov	r0, r6
 8003296:	f7fe fe8b 	bl	8001fb0 <MCI_GetMecSpeedRefUnit>
 800329a:	1efd      	subs	r5, r7, #3
 800329c:	4601      	mov	r1, r0
 800329e:	2200      	movs	r2, #0
 80032a0:	4630      	mov	r0, r6
 80032a2:	f7fe fdf7 	bl	8001e94 <MCI_ExecSpeedRamp>
 80032a6:	f104 0803 	add.w	r8, r4, #3
 80032aa:	4b34      	ldr	r3, [pc, #208]	; (800337c <RI_SetRegCommandParser+0x5c8>)
 80032ac:	b2ad      	uxth	r5, r5
  uint8_t retVal = MCP_CMD_OK;
 80032ae:	2200      	movs	r2, #0
 80032b0:	e5c8      	b.n	8002e44 <RI_SetRegCommandParser+0x90>
  while ((*srcString != 0) && (*size < maxSize) )
 80032b2:	2001      	movs	r0, #1
  *size= 1 ; /* /0 is the min String size */
 80032b4:	4602      	mov	r2, r0
  while ((*srcString != 0) && (*size < maxSize) )
 80032b6:	4641      	mov	r1, r8
 80032b8:	e625      	b.n	8002f06 <RI_SetRegCommandParser+0x152>
      PID_SetKD(pPIDIq[motorID], regdata16);
 80032ba:	4a31      	ldr	r2, [pc, #196]	; (8003380 <RI_SetRegCommandParser+0x5cc>)
 80032bc:	b209      	sxth	r1, r1
 80032be:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 80032c2:	f005 fead 	bl	8009020 <PID_SetKD>
     break;
 80032c6:	e64b      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
      PID_SetKP(pPIDId[motorID], regdata16);
 80032c8:	4b29      	ldr	r3, [pc, #164]	; (8003370 <RI_SetRegCommandParser+0x5bc>)
 80032ca:	b209      	sxth	r1, r1
 80032cc:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80032d0:	f005 fe76 	bl	8008fc0 <PID_SetKP>
     break;
 80032d4:	e6dc      	b.n	8003090 <RI_SetRegCommandParser+0x2dc>
      PID_SetKP(pPIDSpeed[motorID], regdata16);
 80032d6:	4a27      	ldr	r2, [pc, #156]	; (8003374 <RI_SetRegCommandParser+0x5c0>)
 80032d8:	b209      	sxth	r1, r1
 80032da:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 80032de:	f005 fe6f 	bl	8008fc0 <PID_SetKP>
      break;
 80032e2:	e63d      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
      PID_SetKP(pPIDIq[motorID], regdata16);
 80032e4:	4a26      	ldr	r2, [pc, #152]	; (8003380 <RI_SetRegCommandParser+0x5cc>)
 80032e6:	b209      	sxth	r1, r1
 80032e8:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 80032ec:	f005 fe68 	bl	8008fc0 <PID_SetKP>
     break;
 80032f0:	e636      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
      PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 80032f2:	4a23      	ldr	r2, [pc, #140]	; (8003380 <RI_SetRegCommandParser+0x5cc>)
 80032f4:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 80032f8:	f005 fe7e 	bl	8008ff8 <PID_SetKIDivisorPOW2>
      break;
 80032fc:	e630      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
      PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 80032fe:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <RI_SetRegCommandParser+0x5bc>)
 8003300:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8003304:	f005 fe78 	bl	8008ff8 <PID_SetKIDivisorPOW2>
      break;
 8003308:	e6c2      	b.n	8003090 <RI_SetRegCommandParser+0x2dc>
      PID_SetKD(pPIDSpeed[motorID], regdata16);
 800330a:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <RI_SetRegCommandParser+0x5c0>)
 800330c:	b209      	sxth	r1, r1
 800330e:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 8003312:	f005 fe85 	bl	8009020 <PID_SetKD>
     break;
 8003316:	e623      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
      PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <RI_SetRegCommandParser+0x5c0>)
 800331a:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 800331e:	f005 fe5f 	bl	8008fe0 <PID_SetKPDivisorPOW2>
     break;
 8003322:	e61d      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
      PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <RI_SetRegCommandParser+0x5bc>)
 8003326:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800332a:	f005 fe59 	bl	8008fe0 <PID_SetKPDivisorPOW2>
      break;
 800332e:	e6af      	b.n	8003090 <RI_SetRegCommandParser+0x2dc>
      PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8003330:	4a13      	ldr	r2, [pc, #76]	; (8003380 <RI_SetRegCommandParser+0x5cc>)
 8003332:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 8003336:	f005 fe53 	bl	8008fe0 <PID_SetKPDivisorPOW2>
      break;
 800333a:	e611      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
      PID_SetKD(pPIDId[motorID], regdata16);
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <RI_SetRegCommandParser+0x5bc>)
 800333e:	b209      	sxth	r1, r1
 8003340:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8003344:	f005 fe6c 	bl	8009020 <PID_SetKD>
     break;
 8003348:	e6a2      	b.n	8003090 <RI_SetRegCommandParser+0x2dc>
        currComp = MCI_GetIqdref(pMCI);
 800334a:	4630      	mov	r0, r6
 800334c:	9103      	str	r1, [sp, #12]
 800334e:	f7fe fe5d 	bl	800200c <MCI_GetIqdref>
        currComp.d = regdata16;
 8003352:	9903      	ldr	r1, [sp, #12]
        currComp = MCI_GetIqdref(pMCI);
 8003354:	9005      	str	r0, [sp, #20]
        currComp.d = regdata16;
 8003356:	f8ad 1016 	strh.w	r1, [sp, #22]
        MCI_SetCurrentReferences(pMCI,currComp);
 800335a:	9905      	ldr	r1, [sp, #20]
 800335c:	4630      	mov	r0, r6
 800335e:	f7fe fdaf 	bl	8001ec0 <MCI_SetCurrentReferences>
      break;
 8003362:	e5fd      	b.n	8002f60 <RI_SetRegCommandParser+0x1ac>
 8003364:	9a02      	ldr	r2, [sp, #8]
  if (retVal == MCP_CMD_OK)
 8003366:	2a00      	cmp	r2, #0
 8003368:	f43f ae2c 	beq.w	8002fc4 <RI_SetRegCommandParser+0x210>
 800336c:	e621      	b.n	8002fb2 <RI_SetRegCommandParser+0x1fe>
 800336e:	bf00      	nop
 8003370:	20000458 	.word	0x20000458
 8003374:	20000600 	.word	0x20000600
 8003378:	2aaaaaab 	.word	0x2aaaaaab
 800337c:	20000b88 	.word	0x20000b88
 8003380:	2000045c 	.word	0x2000045c

08003384 <RI_GetRegCommandParser>:
{
 8003384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8003388:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
  uint16_t txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* 1 Byte must be available for MCP CMD status*/
 800338c:	6803      	ldr	r3, [r0, #0]
  uint16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800338e:	f1aa 0a02 	sub.w	sl, sl, #2
  pHandle->txLength = 0;
 8003392:	f04f 0e00 	mov.w	lr, #0
  uint16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8003396:	fa1f fa8a 	uxth.w	sl, sl
  uint16_t txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* 1 Byte must be available for MCP CMD status*/
 800339a:	899c      	ldrh	r4, [r3, #12]
  pHandle->txLength = 0;
 800339c:	f8a0 e00e 	strh.w	lr, [r0, #14]
  uint8_t * txData = pHandle->txBuffer;
 80033a0:	e9d0 1701 	ldrd	r1, r7, [r0, #4]
{
 80033a4:	b08f      	sub	sp, #60	; 0x3c
  while (rxLength > 0)
 80033a6:	f1ba 0f00 	cmp.w	sl, #0
 80033aa:	f000 82b9 	beq.w	8003920 <RI_GetRegCommandParser+0x59c>
 80033ae:	3c01      	subs	r4, #1
 80033b0:	f101 0902 	add.w	r9, r1, #2
 80033b4:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 80037c4 <RI_GetRegCommandParser+0x440>
 80033b8:	4680      	mov	r8, r0
 80033ba:	b2a4      	uxth	r4, r4
  uint8_t * rxData = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80033bc:	464e      	mov	r6, r9
     retVal = RI_GetReg (*dataElementID,txData, &size, txSyncFreeSpace);
 80033be:	f836 3b02 	ldrh.w	r3, [r6], #2
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 80033c2:	f003 0207 	and.w	r2, r3, #7
 80033c6:	3a01      	subs	r2, #1
  MCI_Handle_t * pMCI = &Mci[motorID];
 80033c8:	b2d0      	uxtb	r0, r2
 80033ca:	f003 0c38 	and.w	ip, r3, #56	; 0x38
 80033ce:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
  uint16_t regID = dataID & REG_MASK;
 80033d2:	f023 0307 	bic.w	r3, r3, #7
 80033d6:	f1ac 0c08 	sub.w	ip, ip, #8
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 80033da:	4602      	mov	r2, r0
  MCI_Handle_t * pMCI = &Mci[motorID];
 80033dc:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
  uint16_t regID = dataID & REG_MASK;
 80033e0:	b29b      	uxth	r3, r3
  switch (typeID)
 80033e2:	f1bc 0f20 	cmp.w	ip, #32
 80033e6:	d812      	bhi.n	800340e <RI_GetRegCommandParser+0x8a>
 80033e8:	e8df f00c 	tbb	[pc, ip]
 80033ec:	111111a7 	.word	0x111111a7
 80033f0:	11111111 	.word	0x11111111
 80033f4:	1111116a 	.word	0x1111116a
 80033f8:	11111111 	.word	0x11111111
 80033fc:	111111b2 	.word	0x111111b2
 8003400:	11111111 	.word	0x11111111
 8003404:	1111112c 	.word	0x1111112c
 8003408:	11111111 	.word	0x11111111
 800340c:	15          	.byte	0x15
 800340d:	00          	.byte	0x00
  MCI_Handle_t * pMCI = &Mci[motorID];
 800340e:	2007      	movs	r0, #7
}
 8003410:	b00f      	add	sp, #60	; 0x3c
 8003412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uint8_t * rawData = data+2;
 8003416:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800341a:	f107 0002 	add.w	r0, r7, #2
      switch (regID)
 800341e:	f000 8269 	beq.w	80038f4 <RI_GetRegCommandParser+0x570>
 8003422:	f200 80ba 	bhi.w	800359a <RI_GetRegCommandParser+0x216>
 8003426:	2b68      	cmp	r3, #104	; 0x68
 8003428:	f000 825d 	beq.w	80038e6 <RI_GetRegCommandParser+0x562>
 800342c:	2ba8      	cmp	r3, #168	; 0xa8
 800342e:	f040 80a5 	bne.w	800357c <RI_GetRegCommandParser+0x1f8>
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8003432:	230e      	movs	r3, #14
        if ((*rawSize) +2  > freeSpace)
 8003434:	2c0f      	cmp	r4, #15
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8003436:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8003438:	f200 8245 	bhi.w	80038c6 <RI_GetRegCommandParser+0x542>
        retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800343c:	2008      	movs	r0, #8
}
 800343e:	b00f      	add	sp, #60	; 0x3c
 8003440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (regID)
 8003444:	2ba0      	cmp	r3, #160	; 0xa0
 8003446:	f000 8210 	beq.w	800386a <RI_GetRegCommandParser+0x4e6>
 800344a:	f200 80c4 	bhi.w	80035d6 <RI_GetRegCommandParser+0x252>
 800344e:	2b20      	cmp	r3, #32
 8003450:	f000 81fc 	beq.w	800384c <RI_GetRegCommandParser+0x4c8>
 8003454:	2b60      	cmp	r3, #96	; 0x60
 8003456:	d179      	bne.n	800354c <RI_GetRegCommandParser+0x1c8>
  while ((*srcString != 0) && (*size < maxSize) )
 8003458:	4dd1      	ldr	r5, [pc, #836]	; (80037a0 <RI_GetRegCommandParser+0x41c>)
 800345a:	7828      	ldrb	r0, [r5, #0]
 800345c:	2800      	cmp	r0, #0
 800345e:	f000 825a 	beq.w	8003916 <RI_GetRegCommandParser+0x592>
 8003462:	2c01      	cmp	r4, #1
 8003464:	f240 81f4 	bls.w	8003850 <RI_GetRegCommandParser+0x4cc>
 8003468:	f1a4 0c02 	sub.w	ip, r4, #2
 800346c:	fa1f fc8c 	uxth.w	ip, ip
 8003470:	f10c 0c01 	add.w	ip, ip, #1
 8003474:	44bc      	add	ip, r7
 8003476:	463b      	mov	r3, r7
 8003478:	f1c7 0201 	rsb	r2, r7, #1
 800347c:	e002      	b.n	8003484 <RI_GetRegCommandParser+0x100>
 800347e:	4563      	cmp	r3, ip
 8003480:	f000 81e6 	beq.w	8003850 <RI_GetRegCommandParser+0x4cc>
    *destString = *srcString ;
 8003484:	f803 0b01 	strb.w	r0, [r3], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8003488:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800348c:	eb03 0e02 	add.w	lr, r3, r2
 8003490:	fa1f fe8e 	uxth.w	lr, lr
 8003494:	2800      	cmp	r0, #0
 8003496:	d1f2      	bne.n	800347e <RI_GetRegCommandParser+0xfa>
 8003498:	4675      	mov	r5, lr
    *destString = 0;
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]
       pHandle->txLength += size;
 800349e:	f8b8 000e 	ldrh.w	r0, [r8, #14]
  while (rxLength > 0)
 80034a2:	eb09 030a 	add.w	r3, r9, sl
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	b2b2      	uxth	r2, r6
       txSyncFreeSpace = txSyncFreeSpace-size;
 80034aa:	eba4 040e 	sub.w	r4, r4, lr
       pHandle->txLength += size;
 80034ae:	4470      	add	r0, lr
  while (rxLength > 0)
 80034b0:	429a      	cmp	r2, r3
       txSyncFreeSpace = txSyncFreeSpace-size;
 80034b2:	b2a4      	uxth	r4, r4
       txData = txData+size;
 80034b4:	442f      	add	r7, r5
       pHandle->txLength += size;
 80034b6:	f8a8 000e 	strh.w	r0, [r8, #14]
  while (rxLength > 0)
 80034ba:	d180      	bne.n	80033be <RI_GetRegCommandParser+0x3a>
     retVal = RI_GetReg (*dataElementID,txData, &size, txSyncFreeSpace);
 80034bc:	2000      	movs	r0, #0
 80034be:	e7a7      	b.n	8003410 <RI_GetRegCommandParser+0x8c>
      if (freeSpace >= 2 )
 80034c0:	2c01      	cmp	r4, #1
 80034c2:	d9bb      	bls.n	800343c <RI_GetRegCommandParser+0xb8>
        switch (regID)
 80034c4:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80034c8:	f000 828f 	beq.w	80039ea <RI_GetRegCommandParser+0x666>
 80034cc:	f200 80a8 	bhi.w	8003620 <RI_GetRegCommandParser+0x29c>
 80034d0:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 80034d4:	f000 8280 	beq.w	80039d8 <RI_GetRegCommandParser+0x654>
 80034d8:	d917      	bls.n	800350a <RI_GetRegCommandParser+0x186>
 80034da:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80034de:	f000 8246 	beq.w	800396e <RI_GetRegCommandParser+0x5ea>
 80034e2:	f240 80c9 	bls.w	8003678 <RI_GetRegCommandParser+0x2f4>
 80034e6:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80034ea:	f000 824a 	beq.w	8003982 <RI_GetRegCommandParser+0x5fe>
 80034ee:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80034f2:	f040 80b3 	bne.w	800365c <RI_GetRegCommandParser+0x2d8>
          *regdata16 = MCI_GetIqd(pMCI).d;
 80034f6:	4628      	mov	r0, r5
 80034f8:	f7fe fd7a 	bl	8001ff0 <MCI_GetIqd>
 80034fc:	2502      	movs	r5, #2
 80034fe:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003502:	9008      	str	r0, [sp, #32]
        *size = 2;
 8003504:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetIqd(pMCI).d;
 8003506:	803b      	strh	r3, [r7, #0]
     if (retVal == MCP_CMD_OK )
 8003508:	e7c9      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 800350a:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 800350e:	f000 8236 	beq.w	800397e <RI_GetRegCommandParser+0x5fa>
 8003512:	f240 816a 	bls.w	80037ea <RI_GetRegCommandParser+0x466>
 8003516:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 800351a:	f000 826e 	beq.w	80039fa <RI_GetRegCommandParser+0x676>
 800351e:	f240 8153 	bls.w	80037c8 <RI_GetRegCommandParser+0x444>
 8003522:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003526:	d111      	bne.n	800354c <RI_GetRegCommandParser+0x1c8>
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003528:	4b9e      	ldr	r3, [pc, #632]	; (80037a4 <RI_GetRegCommandParser+0x420>)
 800352a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800352e:	f005 fd79 	bl	8009024 <PID_GetKD>
         break;
 8003532:	2502      	movs	r5, #2
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003534:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003536:	46ae      	mov	lr, r5
         break;
 8003538:	e7b1      	b.n	800349e <RI_GetRegCommandParser+0x11a>
      if (freeSpace > 0 )
 800353a:	2c00      	cmp	r4, #0
 800353c:	f43f af7e 	beq.w	800343c <RI_GetRegCommandParser+0xb8>
        switch (regID)
 8003540:	2b48      	cmp	r3, #72	; 0x48
 8003542:	f000 8187 	beq.w	8003854 <RI_GetRegCommandParser+0x4d0>
 8003546:	2b88      	cmp	r3, #136	; 0x88
 8003548:	f000 8169 	beq.w	800381e <RI_GetRegCommandParser+0x49a>
 800354c:	2005      	movs	r0, #5
  return retVal;
 800354e:	e75f      	b.n	8003410 <RI_GetRegCommandParser+0x8c>
      if ( freeSpace >= 4)
 8003550:	2c03      	cmp	r4, #3
 8003552:	f67f af73 	bls.w	800343c <RI_GetRegCommandParser+0xb8>
        switch (regID)
 8003556:	2b58      	cmp	r3, #88	; 0x58
 8003558:	f000 81b1 	beq.w	80038be <RI_GetRegCommandParser+0x53a>
 800355c:	2b98      	cmp	r3, #152	; 0x98
 800355e:	f000 81a4 	beq.w	80038aa <RI_GetRegCommandParser+0x526>
 8003562:	2b18      	cmp	r3, #24
 8003564:	d1f2      	bne.n	800354c <RI_GetRegCommandParser+0x1c8>
          *regdataU32 = STM_GetFaultState(&STM[motorID]);
 8003566:	4b90      	ldr	r3, [pc, #576]	; (80037a8 <RI_GetRegCommandParser+0x424>)
 8003568:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800356c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003570:	f006 ff40 	bl	800a3f4 <STM_GetFaultState>
 8003574:	2504      	movs	r5, #4
 8003576:	6038      	str	r0, [r7, #0]
        *size = 4;
 8003578:	46ae      	mov	lr, r5
 800357a:	e790      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 800357c:	2b28      	cmp	r3, #40	; 0x28
 800357e:	d1e5      	bne.n	800354c <RI_GetRegCommandParser+0x1c8>
        *rawSize = sizeof(GlobalConfig_reg_t);
 8003580:	2306      	movs	r3, #6
        if ((*rawSize) +2  > freeSpace)
 8003582:	2c07      	cmp	r4, #7
        *rawSize = sizeof(GlobalConfig_reg_t);
 8003584:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8003586:	f67f af59 	bls.w	800343c <RI_GetRegCommandParser+0xb8>
          memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t) );
 800358a:	4b88      	ldr	r3, [pc, #544]	; (80037ac <RI_GetRegCommandParser+0x428>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	6002      	str	r2, [r0, #0]
 8003590:	889b      	ldrh	r3, [r3, #4]
 8003592:	8083      	strh	r3, [r0, #4]
 8003594:	2508      	movs	r5, #8
      *size = (*rawSize)+2;
 8003596:	46ae      	mov	lr, r5
 8003598:	e781      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 800359a:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 800359e:	f000 8145 	beq.w	800382c <RI_GetRegCommandParser+0x4a8>
 80035a2:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80035a6:	d1d1      	bne.n	800354c <RI_GetRegCommandParser+0x1c8>
        *rawSize = 4;
 80035a8:	2304      	movs	r3, #4
 80035aa:	803b      	strh	r3, [r7, #0]
        *iqref = MCI_GetIqdref(pMCI).q;
 80035ac:	4628      	mov	r0, r5
 80035ae:	f7fe fd2d 	bl	800200c <MCI_GetIqdref>
 80035b2:	4603      	mov	r3, r0
 80035b4:	8078      	strh	r0, [r7, #2]
        *idref = MCI_GetIqdref(pMCI).d;
 80035b6:	4628      	mov	r0, r5
        *iqref = MCI_GetIqdref(pMCI).q;
 80035b8:	9301      	str	r3, [sp, #4]
        *idref = MCI_GetIqdref(pMCI).d;
 80035ba:	f7fe fd27 	bl	800200c <MCI_GetIqdref>
      *size = (*rawSize)+2;
 80035be:	f8b7 e000 	ldrh.w	lr, [r7]
        *idref = MCI_GetIqdref(pMCI).d;
 80035c2:	9000      	str	r0, [sp, #0]
      *size = (*rawSize)+2;
 80035c4:	f10e 0e02 	add.w	lr, lr, #2
 80035c8:	fa1f fe8e 	uxth.w	lr, lr
        *idref = MCI_GetIqdref(pMCI).d;
 80035cc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80035d0:	80bb      	strh	r3, [r7, #4]
     if (retVal == MCP_CMD_OK )
 80035d2:	4675      	mov	r5, lr
 80035d4:	e763      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 80035d6:	2be0      	cmp	r3, #224	; 0xe0
 80035d8:	d1b8      	bne.n	800354c <RI_GetRegCommandParser+0x1c8>
        retVal = RI_MovString (MOTOR_NAME[motorID] ,charData, size, freeSpace);
 80035da:	4b75      	ldr	r3, [pc, #468]	; (80037b0 <RI_GetRegCommandParser+0x42c>)
 80035dc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 80035e0:	7828      	ldrb	r0, [r5, #0]
 80035e2:	2800      	cmp	r0, #0
 80035e4:	f000 8197 	beq.w	8003916 <RI_GetRegCommandParser+0x592>
 80035e8:	2c01      	cmp	r4, #1
 80035ea:	f240 8131 	bls.w	8003850 <RI_GetRegCommandParser+0x4cc>
 80035ee:	f1a4 0c02 	sub.w	ip, r4, #2
 80035f2:	fa1f fc8c 	uxth.w	ip, ip
 80035f6:	f10c 0c01 	add.w	ip, ip, #1
 80035fa:	44bc      	add	ip, r7
 80035fc:	463b      	mov	r3, r7
 80035fe:	f1c7 0201 	rsb	r2, r7, #1
 8003602:	e002      	b.n	800360a <RI_GetRegCommandParser+0x286>
 8003604:	4563      	cmp	r3, ip
 8003606:	f000 8123 	beq.w	8003850 <RI_GetRegCommandParser+0x4cc>
    *destString = *srcString ;
 800360a:	f803 0b01 	strb.w	r0, [r3], #1
  while ((*srcString != 0) && (*size < maxSize) )
 800360e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8003612:	eb03 0e02 	add.w	lr, r3, r2
 8003616:	fa1f fe8e 	uxth.w	lr, lr
 800361a:	2800      	cmp	r0, #0
 800361c:	d1f2      	bne.n	8003604 <RI_GetRegCommandParser+0x280>
 800361e:	e73b      	b.n	8003498 <RI_GetRegCommandParser+0x114>
 8003620:	f241 4050 	movw	r0, #5200	; 0x1450
 8003624:	4283      	cmp	r3, r0
 8003626:	f000 81d5 	beq.w	80039d4 <RI_GetRegCommandParser+0x650>
 800362a:	d96b      	bls.n	8003704 <RI_GetRegCommandParser+0x380>
 800362c:	f241 5090 	movw	r0, #5520	; 0x1590
 8003630:	4283      	cmp	r3, r0
 8003632:	f000 81cd 	beq.w	80039d0 <RI_GetRegCommandParser+0x64c>
 8003636:	d951      	bls.n	80036dc <RI_GetRegCommandParser+0x358>
 8003638:	f241 6010 	movw	r0, #5648	; 0x1610
 800363c:	4283      	cmp	r3, r0
 800363e:	f000 81a8 	beq.w	8003992 <RI_GetRegCommandParser+0x60e>
 8003642:	f241 6050 	movw	r0, #5712	; 0x1650
 8003646:	4283      	cmp	r3, r0
 8003648:	d129      	bne.n	800369e <RI_GetRegCommandParser+0x31a>
          *regdataU16 = PID_GetKDDivisor(pPIDIq[motorID]);
 800364a:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <RI_GetRegCommandParser+0x430>)
          *regdataU16 = PID_GetKDDivisor(pPIDId[motorID]);
 800364c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003650:	f005 fcec 	bl	800902c <PID_GetKDDivisor>
 8003654:	2502      	movs	r5, #2
 8003656:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003658:	46ae      	mov	lr, r5
 800365a:	e720      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 800365c:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003660:	f47f af74 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8003664:	4628      	mov	r0, r5
 8003666:	f7fe fcb5 	bl	8001fd4 <MCI_GetIalphabeta>
 800366a:	2502      	movs	r5, #2
 800366c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003670:	900a      	str	r0, [sp, #40]	; 0x28
        *size = 2;
 8003672:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8003674:	803b      	strh	r3, [r7, #0]
     if (retVal == MCP_CMD_OK )
 8003676:	e712      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 8003678:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800367c:	f000 81a0 	beq.w	80039c0 <RI_GetRegCommandParser+0x63c>
 8003680:	d91b      	bls.n	80036ba <RI_GetRegCommandParser+0x336>
 8003682:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003686:	f47f af61 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdata16 = MCI_GetIab(pMCI).b;
 800368a:	4628      	mov	r0, r5
 800368c:	f7fe fc94 	bl	8001fb8 <MCI_GetIab>
         break;
 8003690:	2502      	movs	r5, #2
          *regdata16 = MCI_GetIab(pMCI).b;
 8003692:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003696:	900c      	str	r0, [sp, #48]	; 0x30
        *size = 2;
 8003698:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetIab(pMCI).b;
 800369a:	803b      	strh	r3, [r7, #0]
         break;
 800369c:	e6ff      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 800369e:	f241 50d0 	movw	r0, #5584	; 0x15d0
 80036a2:	4283      	cmp	r3, r0
 80036a4:	f47f af52 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdataU16 = PID_GetKPDivisor(pPIDIq[motorID]);
 80036a8:	4b42      	ldr	r3, [pc, #264]	; (80037b4 <RI_GetRegCommandParser+0x430>)
          *regdataU16 = PID_GetKPDivisor(pPIDId[motorID]);
 80036aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80036ae:	f005 fc95 	bl	8008fdc <PID_GetKPDivisor>
 80036b2:	2502      	movs	r5, #2
 80036b4:	8038      	strh	r0, [r7, #0]
        *size = 2;
 80036b6:	46ae      	mov	lr, r5
 80036b8:	e6f1      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 80036ba:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 80036be:	f000 816c 	beq.w	800399a <RI_GetRegCommandParser+0x616>
 80036c2:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80036c6:	f47f af41 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 80036ca:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <RI_GetRegCommandParser+0x434>)
 80036cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80036d0:	f005 fc14 	bl	8008efc <MPM_GetAvrgElMotorPowerW>
         break;
 80036d4:	2502      	movs	r5, #2
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 80036d6:	8038      	strh	r0, [r7, #0]
        *size = 2;
 80036d8:	46ae      	mov	lr, r5
         break;
 80036da:	e6e0      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 80036dc:	f241 5010 	movw	r0, #5392	; 0x1510
 80036e0:	4283      	cmp	r3, r0
 80036e2:	f000 8134 	beq.w	800394e <RI_GetRegCommandParser+0x5ca>
 80036e6:	d93f      	bls.n	8003768 <RI_GetRegCommandParser+0x3e4>
 80036e8:	f241 5050 	movw	r0, #5456	; 0x1550
 80036ec:	4283      	cmp	r3, r0
 80036ee:	f47f af2d 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdataU16 = PID_GetKIDivisor(pPIDId[motorID]);
 80036f2:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <RI_GetRegCommandParser+0x420>)
 80036f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80036f8:	f005 fc78 	bl	8008fec <PID_GetKIDivisor>
 80036fc:	2502      	movs	r5, #2
 80036fe:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003700:	46ae      	mov	lr, r5
 8003702:	e6cc      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 8003704:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003708:	f000 8150 	beq.w	80039ac <RI_GetRegCommandParser+0x628>
 800370c:	d91b      	bls.n	8003746 <RI_GetRegCommandParser+0x3c2>
 800370e:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8003712:	f000 8113 	beq.w	800393c <RI_GetRegCommandParser+0x5b8>
 8003716:	d909      	bls.n	800372c <RI_GetRegCommandParser+0x3a8>
 8003718:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 800371c:	d003      	beq.n	8003726 <RI_GetRegCommandParser+0x3a2>
 800371e:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8003722:	f47f af13 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
 8003726:	2502      	movs	r5, #2
 8003728:	46ae      	mov	lr, r5
 800372a:	e6b8      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 800372c:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 8003730:	f47f af0c 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]);
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <RI_GetRegCommandParser+0x438>)
 8003736:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800373a:	f006 fca7 	bl	800a08c <SPD_GetElAngle>
 800373e:	2502      	movs	r5, #2
 8003740:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003742:	46ae      	mov	lr, r5
 8003744:	e6ab      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 8003746:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 800374a:	f000 80ed 	beq.w	8003928 <RI_GetRegCommandParser+0x5a4>
 800374e:	d917      	bls.n	8003780 <RI_GetRegCommandParser+0x3fc>
 8003750:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003754:	f47f aefa 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8003758:	4628      	mov	r0, r5
 800375a:	f7fe fc73 	bl	8002044 <MCI_GetValphabeta>
 800375e:	2502      	movs	r5, #2
 8003760:	9003      	str	r0, [sp, #12]
        *size = 2;
 8003762:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8003764:	8038      	strh	r0, [r7, #0]
     if (retVal == MCP_CMD_OK )
 8003766:	e69a      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 8003768:	f241 4090 	movw	r0, #5264	; 0x1490
 800376c:	4283      	cmp	r3, r0
 800376e:	f000 80d9 	beq.w	8003924 <RI_GetRegCommandParser+0x5a0>
 8003772:	f241 40d0 	movw	r0, #5328	; 0x14d0
 8003776:	4283      	cmp	r3, r0
 8003778:	f47f aee8 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdataU16 = PID_GetKDDivisor(pPIDSpeed[motorID]);
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <RI_GetRegCommandParser+0x43c>)
 800377e:	e765      	b.n	800364c <RI_GetRegCommandParser+0x2c8>
 8003780:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8003784:	f000 80e7 	beq.w	8003956 <RI_GetRegCommandParser+0x5d2>
 8003788:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 800378c:	f47f aede 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdata16 = MCI_GetVqd(pMCI).q;
 8003790:	4628      	mov	r0, r5
 8003792:	f7fe fc49 	bl	8002028 <MCI_GetVqd>
 8003796:	2502      	movs	r5, #2
 8003798:	9005      	str	r0, [sp, #20]
        *size = 2;
 800379a:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetVqd(pMCI).q;
 800379c:	8038      	strh	r0, [r7, #0]
     if (retVal == MCP_CMD_OK )
 800379e:	e67e      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 80037a0:	20000468 	.word	0x20000468
 80037a4:	20000458 	.word	0x20000458
 80037a8:	20000ba4 	.word	0x20000ba4
 80037ac:	200004d4 	.word	0x200004d4
 80037b0:	200004c8 	.word	0x200004c8
 80037b4:	2000045c 	.word	0x2000045c
 80037b8:	20000454 	.word	0x20000454
 80037bc:	200005fc 	.word	0x200005fc
 80037c0:	20000600 	.word	0x20000600
 80037c4:	20000b88 	.word	0x20000b88
 80037c8:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80037cc:	f000 80cd 	beq.w	800396a <RI_GetRegCommandParser+0x5e6>
 80037d0:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 80037d4:	f47f aeba 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 80037d8:	4b89      	ldr	r3, [pc, #548]	; (8003a00 <RI_GetRegCommandParser+0x67c>)
 80037da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80037de:	f005 fbf3 	bl	8008fc8 <PID_GetKP>
         break;
 80037e2:	2502      	movs	r5, #2
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 80037e4:	8038      	strh	r0, [r7, #0]
        *size = 2;
 80037e6:	46ae      	mov	lr, r5
         break;
 80037e8:	e659      	b.n	800349e <RI_GetRegCommandParser+0x11a>
 80037ea:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80037ee:	f000 80b0 	beq.w	8003952 <RI_GetRegCommandParser+0x5ce>
 80037f2:	d905      	bls.n	8003800 <RI_GetRegCommandParser+0x47c>
 80037f4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80037f8:	f47f aea8 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdata16 = PID_GetKP(pPIDIq[motorID]);
 80037fc:	4b81      	ldr	r3, [pc, #516]	; (8003a04 <RI_GetRegCommandParser+0x680>)
 80037fe:	e7ec      	b.n	80037da <RI_GetRegCommandParser+0x456>
 8003800:	2b90      	cmp	r3, #144	; 0x90
 8003802:	f000 80c8 	beq.w	8003996 <RI_GetRegCommandParser+0x612>
 8003806:	2bd0      	cmp	r3, #208	; 0xd0
 8003808:	f47f aea0 	bne.w	800354c <RI_GetRegCommandParser+0x1c8>
          *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 800380c:	4b7e      	ldr	r3, [pc, #504]	; (8003a08 <RI_GetRegCommandParser+0x684>)
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 800380e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003812:	f005 fbdd 	bl	8008fd0 <PID_GetKI>
         break;
 8003816:	2502      	movs	r5, #2
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003818:	8038      	strh	r0, [r7, #0]
        *size = 2;
 800381a:	46ae      	mov	lr, r5
         break;
 800381c:	e63f      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *data =  MCI_GetControlMode(pMCI);
 800381e:	4628      	mov	r0, r5
 8003820:	f7fe fbae 	bl	8001f80 <MCI_GetControlMode>
          break;
 8003824:	2501      	movs	r5, #1
          *data =  MCI_GetControlMode(pMCI);
 8003826:	7038      	strb	r0, [r7, #0]
        *size = 1;
 8003828:	46ae      	mov	lr, r5
          break;
 800382a:	e638      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *rawSize = 4;
 800382c:	2304      	movs	r3, #4
 800382e:	803b      	strh	r3, [r7, #0]
          *torque = MCI_GetLastRampFinalTorque(pMCI);
 8003830:	4628      	mov	r0, r5
 8003832:	f7fe fbab 	bl	8001f8c <MCI_GetLastRampFinalTorque>
 8003836:	8078      	strh	r0, [r7, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8003838:	4628      	mov	r0, r5
 800383a:	f7fe fbab 	bl	8001f94 <MCI_GetLastRampFinalDuration>
      *size = (*rawSize)+2;
 800383e:	f8b7 e000 	ldrh.w	lr, [r7]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8003842:	80b8      	strh	r0, [r7, #4]
      *size = (*rawSize)+2;
 8003844:	f10e 0e02 	add.w	lr, lr, #2
 8003848:	fa1f fe8e 	uxth.w	lr, lr
     if (retVal == MCP_CMD_OK )
 800384c:	4675      	mov	r5, lr
 800384e:	e626      	b.n	800349e <RI_GetRegCommandParser+0x11a>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003850:	2006      	movs	r0, #6
 8003852:	e5dd      	b.n	8003410 <RI_GetRegCommandParser+0x8c>
          *data = STM_GetState(&STM[motorID]);
 8003854:	4b6d      	ldr	r3, [pc, #436]	; (8003a0c <RI_GetRegCommandParser+0x688>)
 8003856:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800385a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800385e:	f006 fdbb 	bl	800a3d8 <STM_GetState>
 8003862:	2501      	movs	r5, #1
 8003864:	7038      	strb	r0, [r7, #0]
        *size = 1;
 8003866:	46ae      	mov	lr, r5
 8003868:	e619      	b.n	800349e <RI_GetRegCommandParser+0x11a>
        retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 800386a:	4b69      	ldr	r3, [pc, #420]	; (8003a10 <RI_GetRegCommandParser+0x68c>)
 800386c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8003870:	7828      	ldrb	r0, [r5, #0]
 8003872:	2800      	cmp	r0, #0
 8003874:	d04f      	beq.n	8003916 <RI_GetRegCommandParser+0x592>
 8003876:	2c01      	cmp	r4, #1
 8003878:	d9ea      	bls.n	8003850 <RI_GetRegCommandParser+0x4cc>
 800387a:	f1a4 0c02 	sub.w	ip, r4, #2
 800387e:	fa1f fc8c 	uxth.w	ip, ip
 8003882:	f10c 0c01 	add.w	ip, ip, #1
 8003886:	44bc      	add	ip, r7
 8003888:	463b      	mov	r3, r7
 800388a:	f1c7 0201 	rsb	r2, r7, #1
 800388e:	e001      	b.n	8003894 <RI_GetRegCommandParser+0x510>
 8003890:	4563      	cmp	r3, ip
 8003892:	d0dd      	beq.n	8003850 <RI_GetRegCommandParser+0x4cc>
    *destString = *srcString ;
 8003894:	f803 0b01 	strb.w	r0, [r3], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8003898:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800389c:	eb03 0e02 	add.w	lr, r3, r2
 80038a0:	fa1f fe8e 	uxth.w	lr, lr
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d1f3      	bne.n	8003890 <RI_GetRegCommandParser+0x50c>
 80038a8:	e5f6      	b.n	8003498 <RI_GetRegCommandParser+0x114>
          *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 80038aa:	4628      	mov	r0, r5
 80038ac:	f7fe fb80 	bl	8001fb0 <MCI_GetMecSpeedRefUnit>
 80038b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80038b4:	0040      	lsls	r0, r0, #1
 80038b6:	2504      	movs	r5, #4
 80038b8:	6038      	str	r0, [r7, #0]
        *size = 4;
 80038ba:	46ae      	mov	lr, r5
 80038bc:	e5ef      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80038be:	4628      	mov	r0, r5
 80038c0:	f7fe fb6e 	bl	8001fa0 <MCI_GetAvrgMecSpeedUnit>
 80038c4:	e7f4      	b.n	80038b0 <RI_GetRegCommandParser+0x52c>
          memcpy(rawData, FOCConfig_reg[motorID], sizeof(FOCFwConfig_reg_t) );
 80038c6:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <RI_GetRegCommandParser+0x690>)
 80038c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038cc:	681d      	ldr	r5, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80038d4:	f8c0 c008 	str.w	ip, [r0, #8]
 80038d8:	6005      	str	r5, [r0, #0]
 80038da:	6042      	str	r2, [r0, #4]
 80038dc:	899b      	ldrh	r3, [r3, #12]
 80038de:	8183      	strh	r3, [r0, #12]
 80038e0:	2510      	movs	r5, #16
      *size = (*rawSize)+2;
 80038e2:	46ae      	mov	lr, r5
 80038e4:	e5db      	b.n	800349e <RI_GetRegCommandParser+0x11a>
        *rawSize = sizeof(MotorConfig_reg_t);
 80038e6:	230e      	movs	r3, #14
        if ((*rawSize) +2  > freeSpace)
 80038e8:	2c0f      	cmp	r4, #15
        *rawSize = sizeof(MotorConfig_reg_t);
 80038ea:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 80038ec:	f67f ada6 	bls.w	800343c <RI_GetRegCommandParser+0xb8>
          memcpy(rawData, MotorConfig_reg[motorID], sizeof(MotorConfig_reg_t) );
 80038f0:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <RI_GetRegCommandParser+0x694>)
 80038f2:	e7e9      	b.n	80038c8 <RI_GetRegCommandParser+0x544>
          *rpm = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80038f4:	4628      	mov	r0, r5
 80038f6:	f7fe fb45 	bl	8001f84 <MCI_GetLastRampFinalSpeed>
 80038fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80038fe:	0040      	lsls	r0, r0, #1
 8003900:	f8c7 0002 	str.w	r0, [r7, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8003904:	4628      	mov	r0, r5
 8003906:	f7fe fb45 	bl	8001f94 <MCI_GetLastRampFinalDuration>
          *rawSize = 6;
 800390a:	2508      	movs	r5, #8
 800390c:	2306      	movs	r3, #6
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 800390e:	80f8      	strh	r0, [r7, #6]
          *rawSize = 6;
 8003910:	803b      	strh	r3, [r7, #0]
      *size = (*rawSize)+2;
 8003912:	46ae      	mov	lr, r5
 8003914:	e5c3      	b.n	800349e <RI_GetRegCommandParser+0x11a>
  while ((*srcString != 0) && (*size < maxSize) )
 8003916:	f04f 0e01 	mov.w	lr, #1
  *size= 1 ; /* /0 is the min String size */
 800391a:	4675      	mov	r5, lr
  while ((*srcString != 0) && (*size < maxSize) )
 800391c:	463b      	mov	r3, r7
 800391e:	e5bc      	b.n	800349a <RI_GetRegCommandParser+0x116>
  uint8_t retVal = MCP_CMD_NOK;
 8003920:	2001      	movs	r0, #1
 8003922:	e575      	b.n	8003410 <RI_GetRegCommandParser+0x8c>
          *regdataU16 = PID_GetKIDivisor(pPIDSpeed[motorID]);
 8003924:	4b38      	ldr	r3, [pc, #224]	; (8003a08 <RI_GetRegCommandParser+0x684>)
 8003926:	e6e5      	b.n	80036f4 <RI_GetRegCommandParser+0x370>
          *regdata16 = MCI_GetVqd(pMCI).d;
 8003928:	4628      	mov	r0, r5
 800392a:	f7fe fb7d 	bl	8002028 <MCI_GetVqd>
 800392e:	2502      	movs	r5, #2
 8003930:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003934:	9004      	str	r0, [sp, #16]
        *size = 2;
 8003936:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetVqd(pMCI).d;
 8003938:	803b      	strh	r3, [r7, #0]
     if (retVal == MCP_CMD_OK )
 800393a:	e5b0      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]);
 800393c:	4b37      	ldr	r3, [pc, #220]	; (8003a1c <RI_GetRegCommandParser+0x698>)
 800393e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003942:	f006 fbdb 	bl	800a0fc <SPD_GetS16Speed>
 8003946:	2502      	movs	r5, #2
 8003948:	8038      	strh	r0, [r7, #0]
        *size = 2;
 800394a:	46ae      	mov	lr, r5
 800394c:	e5a7      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdataU16 = PID_GetKPDivisor(pPIDId[motorID]);
 800394e:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <RI_GetRegCommandParser+0x67c>)
 8003950:	e6ab      	b.n	80036aa <RI_GetRegCommandParser+0x326>
          *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8003952:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <RI_GetRegCommandParser+0x684>)
 8003954:	e5e9      	b.n	800352a <RI_GetRegCommandParser+0x1a6>
          *regdata16 = MCI_GetIqdref(pMCI).d;
 8003956:	4628      	mov	r0, r5
 8003958:	f7fe fb58 	bl	800200c <MCI_GetIqdref>
 800395c:	2502      	movs	r5, #2
 800395e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003962:	9006      	str	r0, [sp, #24]
        *size = 2;
 8003964:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetIqdref(pMCI).d;
 8003966:	803b      	strh	r3, [r7, #0]
     if (retVal == MCP_CMD_OK )
 8003968:	e599      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdata16 = PID_GetKD(pPIDIq[motorID]);
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <RI_GetRegCommandParser+0x680>)
 800396c:	e5dd      	b.n	800352a <RI_GetRegCommandParser+0x1a6>
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 800396e:	4628      	mov	r0, r5
 8003970:	f7fe fb30 	bl	8001fd4 <MCI_GetIalphabeta>
         break;
 8003974:	2502      	movs	r5, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8003976:	900b      	str	r0, [sp, #44]	; 0x2c
        *size = 2;
 8003978:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 800397a:	8038      	strh	r0, [r7, #0]
         break;
 800397c:	e58f      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdata16 = PID_GetKI(pPIDIq[motorID]);
 800397e:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <RI_GetRegCommandParser+0x680>)
 8003980:	e745      	b.n	800380e <RI_GetRegCommandParser+0x48a>
          *regdata16 = MCI_GetIqd(pMCI).q;
 8003982:	4628      	mov	r0, r5
 8003984:	f7fe fb34 	bl	8001ff0 <MCI_GetIqd>
 8003988:	2502      	movs	r5, #2
 800398a:	9009      	str	r0, [sp, #36]	; 0x24
        *size = 2;
 800398c:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetIqd(pMCI).q;
 800398e:	8038      	strh	r0, [r7, #0]
     if (retVal == MCP_CMD_OK )
 8003990:	e585      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdataU16 = PID_GetKIDivisor(pPIDIq[motorID]);
 8003992:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <RI_GetRegCommandParser+0x680>)
 8003994:	e6ae      	b.n	80036f4 <RI_GetRegCommandParser+0x370>
          *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8003996:	4b1c      	ldr	r3, [pc, #112]	; (8003a08 <RI_GetRegCommandParser+0x684>)
 8003998:	e71f      	b.n	80037da <RI_GetRegCommandParser+0x456>
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 800399a:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <RI_GetRegCommandParser+0x69c>)
 800399c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80039a0:	f005 faf0 	bl	8008f84 <NTC_GetAvTemp_C>
         break;
 80039a4:	2502      	movs	r5, #2
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 80039a6:	8038      	strh	r0, [r7, #0]
        *size = 2;
 80039a8:	46ae      	mov	lr, r5
         break;
 80039aa:	e578      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 80039ac:	4628      	mov	r0, r5
 80039ae:	f7fe fb49 	bl	8002044 <MCI_GetValphabeta>
 80039b2:	2502      	movs	r5, #2
 80039b4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80039b8:	9002      	str	r0, [sp, #8]
        *size = 2;
 80039ba:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 80039bc:	803b      	strh	r3, [r7, #0]
     if (retVal == MCP_CMD_OK )
 80039be:	e56e      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdata16 = MCI_GetIab(pMCI).a;
 80039c0:	4628      	mov	r0, r5
 80039c2:	f7fe faf9 	bl	8001fb8 <MCI_GetIab>
         break;
 80039c6:	2502      	movs	r5, #2
          *regdata16 = MCI_GetIab(pMCI).a;
 80039c8:	900d      	str	r0, [sp, #52]	; 0x34
        *size = 2;
 80039ca:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetIab(pMCI).a;
 80039cc:	8038      	strh	r0, [r7, #0]
         break;
 80039ce:	e566      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdataU16 = PID_GetKDDivisor(pPIDId[motorID]);
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <RI_GetRegCommandParser+0x67c>)
 80039d2:	e63b      	b.n	800364c <RI_GetRegCommandParser+0x2c8>
          *regdataU16 = PID_GetKPDivisor(pPIDSpeed[motorID]);
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <RI_GetRegCommandParser+0x684>)
 80039d6:	e668      	b.n	80036aa <RI_GetRegCommandParser+0x326>
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80039d8:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <RI_GetRegCommandParser+0x6a0>)
 80039da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80039de:	f004 fe69 	bl	80086b4 <VBS_GetAvBusVoltage_V>
         break;
 80039e2:	2502      	movs	r5, #2
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80039e4:	8038      	strh	r0, [r7, #0]
        *size = 2;
 80039e6:	46ae      	mov	lr, r5
         break;
 80039e8:	e559      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdata16 = MCI_GetIqdref(pMCI).q;
 80039ea:	4628      	mov	r0, r5
 80039ec:	f7fe fb0e 	bl	800200c <MCI_GetIqdref>
 80039f0:	2502      	movs	r5, #2
 80039f2:	9007      	str	r0, [sp, #28]
        *size = 2;
 80039f4:	46ae      	mov	lr, r5
          *regdata16 = MCI_GetIqdref(pMCI).q;
 80039f6:	8038      	strh	r0, [r7, #0]
     if (retVal == MCP_CMD_OK )
 80039f8:	e551      	b.n	800349e <RI_GetRegCommandParser+0x11a>
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 80039fa:	4b01      	ldr	r3, [pc, #4]	; (8003a00 <RI_GetRegCommandParser+0x67c>)
 80039fc:	e707      	b.n	800380e <RI_GetRegCommandParser+0x48a>
 80039fe:	bf00      	nop
 8003a00:	20000458 	.word	0x20000458
 8003a04:	2000045c 	.word	0x2000045c
 8003a08:	20000600 	.word	0x20000600
 8003a0c:	20000ba4 	.word	0x20000ba4
 8003a10:	200004d0 	.word	0x200004d0
 8003a14:	20000478 	.word	0x20000478
 8003a18:	200004cc 	.word	0x200004cc
 8003a1c:	200005fc 	.word	0x200005fc
 8003a20:	20000464 	.word	0x20000464
 8003a24:	200005f8 	.word	0x200005f8

08003a28 <RI_GetIDSize>:
return retVal;
}

uint8_t RI_GetIDSize (uint16_t dataID)
{
  uint8_t typeID = dataID & TYPE_MASK;
 8003a28:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003a2c:	3808      	subs	r0, #8
 8003a2e:	b2c0      	uxtb	r0, r0
 8003a30:	2810      	cmp	r0, #16
 8003a32:	bf9a      	itte	ls
 8003a34:	4b01      	ldrls	r3, [pc, #4]	; (8003a3c <RI_GetIDSize+0x14>)
 8003a36:	5c18      	ldrbls	r0, [r3, r0]
 8003a38:	2000      	movhi	r0, #0
    default:
      result=0;
      break;
  }
  return result;
}
 8003a3a:	4770      	bx	lr
 8003a3c:	0800a78c 	.word	0x0800a78c

08003a40 <RI_GetPtrReg>:
  uint16_t regID = dataID & REG_MASK;
  uint8_t retVal = MCP_CMD_OK;

  MCI_Handle_t * pMCI = &Mci[motorID];

  switch (typeID)
 8003a40:	f000 0238 	and.w	r2, r0, #56	; 0x38
 8003a44:	2a10      	cmp	r2, #16
  uint8_t typeID = dataID & TYPE_MASK;
 8003a46:	b2c3      	uxtb	r3, r0
  switch (typeID)
 8003a48:	d003      	beq.n	8003a52 <RI_GetPtrReg+0x12>
      break;
      case MC_REG_ENCODER_EL_ANGLE:
        *dataPtr = &(pEncoder[motorID]->_Super.hElAngle);
      break;
      default:
        *dataPtr = &nullData16;
 8003a4a:	4b5f      	ldr	r3, [pc, #380]	; (8003bc8 <RI_GetPtrReg+0x188>)
 8003a4c:	600b      	str	r3, [r1, #0]
        retVal = MCP_ERROR_UNKNOWN_REG;
 8003a4e:	2005      	movs	r0, #5
      *dataPtr = &nullData16;
      retVal = MCP_ERROR_UNKNOWN_REG;
      break;
  }
  return retVal;
}
 8003a50:	4770      	bx	lr
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8003a52:	f003 0207 	and.w	r2, r3, #7
  uint16_t regID = dataID & REG_MASK;
 8003a56:	f020 0007 	bic.w	r0, r0, #7
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8003a5a:	3a01      	subs	r2, #1
 8003a5c:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
  MCI_Handle_t * pMCI = &Mci[motorID];
 8003a60:	b2d2      	uxtb	r2, r2
  uint16_t regID = dataID & REG_MASK;
 8003a62:	b283      	uxth	r3, r0
 8003a64:	d06c      	beq.n	8003b40 <RI_GetPtrReg+0x100>
 8003a66:	d813      	bhi.n	8003a90 <RI_GetPtrReg+0x50>
 8003a68:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003a6c:	d072      	beq.n	8003b54 <RI_GetPtrReg+0x114>
 8003a6e:	d92e      	bls.n	8003ace <RI_GetPtrReg+0x8e>
 8003a70:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8003a74:	d078      	beq.n	8003b68 <RI_GetPtrReg+0x128>
 8003a76:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8003a7a:	d11b      	bne.n	8003ab4 <RI_GetPtrReg+0x74>
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8003a7c:	4853      	ldr	r0, [pc, #332]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003a7e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003a82:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003a86:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8003a88:	6893      	ldr	r3, [r2, #8]
 8003a8a:	3310      	adds	r3, #16
 8003a8c:	600b      	str	r3, [r1, #0]
       break;
 8003a8e:	4770      	bx	lr
 8003a90:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003a94:	d072      	beq.n	8003b7c <RI_GetPtrReg+0x13c>
 8003a96:	d92a      	bls.n	8003aee <RI_GetPtrReg+0xae>
 8003a98:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 8003a9c:	f000 808c 	beq.w	8003bb8 <RI_GetPtrReg+0x178>
 8003aa0:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8003aa4:	d1d1      	bne.n	8003a4a <RI_GetPtrReg+0xa>
        *dataPtr = &(pEncoder[motorID]->_Super.hAvrMecSpeedUnit);
 8003aa6:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <RI_GetPtrReg+0x190>)
 8003aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aac:	330c      	adds	r3, #12
 8003aae:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003ab0:	2000      	movs	r0, #0
      break;
 8003ab2:	4770      	bx	lr
 8003ab4:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003ab8:	d1c7      	bne.n	8003a4a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 8003aba:	4844      	ldr	r0, [pc, #272]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003abc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003ac0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003ac4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 8003ac6:	6893      	ldr	r3, [r2, #8]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	600b      	str	r3, [r1, #0]
       break;
 8003acc:	4770      	bx	lr
 8003ace:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003ad2:	d05d      	beq.n	8003b90 <RI_GetPtrReg+0x150>
 8003ad4:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003ad8:	d119      	bne.n	8003b0e <RI_GetPtrReg+0xce>
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8003ada:	483c      	ldr	r0, [pc, #240]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003adc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003ae0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003ae4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8003ae6:	6893      	ldr	r3, [r2, #8]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	600b      	str	r3, [r1, #0]
       break;
 8003aec:	4770      	bx	lr
 8003aee:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003af2:	d057      	beq.n	8003ba4 <RI_GetPtrReg+0x164>
 8003af4:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003af8:	d115      	bne.n	8003b26 <RI_GetPtrReg+0xe6>
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8003afa:	4834      	ldr	r0, [pc, #208]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003afc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003b00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003b04:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8003b06:	6893      	ldr	r3, [r2, #8]
 8003b08:	331a      	adds	r3, #26
 8003b0a:	600b      	str	r3, [r1, #0]
       break;
 8003b0c:	4770      	bx	lr
 8003b0e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003b12:	d19a      	bne.n	8003a4a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 8003b14:	482d      	ldr	r0, [pc, #180]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003b16:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003b1a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003b1e:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 8003b20:	6893      	ldr	r3, [r2, #8]
 8003b22:	600b      	str	r3, [r1, #0]
       break;
 8003b24:	4770      	bx	lr
 8003b26:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8003b2a:	d18e      	bne.n	8003a4a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 8003b2c:	4827      	ldr	r0, [pc, #156]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003b2e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003b32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003b36:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 8003b38:	6893      	ldr	r3, [r2, #8]
 8003b3a:	3316      	adds	r3, #22
 8003b3c:	600b      	str	r3, [r1, #0]
       break;
 8003b3e:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 8003b40:	4822      	ldr	r0, [pc, #136]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003b42:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003b46:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003b4a:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 8003b4c:	6893      	ldr	r3, [r2, #8]
 8003b4e:	3312      	adds	r3, #18
 8003b50:	600b      	str	r3, [r1, #0]
       break;
 8003b52:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8003b54:	481d      	ldr	r0, [pc, #116]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003b56:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003b5a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003b5e:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8003b60:	6893      	ldr	r3, [r2, #8]
 8003b62:	3306      	adds	r3, #6
 8003b64:	600b      	str	r3, [r1, #0]
       break;
 8003b66:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8003b68:	4818      	ldr	r0, [pc, #96]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003b6a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003b6e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003b72:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8003b74:	6893      	ldr	r3, [r2, #8]
 8003b76:	330e      	adds	r3, #14
 8003b78:	600b      	str	r3, [r1, #0]
       break;
 8003b7a:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 8003b7c:	4813      	ldr	r0, [pc, #76]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003b7e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003b82:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003b86:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 8003b88:	6893      	ldr	r3, [r2, #8]
 8003b8a:	331c      	adds	r3, #28
 8003b8c:	600b      	str	r3, [r1, #0]
       break;
 8003b8e:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 8003b90:	480e      	ldr	r0, [pc, #56]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003b92:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003b96:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003b9a:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 8003b9c:	6893      	ldr	r3, [r2, #8]
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	600b      	str	r3, [r1, #0]
       break;
 8003ba2:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 8003ba4:	4809      	ldr	r0, [pc, #36]	; (8003bcc <RI_GetPtrReg+0x18c>)
 8003ba6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003baa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003bae:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 8003bb0:	6893      	ldr	r3, [r2, #8]
 8003bb2:	3318      	adds	r3, #24
 8003bb4:	600b      	str	r3, [r1, #0]
       break;
 8003bb6:	4770      	bx	lr
        *dataPtr = &(pEncoder[motorID]->_Super.hElAngle);
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <RI_GetPtrReg+0x190>)
 8003bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003bc2:	2000      	movs	r0, #0
      break;
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000648 	.word	0x20000648
 8003bcc:	20000b88 	.word	0x20000b88
 8003bd0:	200005fc 	.word	0x200005fc

08003bd4 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003bd4:	4a65      	ldr	r2, [pc, #404]	; (8003d6c <RCM_RegisterRegConv+0x198>)
 8003bd6:	6813      	ldr	r3, [r2, #0]
{
 8003bd8:	b470      	push	{r4, r5, r6}
 8003bda:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d07e      	beq.n	8003cde <RCM_RegisterRegConv+0x10a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003be0:	7904      	ldrb	r4, [r0, #4]
 8003be2:	7918      	ldrb	r0, [r3, #4]
 8003be4:	4284      	cmp	r4, r0
 8003be6:	d01e      	beq.n	8003c26 <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003be8:	6855      	ldr	r5, [r2, #4]
 8003bea:	2d00      	cmp	r5, #0
 8003bec:	f000 808b 	beq.w	8003d06 <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003bf0:	792b      	ldrb	r3, [r5, #4]
 8003bf2:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 8003bf4:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003bf8:	d079      	beq.n	8003cee <RCM_RegisterRegConv+0x11a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003bfa:	6893      	ldr	r3, [r2, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80a2 	beq.w	8003d46 <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003c02:	791d      	ldrb	r5, [r3, #4]
 8003c04:	42a5      	cmp	r5, r4
 8003c06:	d078      	beq.n	8003cfa <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003c08:	68d3      	ldr	r3, [r2, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80a0 	beq.w	8003d50 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003c10:	791d      	ldrb	r5, [r3, #4]
 8003c12:	42a5      	cmp	r5, r4
 8003c14:	f000 8082 	beq.w	8003d1c <RCM_RegisterRegConv+0x148>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8003c18:	2803      	cmp	r0, #3
 8003c1a:	bf88      	it	hi
 8003c1c:	20ff      	movhi	r0, #255	; 0xff
 8003c1e:	f240 80a0 	bls.w	8003d62 <RCM_RegisterRegConv+0x18e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8003c22:	bc70      	pop	{r4, r5, r6}
 8003c24:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	680b      	ldr	r3, [r1, #0]
 8003c2a:	4283      	cmp	r3, r0
 8003c2c:	d1dc      	bne.n	8003be8 <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 8003c2e:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c30:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003c32:	4d4f      	ldr	r5, [pc, #316]	; (8003d70 <RCM_RegisterRegConv+0x19c>)
      RCM_handle_array [handle] = regConv;
 8003c34:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003c3e:	07e5      	lsls	r5, r4, #31
 8003c40:	d422      	bmi.n	8003c88 <RCM_RegisterRegConv+0xb4>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003c42:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003c44:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003c4c:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003c4e:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003c50:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003c52:	f022 0220 	bic.w	r2, r2, #32
 8003c56:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003c58:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003c60:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003c64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c68:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	2a00      	cmp	r2, #0
 8003c6e:	dbfc      	blt.n	8003c6a <RCM_RegisterRegConv+0x96>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003c70:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 8003c72:	07d4      	lsls	r4, r2, #31
 8003c74:	d408      	bmi.n	8003c88 <RCM_RegisterRegConv+0xb4>
  MODIFY_REG(ADCx->CR,
 8003c76:	4c3f      	ldr	r4, [pc, #252]	; (8003d74 <RCM_RegisterRegConv+0x1a0>)
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	4022      	ands	r2, r4
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	07d2      	lsls	r2, r2, #31
 8003c86:	d5f7      	bpl.n	8003c78 <RCM_RegisterRegConv+0xa4>
      RCM_NoInj_array [handle].enable = false;
 8003c88:	4d3b      	ldr	r5, [pc, #236]	; (8003d78 <RCM_RegisterRegConv+0x1a4>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003c8a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003c8c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003c90:	0056      	lsls	r6, r2, #1
 8003c92:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8003c96:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 8003c9a:	7150      	strb	r0, [r2, #5]
      RCM_NoInj_array [handle].prev = handle;
 8003c9c:	7110      	strb	r0, [r2, #4]
      RCM_NoInj_array [handle].enable = false;
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	55aa      	strb	r2, [r5, r6]
 8003ca2:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003ca4:	790c      	ldrb	r4, [r1, #4]
 8003ca6:	2c09      	cmp	r4, #9
 8003ca8:	d83f      	bhi.n	8003d2a <RCM_RegisterRegConv+0x156>
 8003caa:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8003cae:	06a2      	lsls	r2, r4, #26
 8003cb0:	2501      	movs	r5, #1
 8003cb2:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8003cb6:	fa05 f404 	lsl.w	r4, r5, r4
 8003cba:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003cbc:	0dd4      	lsrs	r4, r2, #23
 8003cbe:	f004 0404 	and.w	r4, r4, #4
 8003cc2:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8003cc4:	688d      	ldr	r5, [r1, #8]
 8003cc6:	58e1      	ldr	r1, [r4, r3]
 8003cc8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003ccc:	2607      	movs	r6, #7
 8003cce:	4096      	lsls	r6, r2
 8003cd0:	4095      	lsls	r5, r2
 8003cd2:	ea21 0206 	bic.w	r2, r1, r6
 8003cd6:	432a      	orrs	r2, r5
 8003cd8:	50e2      	str	r2, [r4, r3]
}
 8003cda:	bc70      	pop	{r4, r5, r6}
 8003cdc:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003cde:	6855      	ldr	r5, [r2, #4]
 8003ce0:	2d00      	cmp	r5, #0
 8003ce2:	d039      	beq.n	8003d58 <RCM_RegisterRegConv+0x184>
 8003ce4:	7904      	ldrb	r4, [r0, #4]
  uint8_t i=0;
 8003ce6:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003ce8:	792b      	ldrb	r3, [r5, #4]
 8003cea:	42a3      	cmp	r3, r4
 8003cec:	d185      	bne.n	8003bfa <RCM_RegisterRegConv+0x26>
 8003cee:	682d      	ldr	r5, [r5, #0]
 8003cf0:	680b      	ldr	r3, [r1, #0]
 8003cf2:	429d      	cmp	r5, r3
 8003cf4:	d181      	bne.n	8003bfa <RCM_RegisterRegConv+0x26>
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	e79a      	b.n	8003c30 <RCM_RegisterRegConv+0x5c>
 8003cfa:	681d      	ldr	r5, [r3, #0]
 8003cfc:	680b      	ldr	r3, [r1, #0]
 8003cfe:	429d      	cmp	r5, r3
 8003d00:	d182      	bne.n	8003c08 <RCM_RegisterRegConv+0x34>
      i++;
 8003d02:	2002      	movs	r0, #2
 8003d04:	e794      	b.n	8003c30 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003d06:	6893      	ldr	r3, [r2, #8]
 8003d08:	2001      	movs	r0, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f47f af79 	bne.w	8003c02 <RCM_RegisterRegConv+0x2e>
 8003d10:	68d3      	ldr	r3, [r2, #12]
 8003d12:	b333      	cbz	r3, 8003d62 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d14:	791d      	ldrb	r5, [r3, #4]
 8003d16:	790c      	ldrb	r4, [r1, #4]
 8003d18:	42a5      	cmp	r5, r4
 8003d1a:	d122      	bne.n	8003d62 <RCM_RegisterRegConv+0x18e>
 8003d1c:	681c      	ldr	r4, [r3, #0]
 8003d1e:	680b      	ldr	r3, [r1, #0]
 8003d20:	429c      	cmp	r4, r3
 8003d22:	f47f af79 	bne.w	8003c18 <RCM_RegisterRegConv+0x44>
      i++;
 8003d26:	2003      	movs	r0, #3
 8003d28:	e782      	b.n	8003c30 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003d2a:	2503      	movs	r5, #3
 8003d2c:	f06f 061d 	mvn.w	r6, #29
 8003d30:	2201      	movs	r2, #1
 8003d32:	fb15 6504 	smlabb	r5, r5, r4, r6
 8003d36:	40a2      	lsls	r2, r4
 8003d38:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8003d3c:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8003d40:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003d44:	e7ba      	b.n	8003cbc <RCM_RegisterRegConv+0xe8>
      i++;
 8003d46:	2805      	cmp	r0, #5
 8003d48:	bf34      	ite	cc
 8003d4a:	2000      	movcc	r0, #0
 8003d4c:	2002      	movcs	r0, #2
 8003d4e:	e7df      	b.n	8003d10 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003d50:	2804      	cmp	r0, #4
 8003d52:	680b      	ldr	r3, [r1, #0]
 8003d54:	d8e7      	bhi.n	8003d26 <RCM_RegisterRegConv+0x152>
 8003d56:	e76b      	b.n	8003c30 <RCM_RegisterRegConv+0x5c>
 8003d58:	6893      	ldr	r3, [r2, #8]
 8003d5a:	b123      	cbz	r3, 8003d66 <RCM_RegisterRegConv+0x192>
 8003d5c:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8003d5e:	4628      	mov	r0, r5
 8003d60:	e74f      	b.n	8003c02 <RCM_RegisterRegConv+0x2e>
 8003d62:	680b      	ldr	r3, [r1, #0]
 8003d64:	e764      	b.n	8003c30 <RCM_RegisterRegConv+0x5c>
 8003d66:	4618      	mov	r0, r3
 8003d68:	e7d2      	b.n	8003d10 <RCM_RegisterRegConv+0x13c>
 8003d6a:	bf00      	nop
 8003d6c:	20001e58 	.word	0x20001e58
 8003d70:	20001e34 	.word	0x20001e34
 8003d74:	7fffffc0 	.word	0x7fffffc0
 8003d78:	20001e1c 	.word	0x20001e1c

08003d7c <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 8003d7c:	4b5c      	ldr	r3, [pc, #368]	; (8003ef0 <RCM_ExecRegularConv+0x174>)
 8003d7e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 8003d82:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [handle].enable == false)
 8003d84:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003d88:	0044      	lsls	r4, r0, #1
 8003d8a:	2a00      	cmp	r2, #0
 8003d8c:	d136      	bne.n	8003dfc <RCM_ExecRegularConv+0x80>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8003d8e:	7819      	ldrb	r1, [r3, #0]
 8003d90:	2900      	cmp	r1, #0
 8003d92:	d179      	bne.n	8003e88 <RCM_ExecRegularConv+0x10c>
 8003d94:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 8003d96:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 8003d98:	2900      	cmp	r1, #0
 8003d9a:	d07b      	beq.n	8003e94 <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array [i].next > handle)
 8003d9c:	7ade      	ldrb	r6, [r3, #11]
 8003d9e:	42b0      	cmp	r0, r6
 8003da0:	f0c0 8098 	bcc.w	8003ed4 <RCM_ExecRegularConv+0x158>
      if (RCM_NoInj_array [i].enable == true)
 8003da4:	7b1a      	ldrb	r2, [r3, #12]
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	f000 8097 	beq.w	8003eda <RCM_ExecRegularConv+0x15e>
        if (RCM_NoInj_array [i].next > handle)
 8003dac:	7c5e      	ldrb	r6, [r3, #17]
 8003dae:	42b0      	cmp	r0, r6
 8003db0:	d305      	bcc.n	8003dbe <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 8003db2:	7c9a      	ldrb	r2, [r3, #18]
 8003db4:	2a00      	cmp	r2, #0
 8003db6:	f040 8094 	bne.w	8003ee2 <RCM_ExecRegularConv+0x166>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 8003dba:	2202      	movs	r2, #2
 8003dbc:	e071      	b.n	8003ea2 <RCM_ExecRegularConv+0x126>
 8003dbe:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 8003dc0:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 8003dc2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8003dc6:	1821      	adds	r1, r4, r0
 8003dc8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8003dcc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8003dd0:	714e      	strb	r6, [r1, #5]
          RCM_NoInj_array [handle].prev = i;
 8003dd2:	4e48      	ldr	r6, [pc, #288]	; (8003ef4 <RCM_ExecRegularConv+0x178>)
 8003dd4:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 8003dd6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8003dda:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8003dde:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 8003de0:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 8003de2:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 8003de4:	1821      	adds	r1, r4, r0
 8003de6:	2501      	movs	r5, #1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8003de8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 8003dec:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8003df0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003df4:	7852      	ldrb	r2, [r2, #1]
 8003df6:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8003df8:	bf18      	it	ne
 8003dfa:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8003dfc:	4a3e      	ldr	r2, [pc, #248]	; (8003ef8 <RCM_ExecRegularConv+0x17c>)
 8003dfe:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8003e02:	bb8a      	cbnz	r2, 8003e68 <RCM_ExecRegularConv+0xec>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003e04:	4a3d      	ldr	r2, [pc, #244]	; (8003efc <RCM_ExecRegularConv+0x180>)
 8003e06:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003e0a:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003e0c:	6811      	ldr	r1, [r2, #0]
 8003e0e:	2d09      	cmp	r5, #9
 8003e10:	d930      	bls.n	8003e74 <RCM_ExecRegularConv+0xf8>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003e12:	2603      	movs	r6, #3
 8003e14:	f06f 071d 	mvn.w	r7, #29
 8003e18:	2201      	movs	r2, #1
 8003e1a:	fb16 7605 	smlabb	r6, r6, r5, r7
 8003e1e:	40aa      	lsls	r2, r5
 8003e20:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8003e24:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003e28:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8003e2c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8003e2e:	0d12      	lsrs	r2, r2, #20
 8003e30:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8003e34:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8003e38:	432a      	orrs	r2, r5
 8003e3a:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003e3c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003e3e:	688a      	ldr	r2, [r1, #8]
 8003e40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e44:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003e48:	f042 0204 	orr.w	r2, r2, #4
 8003e4c:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003e4e:	680a      	ldr	r2, [r1, #0]
 8003e50:	0752      	lsls	r2, r2, #29
 8003e52:	d5fc      	bpl.n	8003e4e <RCM_ExecRegularConv+0xd2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003e54:	1822      	adds	r2, r4, r0
 8003e56:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003e5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e5c:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8003e5e:	4d25      	ldr	r5, [pc, #148]	; (8003ef4 <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array [handle].status = valid;
 8003e60:	2102      	movs	r1, #2
 8003e62:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8003e64:	7952      	ldrb	r2, [r2, #5]
 8003e66:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 8003e68:	4420      	add	r0, r4
 8003e6a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 8003e6e:	bcf0      	pop	{r4, r5, r6, r7}
 8003e70:	8858      	ldrh	r0, [r3, #2]
 8003e72:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003e74:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8003e78:	06aa      	lsls	r2, r5, #26
 8003e7a:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003e7c:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003e80:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003e84:	432a      	orrs	r2, r5
 8003e86:	e7d1      	b.n	8003e2c <RCM_ExecRegularConv+0xb0>
        if (RCM_NoInj_array [i].next > handle)
 8003e88:	795e      	ldrb	r6, [r3, #5]
 8003e8a:	4286      	cmp	r6, r0
 8003e8c:	d898      	bhi.n	8003dc0 <RCM_ExecRegularConv+0x44>
      if (RCM_NoInj_array [i].enable == true)
 8003e8e:	7999      	ldrb	r1, [r3, #6]
 8003e90:	2900      	cmp	r1, #0
 8003e92:	d183      	bne.n	8003d9c <RCM_ExecRegularConv+0x20>
 8003e94:	7b19      	ldrb	r1, [r3, #12]
 8003e96:	2900      	cmp	r1, #0
 8003e98:	d188      	bne.n	8003dac <RCM_ExecRegularConv+0x30>
 8003e9a:	7c99      	ldrb	r1, [r3, #18]
 8003e9c:	bb09      	cbnz	r1, 8003ee2 <RCM_ExecRegularConv+0x166>
       if (LastEnable != RCM_MAX_CONV )
 8003e9e:	2a04      	cmp	r2, #4
 8003ea0:	d014      	beq.n	8003ecc <RCM_ExecRegularConv+0x150>
         formerNext = RCM_NoInj_array [LastEnable].next;
 8003ea2:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8003ea6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8003eaa:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8003eac:	f895 c005 	ldrb.w	ip, [r5, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8003eb0:	4e10      	ldr	r6, [pc, #64]	; (8003ef4 <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array [formerNext].prev = handle;
 8003eb2:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8003eb6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 8003eba:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8003ebe:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 8003ec0:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 8003ec4:	7832      	ldrb	r2, [r6, #0]
 8003ec6:	7168      	strb	r0, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 8003ec8:	7138      	strb	r0, [r7, #4]
    while (i < RCM_MAX_CONV)
 8003eca:	e78b      	b.n	8003de4 <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 8003ecc:	4e09      	ldr	r6, [pc, #36]	; (8003ef4 <RCM_ExecRegularConv+0x178>)
 8003ece:	4602      	mov	r2, r0
 8003ed0:	7030      	strb	r0, [r6, #0]
    while (i < RCM_MAX_CONV)
 8003ed2:	e787      	b.n	8003de4 <RCM_ExecRegularConv+0x68>
      i++;
 8003ed4:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	e773      	b.n	8003dc2 <RCM_ExecRegularConv+0x46>
 8003eda:	7c9a      	ldrb	r2, [r3, #18]
 8003edc:	b90a      	cbnz	r2, 8003ee2 <RCM_ExecRegularConv+0x166>
      i++;
 8003ede:	2201      	movs	r2, #1
 8003ee0:	e7df      	b.n	8003ea2 <RCM_ExecRegularConv+0x126>
        if (RCM_NoInj_array [i].next > handle)
 8003ee2:	7dde      	ldrb	r6, [r3, #23]
 8003ee4:	4286      	cmp	r6, r0
      i++;
 8003ee6:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 8003eea:	d9da      	bls.n	8003ea2 <RCM_ExecRegularConv+0x126>
 8003eec:	e768      	b.n	8003dc0 <RCM_ExecRegularConv+0x44>
 8003eee:	bf00      	nop
 8003ef0:	20001e1c 	.word	0x20001e1c
 8003ef4:	20001e18 	.word	0x20001e18
 8003ef8:	20000318 	.word	0x20000318
 8003efc:	20001e58 	.word	0x20001e58

08003f00 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8003f00:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8003f02:	4c12      	ldr	r4, [pc, #72]	; (8003f4c <RCM_ExecUserConv+0x4c>)
 8003f04:	7823      	ldrb	r3, [r4, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d000      	beq.n	8003f0c <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003f0c:	4d10      	ldr	r5, [pc, #64]	; (8003f50 <RCM_ExecUserConv+0x50>)
 8003f0e:	7828      	ldrb	r0, [r5, #0]
 8003f10:	f7ff ff34 	bl	8003d7c <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003f14:	782b      	ldrb	r3, [r5, #0]
 8003f16:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003f18:	490f      	ldr	r1, [pc, #60]	; (8003f58 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003f1a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8003f1e:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003f22:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003f24:	7852      	ldrb	r2, [r2, #1]
 8003f26:	b10a      	cbz	r2, 8003f2c <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8003f28:	2202      	movs	r2, #2
 8003f2a:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003f2c:	4a0b      	ldr	r2, [pc, #44]	; (8003f5c <RCM_ExecUserConv+0x5c>)
 8003f2e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8003f32:	2d00      	cmp	r5, #0
 8003f34:	d0e9      	beq.n	8003f0a <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003f36:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	7021      	strb	r1, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003f3e:	6852      	ldr	r2, [r2, #4]
 8003f40:	4601      	mov	r1, r0
 8003f42:	4618      	mov	r0, r3
 8003f44:	462b      	mov	r3, r5
}
 8003f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003f4a:	4718      	bx	r3
 8003f4c:	20001e54 	.word	0x20001e54
 8003f50:	20001e19 	.word	0x20001e19
 8003f54:	20001e1c 	.word	0x20001e1c
 8003f58:	20001e68 	.word	0x20001e68
 8003f5c:	20001e34 	.word	0x20001e34

08003f60 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8003f60:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <RCM_ExecNextConv+0x88>)
 8003f62:	4822      	ldr	r0, [pc, #136]	; (8003fec <RCM_ExecNextConv+0x8c>)
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003f6a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8003f6e:	b383      	cbz	r3, 8003fd2 <RCM_ExecNextConv+0x72>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8003f70:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <RCM_ExecNextConv+0x90>)
{
 8003f72:	b4f0      	push	{r4, r5, r6, r7}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8003f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f78:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003f7a:	2504      	movs	r5, #4
 8003f7c:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8003f7e:	791d      	ldrb	r5, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003f80:	2d09      	cmp	r5, #9
 8003f82:	ea4f 0442 	mov.w	r4, r2, lsl #1
 8003f86:	d925      	bls.n	8003fd4 <RCM_ExecNextConv+0x74>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8003f88:	2603      	movs	r6, #3
 8003f8a:	f06f 071d 	mvn.w	r7, #29
 8003f8e:	2301      	movs	r3, #1
 8003f90:	fb16 7605 	smlabb	r6, r6, r5, r7
 8003f94:	40ab      	lsls	r3, r5
 8003f96:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 8003f9a:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003f9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8003fa2:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8003fa4:	0d1b      	lsrs	r3, r3, #20
 8003fa6:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8003faa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003fae:	432b      	orrs	r3, r5
 8003fb0:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003fb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003fb4:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 8003fb6:	4422      	add	r2, r4
 8003fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fbc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003fc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	2201      	movs	r2, #1
 8003fca:	608b      	str	r3, [r1, #8]
 8003fcc:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003fce:	bcf0      	pop	{r4, r5, r6, r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8003fd4:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8003fd8:	06ab      	lsls	r3, r5, #26
 8003fda:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003fdc:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8003fe0:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003fe4:	432b      	orrs	r3, r5
 8003fe6:	e7dc      	b.n	8003fa2 <RCM_ExecNextConv+0x42>
 8003fe8:	20001e18 	.word	0x20001e18
 8003fec:	20001e1c 	.word	0x20001e1c
 8003ff0:	20001e58 	.word	0x20001e58

08003ff4 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8003ff4:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8003ff6:	4c0f      	ldr	r4, [pc, #60]	; (8004034 <RCM_ReadOngoingConv+0x40>)
 8003ff8:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <RCM_ReadOngoingConv+0x44>)
 8003ffa:	7823      	ldrb	r3, [r4, #0]
 8003ffc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004000:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004004:	0058      	lsls	r0, r3, #1
 8004006:	784d      	ldrb	r5, [r1, #1]
 8004008:	2d01      	cmp	r5, #1
 800400a:	d006      	beq.n	800401a <RCM_ReadOngoingConv+0x26>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 800400c:	4403      	add	r3, r0
 800400e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004012:	7953      	ldrb	r3, [r2, #5]
 8004014:	7023      	strb	r3, [r4, #0]
}
 8004016:	bc70      	pop	{r4, r5, r6}
 8004018:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 800401a:	4d08      	ldr	r5, [pc, #32]	; (800403c <RCM_ReadOngoingConv+0x48>)
 800401c:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8004020:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004022:	682e      	ldr	r6, [r5, #0]
 8004024:	0776      	lsls	r6, r6, #29
 8004026:	d5f1      	bpl.n	800400c <RCM_ReadOngoingConv+0x18>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8004028:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800402a:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 800402c:	2502      	movs	r5, #2
 800402e:	704d      	strb	r5, [r1, #1]
 8004030:	e7ec      	b.n	800400c <RCM_ReadOngoingConv+0x18>
 8004032:	bf00      	nop
 8004034:	20001e18 	.word	0x20001e18
 8004038:	20001e1c 	.word	0x20001e1c
 800403c:	20001e58 	.word	0x20001e58

08004040 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004040:	4b0e      	ldr	r3, [pc, #56]	; (800407c <HAL_MspInit+0x3c>)
{
 8004042:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004044:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	661a      	str	r2, [r3, #96]	; 0x60
 800404c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800404e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004050:	f002 0201 	and.w	r2, r2, #1
 8004054:	9200      	str	r2, [sp, #0]
 8004056:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800405a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800405e:	659a      	str	r2, [r3, #88]	; 0x58
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004066:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004068:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800406c:	f001 fc6a 	bl	8005944 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004070:	b003      	add	sp, #12
 8004072:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8004076:	f002 bbaf 	b.w	80067d8 <HAL_PWREx_DisableUCPDDeadBattery>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000

08004080 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004080:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004082:	6802      	ldr	r2, [r0, #0]
{
 8004084:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004086:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8004088:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004090:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8004094:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8004096:	d021      	beq.n	80040dc <HAL_ADC_MspInit+0x5c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8004098:	4b33      	ldr	r3, [pc, #204]	; (8004168 <HAL_ADC_MspInit+0xe8>)
 800409a:	429a      	cmp	r2, r3
 800409c:	d001      	beq.n	80040a2 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800409e:	b00d      	add	sp, #52	; 0x34
 80040a0:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80040a2:	4a32      	ldr	r2, [pc, #200]	; (800416c <HAL_ADC_MspInit+0xec>)
 80040a4:	6813      	ldr	r3, [r2, #0]
 80040a6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80040a8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80040aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80040ac:	d051      	beq.n	8004152 <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ae:	4b30      	ldr	r3, [pc, #192]	; (8004170 <HAL_ADC_MspInit+0xf0>)
 80040b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80040c0:	2240      	movs	r2, #64	; 0x40
 80040c2:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80040c4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c6:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80040c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80040cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d0:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80040d4:	f002 f982 	bl	80063dc <HAL_GPIO_Init>
}
 80040d8:	b00d      	add	sp, #52	; 0x34
 80040da:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80040dc:	4a23      	ldr	r2, [pc, #140]	; (800416c <HAL_ADC_MspInit+0xec>)
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80040e2:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80040e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80040e6:	d029      	beq.n	800413c <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e8:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_ADC_MspInit+0xf0>)
 80040ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ec:	f042 0201 	orr.w	r2, r2, #1
 80040f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80040f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040f4:	f002 0201 	and.w	r2, r2, #1
 80040f8:	9202      	str	r2, [sp, #8]
 80040fa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040fe:	f042 0202 	orr.w	r2, r2, #2
 8004102:	64da      	str	r2, [r3, #76]	; 0x4c
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 800410c:	2205      	movs	r2, #5
 800410e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004112:	a906      	add	r1, sp, #24
 8004114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8004118:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800411c:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004120:	f002 f95c 	bl	80063dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8004124:	f244 0202 	movw	r2, #16386	; 0x4002
 8004128:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412a:	4812      	ldr	r0, [pc, #72]	; (8004174 <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412c:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8004130:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004134:	f002 f952 	bl	80063dc <HAL_GPIO_Init>
}
 8004138:	b00d      	add	sp, #52	; 0x34
 800413a:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <HAL_ADC_MspInit+0xf0>)
 800413e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004144:	64da      	str	r2, [r3, #76]	; 0x4c
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	9b01      	ldr	r3, [sp, #4]
 8004150:	e7ca      	b.n	80040e8 <HAL_ADC_MspInit+0x68>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004152:	4b07      	ldr	r3, [pc, #28]	; (8004170 <HAL_ADC_MspInit+0xf0>)
 8004154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004156:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800415a:	64da      	str	r2, [r3, #76]	; 0x4c
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004162:	9304      	str	r3, [sp, #16]
 8004164:	9b04      	ldr	r3, [sp, #16]
 8004166:	e7a2      	b.n	80040ae <HAL_ADC_MspInit+0x2e>
 8004168:	50000100 	.word	0x50000100
 800416c:	2000064c 	.word	0x2000064c
 8004170:	40021000 	.word	0x40021000
 8004174:	48000400 	.word	0x48000400

08004178 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004178:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 800417a:	6802      	ldr	r2, [r0, #0]
 800417c:	4929      	ldr	r1, [pc, #164]	; (8004224 <HAL_COMP_MspInit+0xac>)
{
 800417e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8004182:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004184:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004188:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800418c:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 800418e:	d007      	beq.n	80041a0 <HAL_COMP_MspInit+0x28>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8004190:	4925      	ldr	r1, [pc, #148]	; (8004228 <HAL_COMP_MspInit+0xb0>)
 8004192:	428a      	cmp	r2, r1
 8004194:	d01a      	beq.n	80041cc <HAL_COMP_MspInit+0x54>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8004196:	4925      	ldr	r1, [pc, #148]	; (800422c <HAL_COMP_MspInit+0xb4>)
 8004198:	428a      	cmp	r2, r1
 800419a:	d02d      	beq.n	80041f8 <HAL_COMP_MspInit+0x80>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 800419c:	b00a      	add	sp, #40	; 0x28
 800419e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a0:	4a23      	ldr	r2, [pc, #140]	; (8004230 <HAL_COMP_MspInit+0xb8>)
 80041a2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80041a4:	f041 0101 	orr.w	r1, r1, #1
 80041a8:	64d1      	str	r1, [r2, #76]	; 0x4c
 80041aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ae:	f002 0201 	and.w	r2, r2, #1
 80041b2:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 80041b4:	2303      	movs	r3, #3
 80041b6:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 80041b8:	a904      	add	r1, sp, #16
 80041ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 80041be:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c2:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 80041c4:	f002 f90a 	bl	80063dc <HAL_GPIO_Init>
}
 80041c8:	b00a      	add	sp, #40	; 0x28
 80041ca:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041cc:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_COMP_MspInit+0xb8>)
 80041ce:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80041d0:	f041 0101 	orr.w	r1, r1, #1
 80041d4:	64d1      	str	r1, [r2, #76]	; 0x4c
 80041d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041da:	f002 0201 	and.w	r2, r2, #1
 80041de:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 80041e0:	2303      	movs	r3, #3
 80041e2:	2280      	movs	r2, #128	; 0x80
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 80041e4:	a904      	add	r1, sp, #16
 80041e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 80041ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ee:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 80041f0:	f002 f8f4 	bl	80063dc <HAL_GPIO_Init>
}
 80041f4:	b00a      	add	sp, #40	; 0x28
 80041f6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f8:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <HAL_COMP_MspInit+0xb8>)
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80041fa:	480e      	ldr	r0, [pc, #56]	; (8004234 <HAL_COMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fc:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80041fe:	f041 0102 	orr.w	r1, r1, #2
 8004202:	64d1      	str	r1, [r2, #76]	; 0x4c
 8004204:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004208:	f002 0202 	and.w	r2, r2, #2
 800420c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800420e:	2303      	movs	r3, #3
 8004210:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8004212:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8004214:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004218:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800421a:	f002 f8df 	bl	80063dc <HAL_GPIO_Init>
}
 800421e:	b00a      	add	sp, #40	; 0x28
 8004220:	bd10      	pop	{r4, pc}
 8004222:	bf00      	nop
 8004224:	40010200 	.word	0x40010200
 8004228:	40010204 	.word	0x40010204
 800422c:	4001020c 	.word	0x4001020c
 8004230:	40021000 	.word	0x40021000
 8004234:	48000400 	.word	0x48000400

08004238 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <HAL_CORDIC_MspInit+0x2c>)
 800423a:	6802      	ldr	r2, [r0, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d000      	beq.n	8004242 <HAL_CORDIC_MspInit+0xa>
 8004240:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004242:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8004246:	f042 0208 	orr.w	r2, r2, #8
 800424a:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 800424e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8004252:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800425e:	b002      	add	sp, #8
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40020c00 	.word	0x40020c00

08004268 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <HAL_DAC_MspInit+0x2c>)
 800426a:	6802      	ldr	r2, [r0, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d000      	beq.n	8004272 <HAL_DAC_MspInit+0xa>
 8004270:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8004272:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004276:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 800427a:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 800427c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800427e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 800428e:	b002      	add	sp, #8
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	50001000 	.word	0x50001000

08004298 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004298:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hfdcan->Instance==FDCAN1)
 800429a:	6802      	ldr	r2, [r0, #0]
 800429c:	4b2b      	ldr	r3, [pc, #172]	; (800434c <HAL_FDCAN_MspInit+0xb4>)
{
 800429e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	2400      	movs	r4, #0
  if(hfdcan->Instance==FDCAN1)
 80042a2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80042a8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80042ac:	9408      	str	r4, [sp, #32]
  if(hfdcan->Instance==FDCAN1)
 80042ae:	d001      	beq.n	80042b4 <HAL_FDCAN_MspInit+0x1c>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80042b0:	b00b      	add	sp, #44	; 0x2c
 80042b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80042b4:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80042b8:	2600      	movs	r6, #0
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80042ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042bc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80042c0:	659a      	str	r2, [r3, #88]	; 0x58
 80042c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042c4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80042c8:	9201      	str	r2, [sp, #4]
 80042ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80042d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042d6:	f002 0201 	and.w	r2, r2, #1
 80042da:	9202      	str	r2, [sp, #8]
 80042dc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e0:	f042 0202 	orr.w	r2, r2, #2
 80042e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80042e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	9303      	str	r3, [sp, #12]
 80042ee:	9803      	ldr	r0, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80042f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f4:	2302      	movs	r3, #2
 80042f6:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80042f8:	2509      	movs	r5, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fa:	a904      	add	r1, sp, #16
 80042fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004300:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004304:	e9cd 6706 	strd	r6, r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004308:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800430a:	f002 f867 	bl	80063dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800430e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004310:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004312:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004316:	480e      	ldr	r0, [pc, #56]	; (8004350 <HAL_FDCAN_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004318:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800431a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800431e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004322:	f002 f85b 	bl	80063dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004326:	4622      	mov	r2, r4
 8004328:	4621      	mov	r1, r4
 800432a:	2015      	movs	r0, #21
 800432c:	f001 fb1e 	bl	800596c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004330:	2015      	movs	r0, #21
 8004332:	f001 fb53 	bl	80059dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8004336:	4622      	mov	r2, r4
 8004338:	4621      	mov	r1, r4
 800433a:	2016      	movs	r0, #22
 800433c:	f001 fb16 	bl	800596c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004340:	2016      	movs	r0, #22
 8004342:	f001 fb4b 	bl	80059dc <HAL_NVIC_EnableIRQ>
}
 8004346:	b00b      	add	sp, #44	; 0x2c
 8004348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800434a:	bf00      	nop
 800434c:	40006400 	.word	0x40006400
 8004350:	48000400 	.word	0x48000400

08004354 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004354:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8004356:	6802      	ldr	r2, [r0, #0]
 8004358:	4929      	ldr	r1, [pc, #164]	; (8004400 <HAL_OPAMP_MspInit+0xac>)
{
 800435a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800435c:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 800435e:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004360:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004364:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004368:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 800436a:	d007      	beq.n	800437c <HAL_OPAMP_MspInit+0x28>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 800436c:	4925      	ldr	r1, [pc, #148]	; (8004404 <HAL_OPAMP_MspInit+0xb0>)
 800436e:	428a      	cmp	r2, r1
 8004370:	d01a      	beq.n	80043a8 <HAL_OPAMP_MspInit+0x54>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8004372:	4925      	ldr	r1, [pc, #148]	; (8004408 <HAL_OPAMP_MspInit+0xb4>)
 8004374:	428a      	cmp	r2, r1
 8004376:	d02d      	beq.n	80043d4 <HAL_OPAMP_MspInit+0x80>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8004378:	b00a      	add	sp, #40	; 0x28
 800437a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800437c:	4a23      	ldr	r2, [pc, #140]	; (800440c <HAL_OPAMP_MspInit+0xb8>)
 800437e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004380:	f041 0101 	orr.w	r1, r1, #1
 8004384:	64d1      	str	r1, [r2, #76]	; 0x4c
 8004386:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800438a:	f002 0201 	and.w	r2, r2, #1
 800438e:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8004390:	2303      	movs	r3, #3
 8004392:	220e      	movs	r2, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004394:	a904      	add	r1, sp, #16
 8004396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800439a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439e:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a0:	f002 f81c 	bl	80063dc <HAL_GPIO_Init>
}
 80043a4:	b00a      	add	sp, #40	; 0x28
 80043a6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_OPAMP_MspInit+0xb8>)
 80043aa:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80043ac:	f041 0101 	orr.w	r1, r1, #1
 80043b0:	64d1      	str	r1, [r2, #76]	; 0x4c
 80043b2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b4:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b6:	f002 0201 	and.w	r2, r2, #1
 80043ba:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80043bc:	2303      	movs	r3, #3
 80043be:	22e0      	movs	r2, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c0:	a904      	add	r1, sp, #16
 80043c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80043c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ca:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043cc:	f002 f806 	bl	80063dc <HAL_GPIO_Init>
}
 80043d0:	b00a      	add	sp, #40	; 0x28
 80043d2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d4:	4a0d      	ldr	r2, [pc, #52]	; (800440c <HAL_OPAMP_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d6:	480e      	ldr	r0, [pc, #56]	; (8004410 <HAL_OPAMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80043da:	f041 0102 	orr.w	r1, r1, #2
 80043de:	64d1      	str	r1, [r2, #76]	; 0x4c
 80043e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e2:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043e4:	f002 0202 	and.w	r2, r2, #2
 80043e8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80043ea:	2303      	movs	r3, #3
 80043ec:	2207      	movs	r2, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ee:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80043f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f4:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f6:	f001 fff1 	bl	80063dc <HAL_GPIO_Init>
}
 80043fa:	b00a      	add	sp, #40	; 0x28
 80043fc:	bd10      	pop	{r4, pc}
 80043fe:	bf00      	nop
 8004400:	40010300 	.word	0x40010300
 8004404:	40010304 	.word	0x40010304
 8004408:	40010308 	.word	0x40010308
 800440c:	40021000 	.word	0x40021000
 8004410:	48000400 	.word	0x48000400

08004414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004414:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 8004416:	4a23      	ldr	r2, [pc, #140]	; (80044a4 <HAL_TIM_Base_MspInit+0x90>)
 8004418:	6803      	ldr	r3, [r0, #0]
 800441a:	4293      	cmp	r3, r2
{
 800441c:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 800441e:	d008      	beq.n	8004432 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004424:	d027      	beq.n	8004476 <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004426:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_TIM_Base_MspInit+0x94>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00f      	beq.n	800444c <HAL_TIM_Base_MspInit+0x38>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800442c:	b005      	add	sp, #20
 800442e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004432:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <HAL_TIM_Base_MspInit+0x98>)
 8004434:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443a:	661a      	str	r2, [r3, #96]	; 0x60
 800443c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	9b01      	ldr	r3, [sp, #4]
}
 8004446:	b005      	add	sp, #20
 8004448:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800444c:	4b17      	ldr	r3, [pc, #92]	; (80044ac <HAL_TIM_Base_MspInit+0x98>)
 800444e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004450:	f042 0202 	orr.w	r2, r2, #2
 8004454:	659a      	str	r2, [r3, #88]	; 0x58
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004458:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004460:	4611      	mov	r1, r2
 8004462:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004464:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004466:	f001 fa81 	bl	800596c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800446a:	201d      	movs	r0, #29
}
 800446c:	b005      	add	sp, #20
 800446e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004472:	f001 bab3 	b.w	80059dc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004476:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800447a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800447c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	659a      	str	r2, [r3, #88]	; 0x58
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004486:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800448e:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004490:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004492:	f001 fa6b 	bl	800596c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004496:	201c      	movs	r0, #28
}
 8004498:	b005      	add	sp, #20
 800449a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800449e:	f001 ba9d 	b.w	80059dc <HAL_NVIC_EnableIRQ>
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40021000 	.word	0x40021000

080044b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80044b0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 80044b2:	6801      	ldr	r1, [r0, #0]
 80044b4:	4a18      	ldr	r2, [pc, #96]	; (8004518 <HAL_TIM_Encoder_MspInit+0x68>)
{
 80044b6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b8:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 80044ba:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80044c4:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 80044c6:	d001      	beq.n	80044cc <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80044c8:	b009      	add	sp, #36	; 0x24
 80044ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044d0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d4:	4811      	ldr	r0, [pc, #68]	; (800451c <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044d8:	f042 0204 	orr.w	r2, r2, #4
 80044dc:	659a      	str	r2, [r3, #88]	; 0x58
 80044de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044e0:	f002 0204 	and.w	r2, r2, #4
 80044e4:	9200      	str	r2, [sp, #0]
 80044e6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ea:	f042 0202 	orr.w	r2, r2, #2
 80044ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044f8:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fa:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 80044fe:	2200      	movs	r2, #0
 8004500:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004502:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004504:	24c0      	movs	r4, #192	; 0xc0
 8004506:	2502      	movs	r5, #2
 8004508:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800450c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004510:	f001 ff64 	bl	80063dc <HAL_GPIO_Init>
}
 8004514:	b009      	add	sp, #36	; 0x24
 8004516:	bd30      	pop	{r4, r5, pc}
 8004518:	40000800 	.word	0x40000800
 800451c:	48000400 	.word	0x48000400

08004520 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004520:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004522:	6801      	ldr	r1, [r0, #0]
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <HAL_TIM_MspPostInit+0xb0>)
{
 8004526:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004528:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800452a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004530:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004534:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8004536:	d001      	beq.n	800453c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004538:	b00b      	add	sp, #44	; 0x2c
 800453a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800453c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004540:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004544:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004548:	4822      	ldr	r0, [pc, #136]	; (80045d4 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800454a:	f042 0204 	orr.w	r2, r2, #4
 800454e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004552:	f002 0204 	and.w	r2, r2, #4
 8004556:	9201      	str	r2, [sp, #4]
 8004558:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800455a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800455c:	f042 0202 	orr.w	r2, r2, #2
 8004560:	64da      	str	r2, [r3, #76]	; 0x4c
 8004562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004564:	f002 0202 	and.w	r2, r2, #2
 8004568:	9202      	str	r2, [sp, #8]
 800456a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800456c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	64da      	str	r2, [r3, #76]	; 0x4c
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 800457c:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457e:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004580:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004584:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004586:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004588:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 800458a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800458e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004590:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004594:	f001 ff22 	bl	80063dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8004598:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800459c:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800459e:	a904      	add	r1, sp, #16
 80045a0:	480d      	ldr	r0, [pc, #52]	; (80045d8 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80045a2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80045a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80045ac:	f44f 56b8 	mov.w	r6, #5888	; 0x1700
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80045b0:	f001 ff14 	bl	80063dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80045b4:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80045b6:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b8:	a904      	add	r1, sp, #16
 80045ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80045be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80045c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80045c6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c8:	f001 ff08 	bl	80063dc <HAL_GPIO_Init>
}
 80045cc:	b00b      	add	sp, #44	; 0x2c
 80045ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	48000800 	.word	0x48000800
 80045d8:	48000400 	.word	0x48000400

080045dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045dc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80045de:	6802      	ldr	r2, [r0, #0]
 80045e0:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <HAL_UART_MspInit+0xc4>)
{
 80045e2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e4:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 80045e6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80045ec:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80045f0:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 80045f2:	d001      	beq.n	80045f8 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80045f4:	b008      	add	sp, #32
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80045f8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    hdma_usart2_rx.Instance = DMA2_Channel2;
 80045fc:	4e29      	ldr	r6, [pc, #164]	; (80046a4 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80045fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004600:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004604:	659a      	str	r2, [r3, #88]	; 0x58
 8004606:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004608:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800460c:	9200      	str	r2, [sp, #0]
 800460e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004612:	f042 0202 	orr.w	r2, r2, #2
 8004616:	64da      	str	r2, [r3, #76]	; 0x4c
 8004618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004620:	2218      	movs	r2, #24
 8004622:	2302      	movs	r3, #2
 8004624:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004628:	2200      	movs	r2, #0
 800462a:	2300      	movs	r3, #0
 800462c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004630:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004632:	2307      	movs	r3, #7
 8004634:	4605      	mov	r5, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004636:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004638:	481b      	ldr	r0, [pc, #108]	; (80046a8 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800463a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463c:	f001 fece 	bl	80063dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel2;
 8004640:	491a      	ldr	r1, [pc, #104]	; (80046ac <HAL_UART_MspInit+0xd0>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004642:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004644:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004646:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004648:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800464a:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800464e:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004652:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004656:	60f4      	str	r4, [r6, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004658:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800465a:	f001 fae5 	bl	8005c28 <HAL_DMA_Init>
 800465e:	b9c0      	cbnz	r0, 8004692 <HAL_UART_MspInit+0xb6>
    hdma_usart2_tx.Instance = DMA2_Channel3;
 8004660:	4c13      	ldr	r4, [pc, #76]	; (80046b0 <HAL_UART_MspInit+0xd4>)
 8004662:	4814      	ldr	r0, [pc, #80]	; (80046b4 <HAL_UART_MspInit+0xd8>)
 8004664:	6020      	str	r0, [r4, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004666:	231b      	movs	r3, #27
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004668:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800466a:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800466c:	6063      	str	r3, [r4, #4]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800466e:	67ee      	str	r6, [r5, #124]	; 0x7c
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004670:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004672:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004674:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004678:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800467c:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004680:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004682:	60a1      	str	r1, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004684:	f001 fad0 	bl	8005c28 <HAL_DMA_Init>
 8004688:	b930      	cbnz	r0, 8004698 <HAL_UART_MspInit+0xbc>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800468a:	67ac      	str	r4, [r5, #120]	; 0x78
 800468c:	62a5      	str	r5, [r4, #40]	; 0x28
}
 800468e:	b008      	add	sp, #32
 8004690:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004692:	f7fc fe31 	bl	80012f8 <Error_Handler>
 8004696:	e7e3      	b.n	8004660 <HAL_UART_MspInit+0x84>
      Error_Handler();
 8004698:	f7fc fe2e 	bl	80012f8 <Error_Handler>
 800469c:	e7f5      	b.n	800468a <HAL_UART_MspInit+0xae>
 800469e:	bf00      	nop
 80046a0:	40004400 	.word	0x40004400
 80046a4:	20000658 	.word	0x20000658
 80046a8:	48000400 	.word	0x48000400
 80046ac:	4002041c 	.word	0x4002041c
 80046b0:	20000944 	.word	0x20000944
 80046b4:	40020430 	.word	0x40020430

080046b8 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80046b8:	4801      	ldr	r0, [pc, #4]	; (80046c0 <FDCAN1_IT0_IRQHandler+0x8>)
 80046ba:	f001 bdc7 	b.w	800624c <HAL_FDCAN_IRQHandler>
 80046be:	bf00      	nop
 80046c0:	200009cc 	.word	0x200009cc

080046c4 <FDCAN1_IT1_IRQHandler>:
 80046c4:	4801      	ldr	r0, [pc, #4]	; (80046cc <FDCAN1_IT1_IRQHandler+0x8>)
 80046c6:	f001 bdc1 	b.w	800624c <HAL_FDCAN_IRQHandler>
 80046ca:	bf00      	nop
 80046cc:	200009cc 	.word	0x200009cc

080046d0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046d0:	4801      	ldr	r0, [pc, #4]	; (80046d8 <TIM2_IRQHandler+0x8>)
 80046d2:	f003 b9b1 	b.w	8007a38 <HAL_TIM_IRQHandler>
 80046d6:	bf00      	nop
 80046d8:	20000aa8 	.word	0x20000aa8

080046dc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80046dc:	4801      	ldr	r0, [pc, #4]	; (80046e4 <TIM3_IRQHandler+0x8>)
 80046de:	f003 b9ab 	b.w	8007a38 <HAL_TIM_IRQHandler>
 80046e2:	bf00      	nop
 80046e4:	2000082c 	.word	0x2000082c

080046e8 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80046e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  TSK_HighFrequencyTask();
 80046f0:	f7fe b816 	b.w	8002720 <TSK_HighFrequencyTask>

080046f4 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80046f4:	4b03      	ldr	r3, [pc, #12]	; (8004704 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80046f6:	4804      	ldr	r0, [pc, #16]	; (8004708 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80046f8:	f06f 0201 	mvn.w	r2, #1
 80046fc:	611a      	str	r2, [r3, #16]
 80046fe:	f005 baab 	b.w	8009c58 <R3_2_TIMx_UP_IRQHandler>
 8004702:	bf00      	nop
 8004704:	40012c00 	.word	0x40012c00
 8004708:	20000318 	.word	0x20000318

0800470c <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 800470c:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	0611      	lsls	r1, r2, #24
 8004714:	d505      	bpl.n	8004722 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004716:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 800471a:	480a      	ldr	r0, [pc, #40]	; (8004744 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800471c:	611a      	str	r2, [r3, #16]
 800471e:	f005 faff 	bl	8009d20 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	05d2      	lsls	r2, r2, #23
 8004728:	d505      	bpl.n	8004736 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800472a:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 800472e:	4805      	ldr	r0, [pc, #20]	; (8004744 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004730:	611a      	str	r2, [r3, #16]
 8004732:	f005 fad3 	bl	8009cdc <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800473a:	f7fd bfa9 	b.w	8002690 <MC_Scheduler>
 800473e:	bf00      	nop
 8004740:	40012c00 	.word	0x40012c00
 8004744:	20000318 	.word	0x20000318

08004748 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8004748:	4806      	ldr	r0, [pc, #24]	; (8004764 <TIM4_IRQHandler+0x1c>)
 800474a:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	07d1      	lsls	r1, r2, #31
 8004750:	d502      	bpl.n	8004758 <TIM4_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	07d2      	lsls	r2, r2, #31
 8004756:	d400      	bmi.n	800475a <TIM4_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8004758:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800475a:	f06f 0201 	mvn.w	r2, #1
 800475e:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 8004760:	f004 b984 	b.w	8008a6c <ENC_IRQHandler>
 8004764:	200000e8 	.word	0x200000e8

08004768 <DMA2_Channel2_IRQHandler>:
  WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL);
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <DMA2_Channel2_IRQHandler+0x14>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	0692      	lsls	r2, r2, #26
 800476e:	d400      	bmi.n	8004772 <DMA2_Channel2_IRQHandler+0xa>
  }
  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

}
 8004770:	4770      	bx	lr
  WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004772:	2220      	movs	r2, #32
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8004774:	4802      	ldr	r0, [pc, #8]	; (8004780 <DMA2_Channel2_IRQHandler+0x18>)
 8004776:	605a      	str	r2, [r3, #4]
 8004778:	f7fc bccc 	b.w	8001114 <ASPEP_HWDataReceivedIT>
 800477c:	40020400 	.word	0x40020400
 8004780:	2000058c 	.word	0x2000058c

08004784 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <USART2_IRQHandler+0x98>)
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	0650      	lsls	r0, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USARTA_IRQHandler(void)
{
 800478a:	b510      	push	{r4, lr}
 800478c:	d509      	bpl.n	80047a2 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800478e:	4924      	ldr	r1, [pc, #144]	; (8004820 <USART2_IRQHandler+0x9c>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8004790:	4824      	ldr	r0, [pc, #144]	; (8004824 <USART2_IRQHandler+0xa0>)
 8004792:	680a      	ldr	r2, [r1, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004794:	2440      	movs	r4, #64	; 0x40
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	600a      	str	r2, [r1, #0]
 800479c:	621c      	str	r4, [r3, #32]
 800479e:	f7fc fb4d 	bl	8000e3c <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80047a2:	4b1e      	ldr	r3, [pc, #120]	; (800481c <USART2_IRQHandler+0x98>)
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	0711      	lsls	r1, r2, #28
 80047a8:	d402      	bmi.n	80047b0 <USART2_IRQHandler+0x2c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	0792      	lsls	r2, r2, #30
 80047ae:	d52c      	bpl.n	800480a <USART2_IRQHandler+0x86>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80047b0:	4b1a      	ldr	r3, [pc, #104]	; (800481c <USART2_IRQHandler+0x98>)
 80047b2:	689a      	ldr	r2, [r3, #8]
   // LL_GPIO_ResetOutputPin( GPIOC , LL_GPIO_PIN_6  );
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 80047b4:	07d0      	lsls	r0, r2, #31
 80047b6:	d41d      	bmi.n	80047f4 <USART2_IRQHandler+0x70>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80047b8:	4b18      	ldr	r3, [pc, #96]	; (800481c <USART2_IRQHandler+0x98>)
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	06d1      	lsls	r1, r2, #27
 80047be:	d518      	bpl.n	80047f2 <USART2_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	06d2      	lsls	r2, r2, #27
 80047c4:	d515      	bpl.n	80047f2 <USART2_IRQHandler+0x6e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80047c6:	681a      	ldr	r2, [r3, #0]
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 80047c8:	4816      	ldr	r0, [pc, #88]	; (8004824 <USART2_IRQHandler+0xa0>)
 80047ca:	f022 0210 	bic.w	r2, r2, #16
 80047ce:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	609a      	str	r2, [r3, #8]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047de:	609a      	str	r2, [r3, #8]
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80047e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  }

  /* USER CODE BEGIN USARTA_IRQn 1 */

  /* USER CODE END USARTA_IRQn 1 */
}
 80047e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ec:	609a      	str	r2, [r3, #8]
    ASPEP_HWDMAReset (&aspepOverUartA);
 80047ee:	f7fc bce1 	b.w	80011b4 <ASPEP_HWDMAReset>
}
 80047f2:	bd10      	pop	{r4, pc}
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 80047f4:	220e      	movs	r2, #14
 80047f6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	f042 0210 	orr.w	r2, r2, #16
 8004806:	601a      	str	r2, [r3, #0]
}
 8004808:	e7d6      	b.n	80047b8 <USART2_IRQHandler+0x34>
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	075c      	lsls	r4, r3, #29
 800480e:	d5d3      	bpl.n	80047b8 <USART2_IRQHandler+0x34>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004810:	4b02      	ldr	r3, [pc, #8]	; (800481c <USART2_IRQHandler+0x98>)
 8004812:	689a      	ldr	r2, [r3, #8]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8004814:	07d0      	lsls	r0, r2, #31
 8004816:	d5cf      	bpl.n	80047b8 <USART2_IRQHandler+0x34>
 8004818:	e7ec      	b.n	80047f4 <USART2_IRQHandler+0x70>
 800481a:	bf00      	nop
 800481c:	40004400 	.word	0x40004400
 8004820:	40020430 	.word	0x40020430
 8004824:	2000058c 	.word	0x2000058c

08004828 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004828:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800482a:	f7fe f871 	bl	8002910 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800482e:	e7fe      	b.n	800482e <HardFault_Handler+0x6>

08004830 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004830:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004832:	4c0a      	ldr	r4, [pc, #40]	; (800485c <SysTick_Handler+0x2c>)
 8004834:	7823      	ldrb	r3, [r4, #0]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d006      	beq.n	8004848 <SysTick_Handler+0x18>
 800483a:	3301      	adds	r3, #1
 800483c:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800483e:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004844:	f7fe b858 	b.w	80028f8 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8004848:	f000 f8c0 	bl	80049cc <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800484c:	f001 f8f0 	bl	8005a30 <HAL_SYSTICK_IRQHandler>
 8004850:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8004852:	7023      	strb	r3, [r4, #0]
}
 8004854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004858:	f7fe b84e 	b.w	80028f8 <MC_RunMotorControlTasks>
 800485c:	20000604 	.word	0x20000604

08004860 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004860:	4b04      	ldr	r3, [pc, #16]	; (8004874 <EXTI15_10_IRQHandler+0x14>)
 8004862:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 8004864:	0552      	lsls	r2, r2, #21
 8004866:	d400      	bmi.n	800486a <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    UI_HandleStartStopButton_cb ();
  }

}
 8004868:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800486a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800486e:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8004870:	f7fe b85e 	b.w	8002930 <UI_HandleStartStopButton_cb>
 8004874:	40010400 	.word	0x40010400

08004878 <UASPEP_INIT>:
}

void UASPEP_DAMCONFIG_TX (UASPEP_Handle_t *pHandle)
{
/* Enable DMA UART */
 LL_USART_ClearFlag_TC (pHandle->USARTx);
 8004878:	6803      	ldr	r3, [r0, #0]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 800487a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800487e:	2140      	movs	r1, #64	; 0x40
{
 8004880:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004882:	6906      	ldr	r6, [r0, #16]
 8004884:	6219      	str	r1, [r3, #32]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4c11      	ldr	r4, [pc, #68]	; (80048d0 <UASPEP_INIT+0x58>)
 800488a:	6885      	ldr	r5, [r0, #8]
 800488c:	5da7      	ldrb	r7, [r4, r6]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 800488e:	f814 400c 	ldrb.w	r4, [r4, ip]
 8004892:	430a      	orrs	r2, r1
 8004894:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004896:	689e      	ldr	r6, [r3, #8]
 8004898:	6842      	ldr	r2, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800489a:	19e8      	adds	r0, r5, r7
 800489c:	f046 0580 	orr.w	r5, r6, #128	; 0x80
/* Enable DMA UART to start the TX request */
 LL_USART_EnableDMAReq_TX (pHandle->USARTx);

/* Write the USART_TDR register address in the DMA control register to configure it as
the destination of the transfer. */
  LL_DMA_SetPeriphAddress ( pHandle->txDMA, pHandle->txChannel , ( uint32_t ) &pHandle->USARTx->TDR );
 80048a0:	f103 0628 	add.w	r6, r3, #40	; 0x28
 80048a4:	609d      	str	r5, [r3, #8]
 80048a6:	6086      	str	r6, [r0, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80048a8:	6219      	str	r1, [r3, #32]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 80048aa:	5910      	ldr	r0, [r2, r4]
 80048ac:	f040 0002 	orr.w	r0, r0, #2
 80048b0:	5110      	str	r0, [r2, r4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80048b2:	6898      	ldr	r0, [r3, #8]
 80048b4:	4422      	add	r2, r4
 80048b6:	f040 0001 	orr.w	r0, r0, #1
  /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
 LL_USART_EnableIT_ERROR (pHandle->USARTx);

/* Write the USART_RDR register address in the DMA control register to configure it as
the source of the transfer. */
 LL_DMA_SetPeriphAddress ( pHandle->rxDMA, pHandle->rxChannel , ( uint32_t ) &pHandle->USARTx->RDR );
 80048ba:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80048be:	6098      	str	r0, [r3, #8]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80048c0:	6094      	str	r4, [r2, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80048c2:	6219      	str	r1, [r3, #32]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	430a      	orrs	r2, r1
}
 80048c8:	bcf0      	pop	{r4, r5, r6, r7}
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	0800a7a0 	.word	0x0800a7a0

080048d4 <UASPEP_SEND_PACKET>:

 LL_USART_EnableDMAReq_RX (pHandle->USARTx);
}

bool UASPEP_SEND_PACKET (void *pHWHandle, void *data, uint16_t length)
{
 80048d4:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80048d6:	6903      	ldr	r3, [r0, #16]
 80048d8:	4c0b      	ldr	r4, [pc, #44]	; (8004908 <UASPEP_SEND_PACKET+0x34>)
 80048da:	6880      	ldr	r0, [r0, #8]
 80048dc:	5ce3      	ldrb	r3, [r4, r3]
 80048de:	58c4      	ldr	r4, [r0, r3]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  bool result;
  if ( LL_DMA_IsEnabledChannel (pHandle->txDMA, pHandle->txChannel) )
 80048e0:	07e4      	lsls	r4, r4, #31
 80048e2:	eb00 0503 	add.w	r5, r0, r3
 80048e6:	d40c      	bmi.n	8004902 <UASPEP_SEND_PACKET+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80048e8:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80048ea:	6869      	ldr	r1, [r5, #4]
 80048ec:	0c09      	lsrs	r1, r1, #16
 80048ee:	0409      	lsls	r1, r1, #16
 80048f0:	430a      	orrs	r2, r1
 80048f2:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80048f4:	58c2      	ldr	r2, [r0, r3]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	50c2      	str	r2, [r0, r3]
    LL_DMA_SetDataLength( pHandle->txDMA, pHandle->txChannel, length );
    LL_DMA_EnableChannel( pHandle->txDMA, pHandle->txChannel );
   result = true;
  }
  return result;
}
 80048fc:	bc30      	pop	{r4, r5}
   result = true;
 80048fe:	2001      	movs	r0, #1
}
 8004900:	4770      	bx	lr
    result = false;
 8004902:	2000      	movs	r0, #0
}
 8004904:	bc30      	pop	{r4, r5}
 8004906:	4770      	bx	lr
 8004908:	0800a7a0 	.word	0x0800a7a0

0800490c <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER (void *pHWHandle, void* buffer, uint16_t length)
{
 800490c:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800490e:	68c3      	ldr	r3, [r0, #12]
 8004910:	4d09      	ldr	r5, [pc, #36]	; (8004938 <UASPEP_RECEIVE_BUFFER+0x2c>)
 8004912:	6844      	ldr	r4, [r0, #4]
 8004914:	5ce8      	ldrb	r0, [r5, r3]
 8004916:	5823      	ldr	r3, [r4, r0]
 8004918:	1825      	adds	r5, r4, r0
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8004920:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004922:	686b      	ldr	r3, [r5, #4]
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	431a      	orrs	r2, r3
 800492a:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800492c:	5823      	ldr	r3, [r4, r0]
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  LL_DMA_DisableChannel( pHandle->rxDMA, pHandle->rxChannel );
  LL_DMA_SetMemoryAddress( pHandle->rxDMA, pHandle->rxChannel, (uint32_t) buffer );
  LL_DMA_SetDataLength(  pHandle->rxDMA, pHandle->rxChannel, length );
  LL_DMA_EnableChannel(  pHandle->rxDMA, pHandle->rxChannel );
}
 8004934:	bc30      	pop	{r4, r5}
 8004936:	4770      	bx	lr
 8004938:	0800a7a0 	.word	0x0800a7a0

0800493c <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE (void *pHWHandle)
{
   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
   LL_USART_ClearFlag_IDLE (pHandle->USARTx);
 800493c:	6803      	ldr	r3, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800493e:	2210      	movs	r2, #16
 8004940:	621a      	str	r2, [r3, #32]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	f042 0210 	orr.w	r2, r2, #16
 8004948:	601a      	str	r2, [r3, #0]
   LL_USART_EnableIT_IDLE (pHandle->USARTx);
}
 800494a:	4770      	bx	lr

0800494c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800494c:	4a03      	ldr	r2, [pc, #12]	; (800495c <SystemInit+0x10>)
 800494e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004952:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004956:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800495a:	4770      	bx	lr
 800495c:	e000ed00 	.word	0xe000ed00

08004960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004960:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <HAL_InitTick+0x40>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	b90b      	cbnz	r3, 800496c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004968:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800496a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800496c:	490d      	ldr	r1, [pc, #52]	; (80049a4 <HAL_InitTick+0x44>)
 800496e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004972:	4605      	mov	r5, r0
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	6808      	ldr	r0, [r1, #0]
 800497a:	fbb0 f0f3 	udiv	r0, r0, r3
 800497e:	f001 f83b 	bl	80059f8 <HAL_SYSTICK_Config>
 8004982:	4604      	mov	r4, r0
 8004984:	2800      	cmp	r0, #0
 8004986:	d1ef      	bne.n	8004968 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004988:	2d0f      	cmp	r5, #15
 800498a:	d8ed      	bhi.n	8004968 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800498c:	4602      	mov	r2, r0
 800498e:	4629      	mov	r1, r5
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	f000 ffea 	bl	800596c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <HAL_InitTick+0x48>)
 800499a:	4620      	mov	r0, r4
 800499c:	601d      	str	r5, [r3, #0]
}
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	2000060c 	.word	0x2000060c
 80049a4:	20000608 	.word	0x20000608
 80049a8:	20000610 	.word	0x20000610

080049ac <HAL_Init>:
{
 80049ac:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049ae:	2003      	movs	r0, #3
 80049b0:	f000 ffc8 	bl	8005944 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049b4:	2004      	movs	r0, #4
 80049b6:	f7ff ffd3 	bl	8004960 <HAL_InitTick>
 80049ba:	b110      	cbz	r0, 80049c2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80049bc:	2401      	movs	r4, #1
}
 80049be:	4620      	mov	r0, r4
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	4604      	mov	r4, r0
    HAL_MspInit();
 80049c4:	f7ff fb3c 	bl	8004040 <HAL_MspInit>
}
 80049c8:	4620      	mov	r0, r4
 80049ca:	bd10      	pop	{r4, pc}

080049cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80049cc:	4a03      	ldr	r2, [pc, #12]	; (80049dc <HAL_IncTick+0x10>)
 80049ce:	4904      	ldr	r1, [pc, #16]	; (80049e0 <HAL_IncTick+0x14>)
 80049d0:	6813      	ldr	r3, [r2, #0]
 80049d2:	6809      	ldr	r1, [r1, #0]
 80049d4:	440b      	add	r3, r1
 80049d6:	6013      	str	r3, [r2, #0]
}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20001e6c 	.word	0x20001e6c
 80049e0:	2000060c 	.word	0x2000060c

080049e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80049e4:	4b01      	ldr	r3, [pc, #4]	; (80049ec <HAL_GetTick+0x8>)
 80049e6:	6818      	ldr	r0, [r3, #0]
}
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20001e6c 	.word	0x20001e6c

080049f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80049f4:	f7ff fff6 	bl	80049e4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049f8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80049fa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80049fc:	d002      	beq.n	8004a04 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80049fe:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <HAL_Delay+0x20>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a04:	f7ff ffee 	bl	80049e4 <HAL_GetTick>
 8004a08:	1b43      	subs	r3, r0, r5
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	d3fa      	bcc.n	8004a04 <HAL_Delay+0x14>
  {
  }
}
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	2000060c 	.word	0x2000060c

08004a14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	f000 80cb 	beq.w	8004bb8 <HAL_ADC_Init+0x1a4>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a22:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004a24:	4604      	mov	r4, r0
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	f000 8094 	beq.w	8004b54 <HAL_ADC_Init+0x140>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a2c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a2e:	6893      	ldr	r3, [r2, #8]
 8004a30:	009d      	lsls	r5, r3, #2
 8004a32:	d505      	bpl.n	8004a40 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a34:	6893      	ldr	r3, [r2, #8]
 8004a36:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004a3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a3e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a40:	6893      	ldr	r3, [r2, #8]
 8004a42:	00d8      	lsls	r0, r3, #3
 8004a44:	d419      	bmi.n	8004a7a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a46:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <HAL_ADC_Init+0x1f8>)
 8004a48:	4871      	ldr	r0, [pc, #452]	; (8004c10 <HAL_ADC_Init+0x1fc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004a4c:	6891      	ldr	r1, [r2, #8]
 8004a4e:	099b      	lsrs	r3, r3, #6
 8004a50:	fba0 0303 	umull	r0, r3, r0, r3
 8004a54:	099b      	lsrs	r3, r3, #6
 8004a56:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004a66:	6091      	str	r1, [r2, #8]
 8004a68:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004a6a:	9b01      	ldr	r3, [sp, #4]
 8004a6c:	b12b      	cbz	r3, 8004a7a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004a6e:	9b01      	ldr	r3, [sp, #4]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004a74:	9b01      	ldr	r3, [sp, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f9      	bne.n	8004a6e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a7a:	6893      	ldr	r3, [r2, #8]
 8004a7c:	00d9      	lsls	r1, r3, #3
 8004a7e:	d45b      	bmi.n	8004b38 <HAL_ADC_Init+0x124>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a82:	f043 0310 	orr.w	r3, r3, #16
 8004a86:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a88:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a90:	6893      	ldr	r3, [r2, #8]
 8004a92:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8004a96:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a9c:	d153      	bne.n	8004b46 <HAL_ADC_Init+0x132>
 8004a9e:	06db      	lsls	r3, r3, #27
 8004aa0:	d451      	bmi.n	8004b46 <HAL_ADC_Init+0x132>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aa2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004aa4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004aa8:	f043 0302 	orr.w	r3, r3, #2
 8004aac:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aae:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ab0:	07de      	lsls	r6, r3, #31
 8004ab2:	d40e      	bmi.n	8004ad2 <HAL_ADC_Init+0xbe>
 8004ab4:	4b57      	ldr	r3, [pc, #348]	; (8004c14 <HAL_ADC_Init+0x200>)
 8004ab6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004aba:	6889      	ldr	r1, [r1, #8]
 8004abc:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	07dd      	lsls	r5, r3, #31
 8004ac2:	d406      	bmi.n	8004ad2 <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004ac4:	4954      	ldr	r1, [pc, #336]	; (8004c18 <HAL_ADC_Init+0x204>)
 8004ac6:	6865      	ldr	r5, [r4, #4]
 8004ac8:	688b      	ldr	r3, [r1, #8]
 8004aca:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004ace:	432b      	orrs	r3, r5
 8004ad0:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004ad2:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8004ad6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ad8:	432b      	orrs	r3, r5
 8004ada:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004adc:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ade:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004ae2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ae6:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ae8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004aec:	d05f      	beq.n	8004bae <HAL_ADC_Init+0x19a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004aee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004af0:	b121      	cbz	r1, 8004afc <HAL_ADC_Init+0xe8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004af2:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004af4:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004af8:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004afa:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004afc:	68d6      	ldr	r6, [r2, #12]
 8004afe:	4947      	ldr	r1, [pc, #284]	; (8004c1c <HAL_ADC_Init+0x208>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004b00:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004b02:	4031      	ands	r1, r6
 8004b04:	430b      	orrs	r3, r1
 8004b06:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004b08:	6913      	ldr	r3, [r2, #16]
 8004b0a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004b0e:	432b      	orrs	r3, r5
 8004b10:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b12:	6893      	ldr	r3, [r2, #8]
 8004b14:	0759      	lsls	r1, r3, #29
 8004b16:	d523      	bpl.n	8004b60 <HAL_ADC_Init+0x14c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b18:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b1a:	6963      	ldr	r3, [r4, #20]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d04e      	beq.n	8004bbe <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004b22:	f023 030f 	bic.w	r3, r3, #15
 8004b26:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004b34:	b002      	add	sp, #8
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b38:	6893      	ldr	r3, [r2, #8]
 8004b3a:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b3e:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b44:	d0ab      	beq.n	8004a9e <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b46:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004b48:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b4a:	f043 0310 	orr.w	r3, r3, #16
 8004b4e:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8004b50:	b002      	add	sp, #8
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8004b54:	f7ff fa94 	bl	8004080 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004b58:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004b5a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8004b5e:	e765      	b.n	8004a2c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b60:	6893      	ldr	r3, [r2, #8]
 8004b62:	071b      	lsls	r3, r3, #28
 8004b64:	d4d9      	bmi.n	8004b1a <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004b66:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b68:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b6c:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 8004b6e:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004b70:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b74:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004b76:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b7a:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004b82:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004b84:	bb1d      	cbnz	r5, 8004bce <HAL_ADC_Init+0x1ba>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004b8c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004b90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b98:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004b9c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d021      	beq.n	8004be8 <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004ba4:	6913      	ldr	r3, [r2, #16]
 8004ba6:	f023 0301 	bic.w	r3, r3, #1
 8004baa:	6113      	str	r3, [r2, #16]
 8004bac:	e7b5      	b.n	8004b1a <HAL_ADC_Init+0x106>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004bae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004bb0:	3901      	subs	r1, #1
 8004bb2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004bb6:	e79a      	b.n	8004aee <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 8004bb8:	2001      	movs	r0, #1
}
 8004bba:	b002      	add	sp, #8
 8004bbc:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004bbe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bc0:	6a23      	ldr	r3, [r4, #32]
 8004bc2:	f021 010f 	bic.w	r1, r1, #15
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6313      	str	r3, [r2, #48]	; 0x30
 8004bcc:	e7ac      	b.n	8004b28 <HAL_ADC_Init+0x114>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd2:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004bd4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004bd8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004be0:	432b      	orrs	r3, r5
 8004be2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004be6:	e7d9      	b.n	8004b9c <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004be8:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8004bec:	6911      	ldr	r1, [r2, #16]
 8004bee:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004bf0:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004bf4:	f021 0104 	bic.w	r1, r1, #4
 8004bf8:	4333      	orrs	r3, r6
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004bfe:	432b      	orrs	r3, r5
 8004c00:	430b      	orrs	r3, r1
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	6113      	str	r3, [r2, #16]
 8004c08:	e787      	b.n	8004b1a <HAL_ADC_Init+0x106>
 8004c0a:	bf00      	nop
 8004c0c:	20000608 	.word	0x20000608
 8004c10:	053e2d63 	.word	0x053e2d63
 8004c14:	50000100 	.word	0x50000100
 8004c18:	50000300 	.word	0x50000300
 8004c1c:	fff04007 	.word	0xfff04007

08004c20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c20:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c22:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8004c26:	b083      	sub	sp, #12
 8004c28:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004c2a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004c2c:	f04f 0000 	mov.w	r0, #0
 8004c30:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004c32:	f000 8143 	beq.w	8004ebc <HAL_ADC_ConfigChannel+0x29c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c36:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c3e:	6894      	ldr	r4, [r2, #8]
 8004c40:	0766      	lsls	r6, r4, #29
 8004c42:	d43d      	bmi.n	8004cc0 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(*preg,
 8004c44:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c48:	09a6      	lsrs	r6, r4, #6
 8004c4a:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8004c4e:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8004c52:	f004 041f 	and.w	r4, r4, #31
 8004c56:	5977      	ldr	r7, [r6, r5]
 8004c58:	f04f 0c1f 	mov.w	ip, #31
 8004c5c:	fa0c fc04 	lsl.w	ip, ip, r4
 8004c60:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004c64:	ea27 070c 	bic.w	r7, r7, ip
 8004c68:	40a0      	lsls	r0, r4
 8004c6a:	4338      	orrs	r0, r7
 8004c6c:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c6e:	6890      	ldr	r0, [r2, #8]
 8004c70:	0745      	lsls	r5, r0, #29
 8004c72:	f140 809a 	bpl.w	8004daa <HAL_ADC_ConfigChannel+0x18a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c76:	6890      	ldr	r0, [r2, #8]
 8004c78:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c7a:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c7c:	07e4      	lsls	r4, r4, #31
 8004c7e:	d530      	bpl.n	8004ce2 <HAL_ADC_ConfigChannel+0xc2>
 8004c80:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c82:	49c2      	ldr	r1, [pc, #776]	; (8004f8c <HAL_ADC_ConfigChannel+0x36c>)
 8004c84:	420c      	tst	r4, r1
 8004c86:	d02a      	beq.n	8004cde <HAL_ADC_ConfigChannel+0xbe>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004c88:	49c1      	ldr	r1, [pc, #772]	; (8004f90 <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004c8a:	4dc2      	ldr	r5, [pc, #776]	; (8004f94 <HAL_ADC_ConfigChannel+0x374>)
 8004c8c:	6888      	ldr	r0, [r1, #8]
 8004c8e:	42ac      	cmp	r4, r5
 8004c90:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8004c94:	d01d      	beq.n	8004cd2 <HAL_ADC_ConfigChannel+0xb2>
 8004c96:	4dc0      	ldr	r5, [pc, #768]	; (8004f98 <HAL_ADC_ConfigChannel+0x378>)
 8004c98:	42ac      	cmp	r4, r5
 8004c9a:	d01a      	beq.n	8004cd2 <HAL_ADC_ConfigChannel+0xb2>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c9c:	4dbf      	ldr	r5, [pc, #764]	; (8004f9c <HAL_ADC_ConfigChannel+0x37c>)
 8004c9e:	42ac      	cmp	r4, r5
 8004ca0:	f040 813e 	bne.w	8004f20 <HAL_ADC_ConfigChannel+0x300>
 8004ca4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004ca8:	d119      	bne.n	8004cde <HAL_ADC_ConfigChannel+0xbe>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004caa:	4cbd      	ldr	r4, [pc, #756]	; (8004fa0 <HAL_ADC_ConfigChannel+0x380>)
 8004cac:	42a2      	cmp	r2, r4
 8004cae:	d016      	beq.n	8004cde <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004cb0:	688a      	ldr	r2, [r1, #8]
 8004cb2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004cb6:	4316      	orrs	r6, r2
 8004cb8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8004cbc:	608e      	str	r6, [r1, #8]
}
 8004cbe:	e003      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0xa8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cc2:	f042 0220 	orr.w	r2, r2, #32
 8004cc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004cce:	b003      	add	sp, #12
 8004cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cd2:	0201      	lsls	r1, r0, #8
 8004cd4:	d403      	bmi.n	8004cde <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cd6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004cda:	f000 8102 	beq.w	8004ee2 <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cde:	2000      	movs	r0, #0
 8004ce0:	e7f2      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ce2:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004ce4:	4caf      	ldr	r4, [pc, #700]	; (8004fa4 <HAL_ADC_ConfigChannel+0x384>)
 8004ce6:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004cea:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8004fb4 <HAL_ADC_ConfigChannel+0x394>
 8004cee:	f006 0718 	and.w	r7, r6, #24
 8004cf2:	40fc      	lsrs	r4, r7
 8004cf4:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8004cf8:	4004      	ands	r4, r0
 8004cfa:	ea25 0507 	bic.w	r5, r5, r7
 8004cfe:	432c      	orrs	r4, r5
 8004d00:	4566      	cmp	r6, ip
 8004d02:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004d06:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d08:	d1bb      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d0a:	2f00      	cmp	r7, #0
 8004d0c:	f000 80d9 	beq.w	8004ec2 <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d10:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d14:	2c00      	cmp	r4, #0
 8004d16:	f000 8181 	beq.w	800501c <HAL_ADC_ConfigChannel+0x3fc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004d1a:	fab4 f484 	clz	r4, r4
 8004d1e:	3401      	adds	r4, #1
 8004d20:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d24:	2c09      	cmp	r4, #9
 8004d26:	f240 8179 	bls.w	800501c <HAL_ADC_ConfigChannel+0x3fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004d2e:	2d00      	cmp	r5, #0
 8004d30:	f000 81d7 	beq.w	80050e2 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8004d34:	fab5 f585 	clz	r5, r5
 8004d38:	3501      	adds	r5, #1
 8004d3a:	06ad      	lsls	r5, r5, #26
 8004d3c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004d44:	2c00      	cmp	r4, #0
 8004d46:	f000 81d1 	beq.w	80050ec <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 8004d4a:	fab4 f484 	clz	r4, r4
 8004d4e:	3401      	adds	r4, #1
 8004d50:	f004 041f 	and.w	r4, r4, #31
 8004d54:	2601      	movs	r6, #1
 8004d56:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d5a:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004d60:	2800      	cmp	r0, #0
 8004d62:	f000 81c1 	beq.w	80050e8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004d66:	fab0 f480 	clz	r4, r0
 8004d6a:	3401      	adds	r4, #1
 8004d6c:	f004 041f 	and.w	r4, r4, #31
 8004d70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004d74:	f1a4 001e 	sub.w	r0, r4, #30
 8004d78:	0500      	lsls	r0, r0, #20
 8004d7a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d7e:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d80:	0dc7      	lsrs	r7, r0, #23
 8004d82:	f007 0704 	and.w	r7, r7, #4
 8004d86:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8004d8a:	688e      	ldr	r6, [r1, #8]
 8004d8c:	597c      	ldr	r4, [r7, r5]
 8004d8e:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004d92:	f04f 0c07 	mov.w	ip, #7
 8004d96:	fa0c fc00 	lsl.w	ip, ip, r0
 8004d9a:	ea24 040c 	bic.w	r4, r4, ip
 8004d9e:	fa06 f000 	lsl.w	r0, r6, r0
 8004da2:	4320      	orrs	r0, r4
 8004da4:	5178      	str	r0, [r7, r5]
 8004da6:	680c      	ldr	r4, [r1, #0]
}
 8004da8:	e76b      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004daa:	6890      	ldr	r0, [r2, #8]
 8004dac:	f010 0008 	ands.w	r0, r0, #8
 8004db0:	f040 8082 	bne.w	8004eb8 <HAL_ADC_ConfigChannel+0x298>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004db4:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004db6:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004db8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004dbc:	f000 80c4 	beq.w	8004f48 <HAL_ADC_ConfigChannel+0x328>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004dc0:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8004dc4:	f00c 0c04 	and.w	ip, ip, #4
 8004dc8:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8004dcc:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004dd0:	f85c 5007 	ldr.w	r5, [ip, r7]
 8004dd4:	f04f 0e07 	mov.w	lr, #7
 8004dd8:	fa0e fe06 	lsl.w	lr, lr, r6
 8004ddc:	40b4      	lsls	r4, r6
 8004dde:	ea25 050e 	bic.w	r5, r5, lr
 8004de2:	432c      	orrs	r4, r5
 8004de4:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004de8:	6954      	ldr	r4, [r2, #20]
 8004dea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004dee:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004df0:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004df4:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004df6:	f1bc 0f04 	cmp.w	ip, #4
 8004dfa:	d02e      	beq.n	8004e5a <HAL_ADC_ConfigChannel+0x23a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dfc:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8004e00:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8004fb8 <HAL_ADC_ConfigChannel+0x398>
 8004e04:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8004e08:	680f      	ldr	r7, [r1, #0]
 8004e0a:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004e0e:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8004e12:	694d      	ldr	r5, [r1, #20]
 8004e14:	0076      	lsls	r6, r6, #1
 8004e16:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8004e1a:	40b5      	lsls	r5, r6
 8004e1c:	ea47 070e 	orr.w	r7, r7, lr
 8004e20:	433d      	orrs	r5, r7
 8004e22:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8004e26:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e2a:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004e2c:	698e      	ldr	r6, [r1, #24]
 8004e2e:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8004e32:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8004e36:	4335      	orrs	r5, r6
 8004e38:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004e3c:	690e      	ldr	r6, [r1, #16]
 8004e3e:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8004e40:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8004e44:	2f01      	cmp	r7, #1
 8004e46:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8004e4a:	bf08      	it	eq
 8004e4c:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8004e50:	4328      	orrs	r0, r5
 8004e52:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8004e56:	6808      	ldr	r0, [r1, #0]
}
 8004e58:	e70f      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e5a:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e5c:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004e5e:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004e60:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e64:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e68:	2d00      	cmp	r5, #0
 8004e6a:	f040 80a7 	bne.w	8004fbc <HAL_ADC_ConfigChannel+0x39c>
 8004e6e:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e72:	42ac      	cmp	r4, r5
 8004e74:	f000 8119 	beq.w	80050aa <HAL_ADC_ConfigChannel+0x48a>
 8004e78:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004e7a:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e7c:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e80:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004e84:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8004e88:	42ae      	cmp	r6, r5
 8004e8a:	f000 80fc 	beq.w	8005086 <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e8e:	68a6      	ldr	r6, [r4, #8]
 8004e90:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e92:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e96:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004e9a:	42ae      	cmp	r6, r5
 8004e9c:	f000 80e2 	beq.w	8005064 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ea0:	68e6      	ldr	r6, [r4, #12]
 8004ea2:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ea4:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ea6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004eaa:	42b5      	cmp	r5, r6
 8004eac:	f47f aee5 	bne.w	8004c7a <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004eb6:	6020      	str	r0, [r4, #0]
 8004eb8:	6808      	ldr	r0, [r1, #0]
}
 8004eba:	e6de      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 8004ebc:	2002      	movs	r0, #2
}
 8004ebe:	b003      	add	sp, #12
 8004ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ec2:	0e80      	lsrs	r0, r0, #26
 8004ec4:	1c44      	adds	r4, r0, #1
 8004ec6:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eca:	2e09      	cmp	r6, #9
 8004ecc:	d850      	bhi.n	8004f70 <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ece:	06a5      	lsls	r5, r4, #26
 8004ed0:	2401      	movs	r4, #1
 8004ed2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004ed6:	40b4      	lsls	r4, r6
 8004ed8:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004edc:	4325      	orrs	r5, r4
 8004ede:	0500      	lsls	r0, r0, #20
 8004ee0:	e74d      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004ee2:	482b      	ldr	r0, [pc, #172]	; (8004f90 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ee4:	4a30      	ldr	r2, [pc, #192]	; (8004fa8 <HAL_ADC_ConfigChannel+0x388>)
 8004ee6:	6881      	ldr	r1, [r0, #8]
 8004ee8:	4c30      	ldr	r4, [pc, #192]	; (8004fac <HAL_ADC_ConfigChannel+0x38c>)
 8004eea:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004eee:	430e      	orrs	r6, r1
 8004ef0:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8004ef4:	6086      	str	r6, [r0, #8]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	0992      	lsrs	r2, r2, #6
 8004efa:	fba4 1202 	umull	r1, r2, r4, r2
 8004efe:	0992      	lsrs	r2, r2, #6
 8004f00:	3201      	adds	r2, #1
 8004f02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004f06:	0092      	lsls	r2, r2, #2
 8004f08:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004f0a:	9a01      	ldr	r2, [sp, #4]
 8004f0c:	2a00      	cmp	r2, #0
 8004f0e:	f43f aee6 	beq.w	8004cde <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 8004f12:	9a01      	ldr	r2, [sp, #4]
 8004f14:	3a01      	subs	r2, #1
 8004f16:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004f18:	9a01      	ldr	r2, [sp, #4]
 8004f1a:	2a00      	cmp	r2, #0
 8004f1c:	d1f9      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x2f2>
 8004f1e:	e6de      	b.n	8004cde <HAL_ADC_ConfigChannel+0xbe>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f20:	4d23      	ldr	r5, [pc, #140]	; (8004fb0 <HAL_ADC_ConfigChannel+0x390>)
 8004f22:	42ac      	cmp	r4, r5
 8004f24:	f47f aedb 	bne.w	8004cde <HAL_ADC_ConfigChannel+0xbe>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f28:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004f2c:	f47f aed7 	bne.w	8004cde <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f30:	4c1b      	ldr	r4, [pc, #108]	; (8004fa0 <HAL_ADC_ConfigChannel+0x380>)
 8004f32:	42a2      	cmp	r2, r4
 8004f34:	f43f aed3 	beq.w	8004cde <HAL_ADC_ConfigChannel+0xbe>
 8004f38:	688a      	ldr	r2, [r1, #8]
 8004f3a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004f3e:	4332      	orrs	r2, r6
 8004f40:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004f44:	608a      	str	r2, [r1, #8]
}
 8004f46:	e6bf      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0xa8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f48:	0df5      	lsrs	r5, r6, #23
 8004f4a:	f102 0414 	add.w	r4, r2, #20
 8004f4e:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8004f52:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004f56:	592f      	ldr	r7, [r5, r4]
 8004f58:	f04f 0c07 	mov.w	ip, #7
 8004f5c:	fa0c f606 	lsl.w	r6, ip, r6
 8004f60:	ea27 0606 	bic.w	r6, r7, r6
 8004f64:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004f66:	6954      	ldr	r4, [r2, #20]
 8004f68:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004f6c:	6154      	str	r4, [r2, #20]
}
 8004f6e:	e73f      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f70:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004f74:	06a5      	lsls	r5, r4, #26
 8004f76:	381e      	subs	r0, #30
 8004f78:	2401      	movs	r4, #1
 8004f7a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004f7e:	fa04 f606 	lsl.w	r6, r4, r6
 8004f82:	0500      	lsls	r0, r0, #20
 8004f84:	4335      	orrs	r5, r6
 8004f86:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8004f8a:	e6f8      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x15e>
 8004f8c:	80080000 	.word	0x80080000
 8004f90:	50000300 	.word	0x50000300
 8004f94:	c3210000 	.word	0xc3210000
 8004f98:	90c00010 	.word	0x90c00010
 8004f9c:	c7520000 	.word	0xc7520000
 8004fa0:	50000100 	.word	0x50000100
 8004fa4:	0007ffff 	.word	0x0007ffff
 8004fa8:	20000608 	.word	0x20000608
 8004fac:	053e2d63 	.word	0x053e2d63
 8004fb0:	cb840000 	.word	0xcb840000
 8004fb4:	407f0000 	.word	0x407f0000
 8004fb8:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004fc0:	b11d      	cbz	r5, 8004fca <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8004fc2:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fc6:	42ac      	cmp	r4, r5
 8004fc8:	d06f      	beq.n	80050aa <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fca:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004fcc:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fce:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fd2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004fd6:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004fde:	b11d      	cbz	r5, 8004fe8 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8004fe0:	fab5 f585 	clz	r5, r5
 8004fe4:	42ae      	cmp	r6, r5
 8004fe6:	d04e      	beq.n	8005086 <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fe8:	68a5      	ldr	r5, [r4, #8]
 8004fea:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fec:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ff0:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004ff8:	b11d      	cbz	r5, 8005002 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8004ffa:	fab5 f585 	clz	r5, r5
 8004ffe:	42ae      	cmp	r6, r5
 8005000:	d030      	beq.n	8005064 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005002:	68e5      	ldr	r5, [r4, #12]
 8005004:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005006:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005008:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005010:	2d00      	cmp	r5, #0
 8005012:	f43f ae32 	beq.w	8004c7a <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 8005016:	fab5 f585 	clz	r5, r5
 800501a:	e746      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x28a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005020:	2d00      	cmp	r5, #0
 8005022:	d058      	beq.n	80050d6 <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8005024:	fab5 f585 	clz	r5, r5
 8005028:	3501      	adds	r5, #1
 800502a:	06ad      	lsls	r5, r5, #26
 800502c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005034:	2c00      	cmp	r4, #0
 8005036:	d04c      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 8005038:	fab4 f484 	clz	r4, r4
 800503c:	3401      	adds	r4, #1
 800503e:	f004 041f 	and.w	r4, r4, #31
 8005042:	2601      	movs	r6, #1
 8005044:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005048:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800504e:	2800      	cmp	r0, #0
 8005050:	d044      	beq.n	80050dc <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8005052:	fab0 f480 	clz	r4, r0
 8005056:	3401      	adds	r4, #1
 8005058:	f004 041f 	and.w	r4, r4, #31
 800505c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005060:	0520      	lsls	r0, r4, #20
 8005062:	e68c      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 8005064:	6838      	ldr	r0, [r7, #0]
 8005066:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800506a:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800506c:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800506e:	68e5      	ldr	r5, [r4, #12]
 8005070:	68e6      	ldr	r6, [r4, #12]
 8005072:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005076:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800507a:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800507c:	2d00      	cmp	r5, #0
 800507e:	d1c5      	bne.n	800500c <HAL_ADC_ConfigChannel+0x3ec>
 8005080:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005084:	e711      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x28a>
  MODIFY_REG(*preg,
 8005086:	6838      	ldr	r0, [r7, #0]
 8005088:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800508c:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800508e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005090:	68a5      	ldr	r5, [r4, #8]
 8005092:	68a6      	ldr	r6, [r4, #8]
 8005094:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005098:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800509c:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050a0:	2d00      	cmp	r5, #0
 80050a2:	d1a7      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x3d4>
 80050a4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80050a8:	e6f7      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(*preg,
 80050aa:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80050ac:	4614      	mov	r4, r2
 80050ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80050b2:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050b6:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050b8:	6e55      	ldr	r5, [r2, #100]	; 0x64
 80050ba:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80050bc:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80050c0:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050c4:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050c8:	2d00      	cmp	r5, #0
 80050ca:	d186      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x3ba>
 80050cc:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80050d0:	e6da      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x268>
 80050d2:	2402      	movs	r4, #2
 80050d4:	e7b8      	b.n	8005048 <HAL_ADC_ConfigChannel+0x428>
 80050d6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80050da:	e7a9      	b.n	8005030 <HAL_ADC_ConfigChannel+0x410>
 80050dc:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80050e0:	e64d      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x15e>
 80050e2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80050e6:	e62b      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x120>
 80050e8:	4801      	ldr	r0, [pc, #4]	; (80050f0 <HAL_ADC_ConfigChannel+0x4d0>)
 80050ea:	e648      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x15e>
 80050ec:	2402      	movs	r4, #2
 80050ee:	e634      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x13a>
 80050f0:	fe500000 	.word	0xfe500000

080050f4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80050f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050f8:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80050fc:	6944      	ldr	r4, [r0, #20]
{
 80050fe:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8005100:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005102:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8005104:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005106:	f000 8187 	beq.w	8005418 <HAL_ADCEx_InjectedConfigChannel+0x324>
 800510a:	2301      	movs	r3, #1
 800510c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005110:	b1e4      	cbz	r4, 800514c <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005112:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005114:	2b01      	cmp	r3, #1
 8005116:	d019      	beq.n	800514c <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005118:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800511a:	2c00      	cmp	r4, #0
 800511c:	f040 8126 	bne.w	800536c <HAL_ADCEx_InjectedConfigChannel+0x278>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005120:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005122:	2a00      	cmp	r2, #0
 8005124:	f000 8248 	beq.w	80055b8 <HAL_ADCEx_InjectedConfigChannel+0x4c4>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005128:	1e5c      	subs	r4, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800512a:	f002 027c 	and.w	r2, r2, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800512e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005130:	4322      	orrs	r2, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005132:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005134:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005138:	6684      	str	r4, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800513a:	f005 051f 	and.w	r5, r5, #31
 800513e:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8005142:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005144:	4323      	orrs	r3, r4
 8005146:	6643      	str	r3, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005148:	6803      	ldr	r3, [r0, #0]
 800514a:	e005      	b.n	8005158 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800514c:	684b      	ldr	r3, [r1, #4]
 800514e:	2b09      	cmp	r3, #9
 8005150:	f000 80f8 	beq.w	8005344 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8005154:	680a      	ldr	r2, [r1, #0]
 8005156:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005158:	689c      	ldr	r4, [r3, #8]
 800515a:	0724      	lsls	r4, r4, #28
 800515c:	d410      	bmi.n	8005180 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800515e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005162:	2c00      	cmp	r4, #0
 8005164:	f040 80e5 	bne.w	8005332 <HAL_ADCEx_InjectedConfigChannel+0x23e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005168:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 800516c:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8005170:	68dd      	ldr	r5, [r3, #12]
 8005172:	0524      	lsls	r4, r4, #20
 8005174:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8005178:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 800517c:	432c      	orrs	r4, r5
 800517e:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005180:	689c      	ldr	r4, [r3, #8]
 8005182:	f014 0404 	ands.w	r4, r4, #4
 8005186:	d060      	beq.n	800524a <HAL_ADCEx_InjectedConfigChannel+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005188:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800518a:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800518c:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800518e:	07ef      	lsls	r7, r5, #31
 8005190:	d414      	bmi.n	80051bc <HAL_ADCEx_InjectedConfigChannel+0xc8>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005192:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005194:	4dbe      	ldr	r5, [pc, #760]	; (8005490 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 8005196:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800519a:	f8df e320 	ldr.w	lr, [pc, #800]	; 80054bc <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 800519e:	f007 0c18 	and.w	ip, r7, #24
 80051a2:	fa25 f50c 	lsr.w	r5, r5, ip
 80051a6:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80051aa:	4015      	ands	r5, r2
 80051ac:	ea26 060c 	bic.w	r6, r6, ip
 80051b0:	4335      	orrs	r5, r6
 80051b2:	4577      	cmp	r7, lr
 80051b4:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 80051b8:	f000 80fd 	beq.w	80053b6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80051bc:	49b5      	ldr	r1, [pc, #724]	; (8005494 <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
 80051be:	420a      	tst	r2, r1
 80051c0:	d019      	beq.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80051c2:	4db5      	ldr	r5, [pc, #724]	; (8005498 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80051c4:	4eb5      	ldr	r6, [pc, #724]	; (800549c <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 80051c6:	68a9      	ldr	r1, [r5, #8]
 80051c8:	42b2      	cmp	r2, r6
 80051ca:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 80051ce:	d019      	beq.n	8005204 <HAL_ADCEx_InjectedConfigChannel+0x110>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80051d0:	4eb3      	ldr	r6, [pc, #716]	; (80054a0 <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 80051d2:	42b2      	cmp	r2, r6
 80051d4:	d016      	beq.n	8005204 <HAL_ADCEx_InjectedConfigChannel+0x110>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80051d6:	4eb3      	ldr	r6, [pc, #716]	; (80054a4 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 80051d8:	42b2      	cmp	r2, r6
 80051da:	f040 8126 	bne.w	800542a <HAL_ADCEx_InjectedConfigChannel+0x336>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051de:	01ce      	lsls	r6, r1, #7
 80051e0:	d409      	bmi.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051e2:	4ab1      	ldr	r2, [pc, #708]	; (80054a8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d006      	beq.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80051e8:	68ab      	ldr	r3, [r5, #8]
 80051ea:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80051ee:	431f      	orrs	r7, r3
 80051f0:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 80051f4:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051f6:	2300      	movs	r3, #0
 80051f8:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80051fc:	4620      	mov	r0, r4
 80051fe:	b002      	add	sp, #8
 8005200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005204:	020a      	lsls	r2, r1, #8
 8005206:	d4f6      	bmi.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800520c:	d1f3      	bne.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
 800520e:	4aa2      	ldr	r2, [pc, #648]	; (8005498 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005210:	49a6      	ldr	r1, [pc, #664]	; (80054ac <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 8005212:	6893      	ldr	r3, [r2, #8]
 8005214:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005218:	431f      	orrs	r7, r3
 800521a:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 800521e:	6097      	str	r7, [r2, #8]
 8005220:	680b      	ldr	r3, [r1, #0]
 8005222:	4aa3      	ldr	r2, [pc, #652]	; (80054b0 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8005224:	099b      	lsrs	r3, r3, #6
 8005226:	fba2 2303 	umull	r2, r3, r2, r3
 800522a:	099b      	lsrs	r3, r3, #6
 800522c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	3318      	adds	r3, #24
 8005234:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005236:	9b01      	ldr	r3, [sp, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0dc      	beq.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
          wait_loop_index--;
 800523c:	9b01      	ldr	r3, [sp, #4]
 800523e:	3b01      	subs	r3, #1
 8005240:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005242:	9b01      	ldr	r3, [sp, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f9      	bne.n	800523c <HAL_ADCEx_InjectedConfigChannel+0x148>
 8005248:	e7d5      	b.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800524a:	689d      	ldr	r5, [r3, #8]
 800524c:	f015 0508 	ands.w	r5, r5, #8
 8005250:	d19c      	bne.n	800518c <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005252:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005254:	2c00      	cmp	r4, #0
 8005256:	f040 809f 	bne.w	8005398 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800525a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 800525e:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005260:	68dc      	ldr	r4, [r3, #12]
 8005262:	bf0c      	ite	eq
 8005264:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005268:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 800526c:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800526e:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005270:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8005274:	2e01      	cmp	r6, #1
 8005276:	f000 80ff 	beq.w	8005478 <HAL_ADCEx_InjectedConfigChannel+0x384>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800527a:	691e      	ldr	r6, [r3, #16]
 800527c:	f026 0602 	bic.w	r6, r6, #2
 8005280:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005282:	688e      	ldr	r6, [r1, #8]
 8005284:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8005288:	f000 80e2 	beq.w	8005450 <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800528c:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
 8005290:	f00e 0e04 	and.w	lr, lr, #4
 8005294:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8005298:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800529c:	f85e 700c 	ldr.w	r7, [lr, ip]
 80052a0:	f04f 0807 	mov.w	r8, #7
 80052a4:	fa08 f802 	lsl.w	r8, r8, r2
 80052a8:	4096      	lsls	r6, r2
 80052aa:	ea27 0208 	bic.w	r2, r7, r8
 80052ae:	4316      	orrs	r6, r2
 80052b0:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052ba:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80052bc:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80052c0:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80052c2:	f1be 0f04 	cmp.w	lr, #4
 80052c6:	f000 80fd 	beq.w	80054c4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052ca:	f103 0260 	add.w	r2, r3, #96	; 0x60
  MODIFY_REG(*preg,
 80052ce:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80054c0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 80052d2:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 80052d6:	ea06 0808 	and.w	r8, r6, r8
 80052da:	680e      	ldr	r6, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80052dc:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 80052e0:	f006 47f8 	and.w	r7, r6, #2080374784	; 0x7c000000
 80052e4:	694e      	ldr	r6, [r1, #20]
 80052e6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80052ea:	fa06 f60c 	lsl.w	r6, r6, ip
 80052ee:	ea47 0708 	orr.w	r7, r7, r8
 80052f2:	433e      	orrs	r6, r7
 80052f4:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80052f8:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052fc:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8005300:	698f      	ldr	r7, [r1, #24]
 8005302:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8005306:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 800530a:	433e      	orrs	r6, r7
 800530c:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005310:	690f      	ldr	r7, [r1, #16]
 8005312:	f891 c01c 	ldrb.w	ip, [r1, #28]
  MODIFY_REG(*preg,
 8005316:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 800531a:	f1bc 0f01 	cmp.w	ip, #1
 800531e:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8005322:	bf08      	it	eq
 8005324:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8005328:	4335      	orrs	r5, r6
 800532a:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
 800532e:	680a      	ldr	r2, [r1, #0]
}
 8005330:	e72c      	b.n	800518c <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8005332:	68dc      	ldr	r4, [r3, #12]
 8005334:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8005338:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 800533c:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8005340:	60dc      	str	r4, [r3, #12]
 8005342:	e71d      	b.n	8005180 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005344:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005346:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005348:	2b00      	cmp	r3, #0
 800534a:	d06a      	beq.n	8005422 <HAL_ADCEx_InjectedConfigChannel+0x32e>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800534c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800534e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005352:	0c55      	lsrs	r5, r2, #17
 8005354:	4323      	orrs	r3, r4
 8005356:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800535a:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800535c:	6803      	ldr	r3, [r0, #0]
 800535e:	4e55      	ldr	r6, [pc, #340]	; (80054b4 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8005360:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005362:	4034      	ands	r4, r6
 8005364:	432c      	orrs	r4, r5
 8005366:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005368:	6645      	str	r5, [r0, #100]	; 0x64
 800536a:	e6f5      	b.n	8005158 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800536c:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005370:	6e43      	ldr	r3, [r0, #100]	; 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005372:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8005376:	f006 061f 	and.w	r6, r6, #31
 800537a:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800537c:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 800537e:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005380:	e9c0 5419 	strd	r5, r4, [r0, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005384:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005386:	2c00      	cmp	r4, #0
 8005388:	f47f aee6 	bne.w	8005158 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800538c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800538e:	4e49      	ldr	r6, [pc, #292]	; (80054b4 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8005390:	4034      	ands	r4, r6
 8005392:	4325      	orrs	r5, r4
 8005394:	64dd      	str	r5, [r3, #76]	; 0x4c
 8005396:	e6df      	b.n	8005158 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005398:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800539a:	2c00      	cmp	r4, #0
 800539c:	f43f af5d 	beq.w	800525a <HAL_ADCEx_InjectedConfigChannel+0x166>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80053a0:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 80053a4:	2c01      	cmp	r4, #1
 80053a6:	f000 8154 	beq.w	8005652 <HAL_ADCEx_InjectedConfigChannel+0x55e>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80053aa:	68dc      	ldr	r4, [r3, #12]
 80053ac:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80053b0:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053b2:	462c      	mov	r4, r5
 80053b4:	e75c      	b.n	8005270 <HAL_ADCEx_InjectedConfigChannel+0x17c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80053b6:	f1bc 0f00 	cmp.w	ip, #0
 80053ba:	f040 80c7 	bne.w	800554c <HAL_ADCEx_InjectedConfigChannel+0x458>
 80053be:	0e92      	lsrs	r2, r2, #26
 80053c0:	1c55      	adds	r5, r2, #1
 80053c2:	f005 071f 	and.w	r7, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053c6:	2f09      	cmp	r7, #9
 80053c8:	f240 80f9 	bls.w	80055be <HAL_ADCEx_InjectedConfigChannel+0x4ca>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80053cc:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80053d0:	06ae      	lsls	r6, r5, #26
 80053d2:	3a1e      	subs	r2, #30
 80053d4:	2501      	movs	r5, #1
 80053d6:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80053da:	fa05 f707 	lsl.w	r7, r5, r7
 80053de:	0512      	lsls	r2, r2, #20
 80053e0:	433e      	orrs	r6, r7
 80053e2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053e6:	4332      	orrs	r2, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80053e8:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 80053ec:	f00c 0c04 	and.w	ip, ip, #4
 80053f0:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80053f4:	688e      	ldr	r6, [r1, #8]
 80053f6:	f85c 5007 	ldr.w	r5, [ip, r7]
 80053fa:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80053fe:	f04f 0e07 	mov.w	lr, #7
 8005402:	fa0e fe02 	lsl.w	lr, lr, r2
 8005406:	ea25 050e 	bic.w	r5, r5, lr
 800540a:	fa06 f202 	lsl.w	r2, r6, r2
 800540e:	432a      	orrs	r2, r5
 8005410:	f84c 2007 	str.w	r2, [ip, r7]
 8005414:	680a      	ldr	r2, [r1, #0]
}
 8005416:	e6d1      	b.n	80051bc <HAL_ADCEx_InjectedConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 8005418:	2402      	movs	r4, #2
}
 800541a:	4620      	mov	r0, r4
 800541c:	b002      	add	sp, #8
 800541e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005422:	0c55      	lsrs	r5, r2, #17
 8005424:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8005428:	e798      	b.n	800535c <HAL_ADCEx_InjectedConfigChannel+0x268>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800542a:	4e23      	ldr	r6, [pc, #140]	; (80054b8 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 800542c:	42b2      	cmp	r2, r6
 800542e:	f47f aee2 	bne.w	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005432:	0249      	lsls	r1, r1, #9
 8005434:	f53f aedf 	bmi.w	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_VREFINT_INSTANCE(hadc))
 8005438:	4a1b      	ldr	r2, [pc, #108]	; (80054a8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	f43f aedb 	beq.w	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005440:	68ab      	ldr	r3, [r5, #8]
 8005442:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005446:	431f      	orrs	r7, r3
 8005448:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 800544c:	60af      	str	r7, [r5, #8]
}
 800544e:	e6d2      	b.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x102>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005450:	0dd7      	lsrs	r7, r2, #23
 8005452:	f007 0704 	and.w	r7, r7, #4
 8005456:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 800545a:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 800545e:	f04f 0c07 	mov.w	ip, #7
 8005462:	59ba      	ldr	r2, [r7, r6]
 8005464:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005468:	ea22 020c 	bic.w	r2, r2, ip
 800546c:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005474:	615a      	str	r2, [r3, #20]
}
 8005476:	e721      	b.n	80052bc <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      MODIFY_REG(hadc->Instance->CFGR2,
 8005478:	691f      	ldr	r7, [r3, #16]
 800547a:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800547c:	f427 7cff 	bic.w	ip, r7, #510	; 0x1fe
 8005480:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8005482:	433e      	orrs	r6, r7
 8005484:	ea46 060c 	orr.w	r6, r6, ip
 8005488:	f046 0602 	orr.w	r6, r6, #2
 800548c:	611e      	str	r6, [r3, #16]
 800548e:	e6f8      	b.n	8005282 <HAL_ADCEx_InjectedConfigChannel+0x18e>
 8005490:	0007ffff 	.word	0x0007ffff
 8005494:	80080000 	.word	0x80080000
 8005498:	50000300 	.word	0x50000300
 800549c:	c3210000 	.word	0xc3210000
 80054a0:	90c00010 	.word	0x90c00010
 80054a4:	c7520000 	.word	0xc7520000
 80054a8:	50000100 	.word	0x50000100
 80054ac:	20000608 	.word	0x20000608
 80054b0:	053e2d63 	.word	0x053e2d63
 80054b4:	04104000 	.word	0x04104000
 80054b8:	cb840000 	.word	0xcb840000
 80054bc:	407f0000 	.word	0x407f0000
 80054c0:	03fff000 	.word	0x03fff000
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80054c4:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054c6:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80054c8:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80054ca:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80054ce:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80054d2:	2e00      	cmp	r6, #0
 80054d4:	d07d      	beq.n	80055d2 <HAL_ADCEx_InjectedConfigChannel+0x4de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80054da:	b126      	cbz	r6, 80054e6 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
  return __builtin_clz(value);
 80054dc:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80054e0:	42b5      	cmp	r5, r6
 80054e2:	f000 80bb 	beq.w	800565c <HAL_ADCEx_InjectedConfigChannel+0x568>
 80054e6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80054e8:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054ea:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054ee:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80054f2:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80054fa:	b126      	cbz	r6, 8005506 <HAL_ADCEx_InjectedConfigChannel+0x412>
  return __builtin_clz(value);
 80054fc:	fab6 f686 	clz	r6, r6
 8005500:	42b7      	cmp	r7, r6
 8005502:	f000 80c0 	beq.w	8005686 <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005506:	68ae      	ldr	r6, [r5, #8]
 8005508:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800550a:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800550e:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005512:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005516:	b126      	cbz	r6, 8005522 <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 8005518:	fab6 f686 	clz	r6, r6
 800551c:	42b7      	cmp	r7, r6
 800551e:	f000 80c7 	beq.w	80056b0 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005522:	68ee      	ldr	r6, [r5, #12]
 8005524:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005526:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005528:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552c:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005530:	2e00      	cmp	r6, #0
 8005532:	f43f ae2b 	beq.w	800518c <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8005536:	fab6 f686 	clz	r6, r6
 800553a:	42be      	cmp	r6, r7
 800553c:	f47f ae26 	bne.w	800518c <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8005540:	682a      	ldr	r2, [r5, #0]
 8005542:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005546:	602a      	str	r2, [r5, #0]
 8005548:	680a      	ldr	r2, [r1, #0]
}
 800554a:	e61f      	b.n	800518c <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005550:	2d00      	cmp	r5, #0
 8005552:	d05a      	beq.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x516>
  return __builtin_clz(value);
 8005554:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005558:	3501      	adds	r5, #1
 800555a:	f005 051f 	and.w	r5, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800555e:	2d09      	cmp	r5, #9
 8005560:	d953      	bls.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x516>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005566:	2e00      	cmp	r6, #0
 8005568:	f000 80c2 	beq.w	80056f0 <HAL_ADCEx_InjectedConfigChannel+0x5fc>
  return __builtin_clz(value);
 800556c:	fab6 f686 	clz	r6, r6
 8005570:	3601      	adds	r6, #1
 8005572:	06b6      	lsls	r6, r6, #26
 8005574:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800557c:	2d00      	cmp	r5, #0
 800557e:	f000 80b5 	beq.w	80056ec <HAL_ADCEx_InjectedConfigChannel+0x5f8>
  return __builtin_clz(value);
 8005582:	fab5 f585 	clz	r5, r5
 8005586:	3501      	adds	r5, #1
 8005588:	f005 051f 	and.w	r5, r5, #31
 800558c:	2701      	movs	r7, #1
 800558e:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005592:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005594:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005598:	2a00      	cmp	r2, #0
 800559a:	f000 80a5 	beq.w	80056e8 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 800559e:	fab2 f582 	clz	r5, r2
 80055a2:	3501      	adds	r5, #1
 80055a4:	f005 051f 	and.w	r5, r5, #31
 80055a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055ac:	f1a5 021e 	sub.w	r2, r5, #30
 80055b0:	0512      	lsls	r2, r2, #20
 80055b2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80055b6:	e716      	b.n	80053e6 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80055b8:	3b01      	subs	r3, #1
 80055ba:	461c      	mov	r4, r3
 80055bc:	e5ba      	b.n	8005134 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80055be:	06ae      	lsls	r6, r5, #26
 80055c0:	2501      	movs	r5, #1
 80055c2:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80055c6:	40bd      	lsls	r5, r7
 80055c8:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80055cc:	432e      	orrs	r6, r5
 80055ce:	0512      	lsls	r2, r2, #20
 80055d0:	e709      	b.n	80053e6 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80055d2:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80055d6:	42b5      	cmp	r5, r6
 80055d8:	d040      	beq.n	800565c <HAL_ADCEx_InjectedConfigChannel+0x568>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80055da:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80055dc:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055de:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80055e2:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80055e6:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 80055ea:	42b7      	cmp	r7, r6
 80055ec:	d04b      	beq.n	8005686 <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80055ee:	68af      	ldr	r7, [r5, #8]
 80055f0:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055f2:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055f6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80055fa:	42b7      	cmp	r7, r6
 80055fc:	d058      	beq.n	80056b0 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80055fe:	68ef      	ldr	r7, [r5, #12]
 8005600:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005602:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005604:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005608:	e797      	b.n	800553a <HAL_ADCEx_InjectedConfigChannel+0x446>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800560e:	2e00      	cmp	r6, #0
 8005610:	d064      	beq.n	80056dc <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return __builtin_clz(value);
 8005612:	fab6 f686 	clz	r6, r6
 8005616:	3601      	adds	r6, #1
 8005618:	06b6      	lsls	r6, r6, #26
 800561a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005622:	2d00      	cmp	r5, #0
 8005624:	d058      	beq.n	80056d8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  return __builtin_clz(value);
 8005626:	fab5 f585 	clz	r5, r5
 800562a:	3501      	adds	r5, #1
 800562c:	f005 051f 	and.w	r5, r5, #31
 8005630:	2701      	movs	r7, #1
 8005632:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005636:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005638:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800563c:	2a00      	cmp	r2, #0
 800563e:	d050      	beq.n	80056e2 <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  return __builtin_clz(value);
 8005640:	fab2 f582 	clz	r5, r2
 8005644:	3501      	adds	r5, #1
 8005646:	f005 051f 	and.w	r5, r5, #31
 800564a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800564e:	052a      	lsls	r2, r5, #20
 8005650:	e6c9      	b.n	80053e6 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005652:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8005654:	f046 0620 	orr.w	r6, r6, #32
 8005658:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 800565a:	e609      	b.n	8005270 <HAL_ADCEx_InjectedConfigChannel+0x17c>
  MODIFY_REG(*preg,
 800565c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800565e:	461d      	mov	r5, r3
 8005660:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005664:	f845 2f60 	str.w	r2, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005668:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800566a:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800566c:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800566e:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005672:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005676:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800567a:	2e00      	cmp	r6, #0
 800567c:	f47f af3b 	bne.w	80054f6 <HAL_ADCEx_InjectedConfigChannel+0x402>
 8005680:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005684:	e7b1      	b.n	80055ea <HAL_ADCEx_InjectedConfigChannel+0x4f6>
  MODIFY_REG(*preg,
 8005686:	f8dc 2000 	ldr.w	r2, [ip]
 800568a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800568e:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005692:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005694:	68ae      	ldr	r6, [r5, #8]
 8005696:	68af      	ldr	r7, [r5, #8]
 8005698:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800569c:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056a0:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80056a4:	2e00      	cmp	r6, #0
 80056a6:	f47f af34 	bne.w	8005512 <HAL_ADCEx_InjectedConfigChannel+0x41e>
 80056aa:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80056ae:	e7a4      	b.n	80055fa <HAL_ADCEx_InjectedConfigChannel+0x506>
  MODIFY_REG(*preg,
 80056b0:	f8dc 2000 	ldr.w	r2, [ip]
 80056b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056b8:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80056bc:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80056be:	68ee      	ldr	r6, [r5, #12]
 80056c0:	68ef      	ldr	r7, [r5, #12]
 80056c2:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056c6:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056ca:	350c      	adds	r5, #12
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	f47f af2d 	bne.w	800552c <HAL_ADCEx_InjectedConfigChannel+0x438>
 80056d2:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80056d6:	e730      	b.n	800553a <HAL_ADCEx_InjectedConfigChannel+0x446>
 80056d8:	2502      	movs	r5, #2
 80056da:	e7ac      	b.n	8005636 <HAL_ADCEx_InjectedConfigChannel+0x542>
 80056dc:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 80056e0:	e79d      	b.n	800561e <HAL_ADCEx_InjectedConfigChannel+0x52a>
 80056e2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80056e6:	e67e      	b.n	80053e6 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 80056e8:	4a03      	ldr	r2, [pc, #12]	; (80056f8 <HAL_ADCEx_InjectedConfigChannel+0x604>)
 80056ea:	e67c      	b.n	80053e6 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 80056ec:	2502      	movs	r5, #2
 80056ee:	e750      	b.n	8005592 <HAL_ADCEx_InjectedConfigChannel+0x49e>
 80056f0:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 80056f4:	e740      	b.n	8005578 <HAL_ADCEx_InjectedConfigChannel+0x484>
 80056f6:	bf00      	nop
 80056f8:	fe500000 	.word	0xfe500000

080056fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80056fc:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056fe:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005702:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8005704:	2a01      	cmp	r2, #1
{
 8005706:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8005708:	d04f      	beq.n	80057aa <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800570a:	6804      	ldr	r4, [r0, #0]
 800570c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800570e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005710:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005712:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005716:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005718:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800571c:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800571e:	d008      	beq.n	8005732 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005720:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005726:	f041 0120 	orr.w	r1, r1, #32
 800572a:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800572c:	b01c      	add	sp, #112	; 0x70
 800572e:	bcf0      	pop	{r4, r5, r6, r7}
 8005730:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005732:	4a23      	ldr	r2, [pc, #140]	; (80057c0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005734:	6890      	ldr	r0, [r2, #8]
 8005736:	0740      	lsls	r0, r0, #29
 8005738:	d50b      	bpl.n	8005752 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800573a:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800573c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800573e:	f042 0220 	orr.w	r2, r2, #32
 8005742:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005744:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800574c:	b01c      	add	sp, #112	; 0x70
 800574e:	bcf0      	pop	{r4, r5, r6, r7}
 8005750:	4770      	bx	lr
 8005752:	68a0      	ldr	r0, [r4, #8]
 8005754:	0746      	lsls	r6, r0, #29
 8005756:	d4f1      	bmi.n	800573c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005758:	b1d5      	cbz	r5, 8005790 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800575a:	4e1a      	ldr	r6, [pc, #104]	; (80057c4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800575c:	684f      	ldr	r7, [r1, #4]
 800575e:	68b0      	ldr	r0, [r6, #8]
 8005760:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8005764:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8005768:	4338      	orrs	r0, r7
 800576a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 800576e:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005770:	68a4      	ldr	r4, [r4, #8]
 8005772:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005774:	4320      	orrs	r0, r4
 8005776:	f010 0001 	ands.w	r0, r0, #1
 800577a:	d114      	bne.n	80057a6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 800577c:	68b4      	ldr	r4, [r6, #8]
 800577e:	688a      	ldr	r2, [r1, #8]
 8005780:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8005784:	4315      	orrs	r5, r2
 8005786:	f021 010f 	bic.w	r1, r1, #15
 800578a:	430d      	orrs	r5, r1
 800578c:	60b5      	str	r5, [r6, #8]
 800578e:	e7da      	b.n	8005746 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005790:	4d0c      	ldr	r5, [pc, #48]	; (80057c4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005792:	68a9      	ldr	r1, [r5, #8]
 8005794:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005798:	60a9      	str	r1, [r5, #8]
 800579a:	68a1      	ldr	r1, [r4, #8]
 800579c:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800579e:	4308      	orrs	r0, r1
 80057a0:	f010 0001 	ands.w	r0, r0, #1
 80057a4:	d005      	beq.n	80057b2 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057a6:	2000      	movs	r0, #0
 80057a8:	e7cd      	b.n	8005746 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80057aa:	2002      	movs	r0, #2
}
 80057ac:	b01c      	add	sp, #112	; 0x70
 80057ae:	bcf0      	pop	{r4, r5, r6, r7}
 80057b0:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80057b2:	68aa      	ldr	r2, [r5, #8]
 80057b4:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80057b8:	f022 020f 	bic.w	r2, r2, #15
 80057bc:	60aa      	str	r2, [r5, #8]
 80057be:	e7c2      	b.n	8005746 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80057c0:	50000100 	.word	0x50000100
 80057c4:	50000300 	.word	0x50000300

080057c8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80057c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ca:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d054      	beq.n	800587e <HAL_COMP_Init+0xb6>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80057d4:	6802      	ldr	r2, [r0, #0]
 80057d6:	6813      	ldr	r3, [r2, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	4604      	mov	r4, r0
 80057dc:	db4f      	blt.n	800587e <HAL_COMP_Init+0xb6>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80057de:	7f43      	ldrb	r3, [r0, #29]
 80057e0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d077      	beq.n	80058d8 <HAL_COMP_Init+0x110>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 80057e8:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    tmp_csr = (  hcomp->Init.InputMinus
 80057ec:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
               | hcomp->Init.BlankingSrce
 80057f0:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80057f2:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.InputPlus
 80057f4:	4333      	orrs	r3, r6
               | hcomp->Init.BlankingSrce
 80057f6:	430b      	orrs	r3, r1
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80057f8:	6816      	ldr	r6, [r2, #0]
 80057fa:	493f      	ldr	r1, [pc, #252]	; (80058f8 <HAL_COMP_Init+0x130>)
               | hcomp->Init.Hysteresis
 80057fc:	432b      	orrs	r3, r5
    tmp_csr = (  hcomp->Init.InputMinus
 80057fe:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 8005800:	4031      	ands	r1, r6
 8005802:	430b      	orrs	r3, r1
 8005804:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	0218      	lsls	r0, r3, #8
 800580a:	d501      	bpl.n	8005810 <HAL_COMP_Init+0x48>
 800580c:	023b      	lsls	r3, r7, #8
 800580e:	d54e      	bpl.n	80058ae <HAL_COMP_Init+0xe6>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005810:	4b3a      	ldr	r3, [pc, #232]	; (80058fc <HAL_COMP_Init+0x134>)
 8005812:	429a      	cmp	r2, r3
 8005814:	d066      	beq.n	80058e4 <HAL_COMP_Init+0x11c>
 8005816:	4b3a      	ldr	r3, [pc, #232]	; (8005900 <HAL_COMP_Init+0x138>)
 8005818:	429a      	cmp	r2, r3
 800581a:	d068      	beq.n	80058ee <HAL_COMP_Init+0x126>
 800581c:	3304      	adds	r3, #4
 800581e:	429a      	cmp	r2, r3
 8005820:	bf0b      	itete	eq
 8005822:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 8005826:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 800582a:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 800582e:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005832:	69a3      	ldr	r3, [r4, #24]
 8005834:	079f      	lsls	r7, r3, #30
 8005836:	d025      	beq.n	8005884 <HAL_COMP_Init+0xbc>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005838:	4d32      	ldr	r5, [pc, #200]	; (8005904 <HAL_COMP_Init+0x13c>)
 800583a:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800583c:	06de      	lsls	r6, r3, #27
 800583e:	bf4c      	ite	mi
 8005840:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005842:	4010      	andpl	r0, r2
 8005844:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005846:	4d2f      	ldr	r5, [pc, #188]	; (8005904 <HAL_COMP_Init+0x13c>)
 8005848:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800584a:	069f      	lsls	r7, r3, #26
 800584c:	bf4c      	ite	mi
 800584e:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005850:	4010      	andpl	r0, r2
 8005852:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005854:	482b      	ldr	r0, [pc, #172]	; (8005904 <HAL_COMP_Init+0x13c>)
 8005856:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005858:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800585a:	079e      	lsls	r6, r3, #30
 800585c:	bf4c      	ite	mi
 800585e:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005860:	4015      	andpl	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005862:	07db      	lsls	r3, r3, #31
 8005864:	6045      	str	r5, [r0, #4]
 8005866:	d51d      	bpl.n	80058a4 <HAL_COMP_Init+0xdc>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005868:	4b26      	ldr	r3, [pc, #152]	; (8005904 <HAL_COMP_Init+0x13c>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4311      	orrs	r1, r2
 800586e:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005870:	7f63      	ldrb	r3, [r4, #29]
 8005872:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005876:	b18b      	cbz	r3, 800589c <HAL_COMP_Init+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 8005878:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800587a:	b003      	add	sp, #12
 800587c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 800587e:	2001      	movs	r0, #1
}
 8005880:	b003      	add	sp, #12
 8005882:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005884:	4b1f      	ldr	r3, [pc, #124]	; (8005904 <HAL_COMP_Init+0x13c>)
 8005886:	6859      	ldr	r1, [r3, #4]
 8005888:	4011      	ands	r1, r2
 800588a:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800588c:	6819      	ldr	r1, [r3, #0]
 800588e:	400a      	ands	r2, r1
 8005890:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005892:	7f63      	ldrb	r3, [r4, #29]
 8005894:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1ed      	bne.n	8005878 <HAL_COMP_Init+0xb0>
      hcomp->State = HAL_COMP_STATE_READY;
 800589c:	2301      	movs	r3, #1
 800589e:	7763      	strb	r3, [r4, #29]
}
 80058a0:	b003      	add	sp, #12
 80058a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a4:	4917      	ldr	r1, [pc, #92]	; (8005904 <HAL_COMP_Init+0x13c>)
 80058a6:	680b      	ldr	r3, [r1, #0]
 80058a8:	401a      	ands	r2, r3
 80058aa:	600a      	str	r2, [r1, #0]
}
 80058ac:	e7f1      	b.n	8005892 <HAL_COMP_Init+0xca>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80058ae:	4b16      	ldr	r3, [pc, #88]	; (8005908 <HAL_COMP_Init+0x140>)
 80058b0:	4916      	ldr	r1, [pc, #88]	; (800590c <HAL_COMP_Init+0x144>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	099b      	lsrs	r3, r3, #6
 80058b6:	fba1 1303 	umull	r1, r3, r1, r3
 80058ba:	099b      	lsrs	r3, r3, #6
 80058bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80058c4:	9b01      	ldr	r3, [sp, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0a2      	beq.n	8005810 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 80058ca:	9b01      	ldr	r3, [sp, #4]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80058d0:	9b01      	ldr	r3, [sp, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f9      	bne.n	80058ca <HAL_COMP_Init+0x102>
 80058d6:	e79b      	b.n	8005810 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 80058d8:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 80058da:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 80058dc:	f7fe fc4c 	bl	8004178 <HAL_COMP_MspInit>
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	e781      	b.n	80057e8 <HAL_COMP_Init+0x20>
 80058e4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80058e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058ec:	e7a1      	b.n	8005832 <HAL_COMP_Init+0x6a>
 80058ee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80058f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058f6:	e79c      	b.n	8005832 <HAL_COMP_Init+0x6a>
 80058f8:	ff007e0f 	.word	0xff007e0f
 80058fc:	40010200 	.word	0x40010200
 8005900:	40010204 	.word	0x40010204
 8005904:	40010400 	.word	0x40010400
 8005908:	20000608 	.word	0x20000608
 800590c:	053e2d63 	.word	0x053e2d63

08005910 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005910:	b1b0      	cbz	r0, 8005940 <HAL_CORDIC_Init+0x30>
{
 8005912:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005914:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005918:	4604      	mov	r4, r0
 800591a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800591e:	b153      	cbz	r3, 8005936 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005920:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005922:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005924:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005926:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 800592a:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 800592e:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005932:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8005934:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8005936:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800593a:	f7fe fc7d 	bl	8004238 <HAL_CORDIC_MspInit>
 800593e:	e7ef      	b.n	8005920 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8005940:	2001      	movs	r0, #1
}
 8005942:	4770      	bx	lr

08005944 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005944:	4908      	ldr	r1, [pc, #32]	; (8005968 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8005946:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005948:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800594a:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800594c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8005950:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005952:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800595c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005960:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8005964:	60cb      	str	r3, [r1, #12]
 8005966:	4770      	bx	lr
 8005968:	e000ed00 	.word	0xe000ed00

0800596c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800596c:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <HAL_NVIC_SetPriority+0x68>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005974:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005976:	f1c3 0507 	rsb	r5, r3, #7
 800597a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800597c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005980:	bf28      	it	cs
 8005982:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005984:	2c06      	cmp	r4, #6
 8005986:	d919      	bls.n	80059bc <HAL_NVIC_SetPriority+0x50>
 8005988:	3b03      	subs	r3, #3
 800598a:	f04f 34ff 	mov.w	r4, #4294967295
 800598e:	409c      	lsls	r4, r3
 8005990:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005994:	f04f 34ff 	mov.w	r4, #4294967295
 8005998:	40ac      	lsls	r4, r5
 800599a:	ea21 0104 	bic.w	r1, r1, r4
 800599e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80059a0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80059a6:	db0c      	blt.n	80059c2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80059ac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80059b0:	0109      	lsls	r1, r1, #4
 80059b2:	b2c9      	uxtb	r1, r1
 80059b4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80059b8:	bc30      	pop	{r4, r5}
 80059ba:	4770      	bx	lr
 80059bc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059be:	4613      	mov	r3, r2
 80059c0:	e7e8      	b.n	8005994 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <HAL_NVIC_SetPriority+0x6c>)
 80059c4:	f000 000f 	and.w	r0, r0, #15
 80059c8:	0109      	lsls	r1, r1, #4
 80059ca:	4403      	add	r3, r0
 80059cc:	b2c9      	uxtb	r1, r1
 80059ce:	7619      	strb	r1, [r3, #24]
 80059d0:	bc30      	pop	{r4, r5}
 80059d2:	4770      	bx	lr
 80059d4:	e000ed00 	.word	0xe000ed00
 80059d8:	e000ecfc 	.word	0xe000ecfc

080059dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80059dc:	2800      	cmp	r0, #0
 80059de:	db07      	blt.n	80059f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059e0:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <HAL_NVIC_EnableIRQ+0x18>)
 80059e2:	f000 011f 	and.w	r1, r0, #31
 80059e6:	2301      	movs	r3, #1
 80059e8:	0940      	lsrs	r0, r0, #5
 80059ea:	408b      	lsls	r3, r1
 80059ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	e000e100 	.word	0xe000e100

080059f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059f8:	3801      	subs	r0, #1
 80059fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80059fe:	d20e      	bcs.n	8005a1e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a00:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a02:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a04:	4c08      	ldr	r4, [pc, #32]	; (8005a28 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a06:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a08:	20f0      	movs	r0, #240	; 0xf0
 8005a0a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a0e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a10:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a12:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a14:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8005a16:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a1a:	6019      	str	r1, [r3, #0]
 8005a1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005a1e:	2001      	movs	r0, #1
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	e000e010 	.word	0xe000e010
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop

08005a30 <HAL_SYSTICK_IRQHandler>:
{
 8005a30:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005a32:	f7ff fffb 	bl	8005a2c <HAL_SYSTICK_Callback>
}
 8005a36:	bd08      	pop	{r3, pc}

08005a38 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005a38:	b188      	cbz	r0, 8005a5e <HAL_DAC_Init+0x26>
{
 8005a3a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005a3c:	7903      	ldrb	r3, [r0, #4]
 8005a3e:	4604      	mov	r4, r0
 8005a40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a44:	b13b      	cbz	r3, 8005a56 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005a46:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a48:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005a4a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a4c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005a4e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005a50:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8005a52:	4618      	mov	r0, r3
}
 8005a54:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005a56:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005a58:	f7fe fc06 	bl	8004268 <HAL_DAC_MspInit>
 8005a5c:	e7f3      	b.n	8005a46 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8005a5e:	2001      	movs	r0, #1
}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop

08005a64 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a68:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005a6a:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	f000 80c5 	beq.w	8005bfc <HAL_DAC_ConfigChannel+0x198>
 8005a72:	4614      	mov	r4, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a74:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8005a76:	2201      	movs	r2, #1

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005a78:	2f04      	cmp	r7, #4
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8005a7e:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a80:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005a82:	d077      	beq.n	8005b74 <HAL_DAC_ConfigChannel+0x110>
 8005a84:	6803      	ldr	r3, [r0, #0]
 8005a86:	f004 0410 	and.w	r4, r4, #16
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a8a:	69ea      	ldr	r2, [r5, #28]
 8005a8c:	2a01      	cmp	r2, #1
 8005a8e:	d108      	bne.n	8005aa2 <HAL_DAC_ConfigChannel+0x3e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a90:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a92:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a94:	201f      	movs	r0, #31
 8005a96:	40a0      	lsls	r0, r4
 8005a98:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a9c:	40a2      	lsls	r2, r4
 8005a9e:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005aa2:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 8005aa4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005aa6:	2207      	movs	r2, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005aa8:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005aaa:	fa02 fc04 	lsl.w	ip, r2, r4
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005aae:	696a      	ldr	r2, [r5, #20]
 8005ab0:	d05e      	beq.n	8005b70 <HAL_DAC_ConfigChannel+0x10c>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005ab2:	2902      	cmp	r1, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005ab4:	bf16      	itet	ne
 8005ab6:	fab2 f182 	clzne	r1, r2
    connectOnChip = DAC_MCR_MODE1_0;
 8005aba:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005abc:	0949      	lsrne	r1, r1, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005abe:	4311      	orrs	r1, r2
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005ac0:	792a      	ldrb	r2, [r5, #4]
 8005ac2:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005ac8:	f44f 7880 	mov.w	r8, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005acc:	fa02 f204 	lsl.w	r2, r2, r4
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005ad0:	fa08 f804 	lsl.w	r8, r8, r4
 8005ad4:	ea42 020c 	orr.w	r2, r2, ip
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005ad8:	ea47 0701 	orr.w	r7, r7, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005adc:	ea20 0202 	bic.w	r2, r0, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005ae0:	7969      	ldrb	r1, [r5, #5]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005ae2:	ea6f 0808 	mvn.w	r8, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005ae6:	ea08 0802 	and.w	r8, r8, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005aea:	682a      	ldr	r2, [r5, #0]
 8005aec:	bf08      	it	eq
 8005aee:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005af2:	2901      	cmp	r1, #1
 8005af4:	bf08      	it	eq
 8005af6:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005afa:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005afc:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005b00:	d073      	beq.n	8005bea <HAL_DAC_ConfigChannel+0x186>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005b02:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b06:	40a7      	lsls	r7, r4
 8005b08:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005b0c:	63df      	str	r7, [r3, #60]	; 0x3c
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005b0e:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8005b18:	40a5      	lsls	r5, r4
 8005b1a:	ea20 0005 	bic.w	r0, r0, r5
 8005b1e:	6018      	str	r0, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8005b20:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005b22:	f640 75fe 	movw	r5, #4094	; 0xffe
 8005b26:	40a5      	lsls	r5, r4
 8005b28:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b2c:	fa01 f004 	lsl.w	r0, r1, r4
 8005b30:	4328      	orrs	r0, r5
  hdac->Instance->CR = tmpreg1;
 8005b32:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	25c0      	movs	r5, #192	; 0xc0
 8005b38:	40a5      	lsls	r5, r4
 8005b3a:	ea20 0005 	bic.w	r0, r0, r5
 8005b3e:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005b40:	0192      	lsls	r2, r2, #6
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005b42:	6e18      	ldr	r0, [r3, #96]	; 0x60
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005b44:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005b48:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005b4c:	f640 750f 	movw	r5, #3855	; 0xf0f
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005b50:	430a      	orrs	r2, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005b52:	fa05 f104 	lsl.w	r1, r5, r4
 8005b56:	fa02 f404 	lsl.w	r4, r2, r4
 8005b5a:	ea20 0201 	bic.w	r2, r0, r1
 8005b5e:	4314      	orrs	r4, r2
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b60:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b62:	2200      	movs	r2, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005b64:	661c      	str	r4, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8005b66:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8005b68:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 8005b6a:	7172      	strb	r2, [r6, #5]
}
 8005b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8005b70:	2100      	movs	r1, #0
 8005b72:	e7a4      	b.n	8005abe <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 8005b74:	f7fe ff36 	bl	80049e4 <HAL_GetTick>
 8005b78:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8005b7a:	b12c      	cbz	r4, 8005b88 <HAL_DAC_ConfigChannel+0x124>
 8005b7c:	e014      	b.n	8005ba8 <HAL_DAC_ConfigChannel+0x144>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b7e:	f7fe ff31 	bl	80049e4 <HAL_GetTick>
 8005b82:	1bc3      	subs	r3, r0, r7
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d83c      	bhi.n	8005c02 <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b88:	6833      	ldr	r3, [r6, #0]
 8005b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	d4f6      	bmi.n	8005b7e <HAL_DAC_ConfigChannel+0x11a>
      HAL_Delay(1);
 8005b90:	2001      	movs	r0, #1
 8005b92:	f7fe ff2d 	bl	80049f0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b96:	6833      	ldr	r3, [r6, #0]
 8005b98:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
 8005b9c:	e00e      	b.n	8005bbc <HAL_DAC_ConfigChannel+0x158>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b9e:	f7fe ff21 	bl	80049e4 <HAL_GetTick>
 8005ba2:	1bc3      	subs	r3, r0, r7
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d82c      	bhi.n	8005c02 <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005ba8:	6833      	ldr	r3, [r6, #0]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	dbf6      	blt.n	8005b9e <HAL_DAC_ConfigChannel+0x13a>
      HAL_Delay(1U);
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	f7fe ff1d 	bl	80049f0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005bb6:	6833      	ldr	r3, [r6, #0]
 8005bb8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8005bba:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bbe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005bc0:	68af      	ldr	r7, [r5, #8]
 8005bc2:	f004 0410 	and.w	r4, r4, #16
 8005bc6:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8005bca:	40a0      	lsls	r0, r4
 8005bcc:	ea22 0200 	bic.w	r2, r2, r0
 8005bd0:	40a1      	lsls	r1, r4
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bd8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005bda:	20ff      	movs	r0, #255	; 0xff
 8005bdc:	40a0      	lsls	r0, r4
 8005bde:	ea22 0200 	bic.w	r2, r2, r0
 8005be2:	40a1      	lsls	r1, r4
 8005be4:	430a      	orrs	r2, r1
 8005be6:	64da      	str	r2, [r3, #76]	; 0x4c
 8005be8:	e74f      	b.n	8005a8a <HAL_DAC_ConfigChannel+0x26>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005bea:	f001 f993 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005bee:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <HAL_DAC_ConfigChannel+0x1bc>)
 8005bf0:	4298      	cmp	r0, r3
 8005bf2:	d90e      	bls.n	8005c12 <HAL_DAC_ConfigChannel+0x1ae>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005bf4:	6833      	ldr	r3, [r6, #0]
 8005bf6:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8005bfa:	e784      	b.n	8005b06 <HAL_DAC_ConfigChannel+0xa2>
  __HAL_LOCK(hdac);
 8005bfc:	2002      	movs	r0, #2
}
 8005bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c02:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c04:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c06:	f043 0308 	orr.w	r3, r3, #8
 8005c0a:	6133      	str	r3, [r6, #16]
          return HAL_TIMEOUT;
 8005c0c:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c0e:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 8005c10:	e7ac      	b.n	8005b6c <HAL_DAC_ConfigChannel+0x108>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005c12:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <HAL_DAC_ConfigChannel+0x1c0>)
 8005c14:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005c16:	bf88      	it	hi
 8005c18:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
 8005c1c:	6833      	ldr	r3, [r6, #0]
 8005c1e:	e772      	b.n	8005b06 <HAL_DAC_ConfigChannel+0xa2>
 8005c20:	09896800 	.word	0x09896800
 8005c24:	04c4b400 	.word	0x04c4b400

08005c28 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d07d      	beq.n	8005d28 <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c2c:	4a3f      	ldr	r2, [pc, #252]	; (8005d2c <HAL_DMA_Init+0x104>)
 8005c2e:	4603      	mov	r3, r0
 8005c30:	6800      	ldr	r0, [r0, #0]
 8005c32:	4290      	cmp	r0, r2
{
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c38:	d962      	bls.n	8005d00 <HAL_DMA_Init+0xd8>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005c3a:	493d      	ldr	r1, [pc, #244]	; (8005d30 <HAL_DMA_Init+0x108>)
 8005c3c:	4a3d      	ldr	r2, [pc, #244]	; (8005d34 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 8005c3e:	4c3e      	ldr	r4, [pc, #248]	; (8005d38 <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005c40:	4401      	add	r1, r0
 8005c42:	fba2 2101 	umull	r2, r1, r2, r1
 8005c46:	0909      	lsrs	r1, r1, #4
 8005c48:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c4a:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c4e:	691e      	ldr	r6, [r3, #16]
 8005c50:	641c      	str	r4, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 8005c52:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c54:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c56:	699d      	ldr	r5, [r3, #24]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c58:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8005d50 <HAL_DMA_Init+0x128>
 8005c5c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8005d2c <HAL_DMA_Init+0x104>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c60:	4332      	orrs	r2, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c62:	f04f 0c02 	mov.w	ip, #2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c66:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c68:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005c6c:	4c31      	ldr	r4, [pc, #196]	; (8005d34 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 8005c6e:	f8d0 c000 	ldr.w	ip, [r0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c72:	69de      	ldr	r6, [r3, #28]
 8005c74:	6459      	str	r1, [r3, #68]	; 0x44
 8005c76:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005c78:	b2c5      	uxtb	r5, r0
 8005c7a:	3d08      	subs	r5, #8
 8005c7c:	fba4 4505 	umull	r4, r5, r4, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c80:	6a1c      	ldr	r4, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c82:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c84:	f42c 4cff 	bic.w	ip, ip, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c88:	4e2c      	ldr	r6, [pc, #176]	; (8005d3c <HAL_DMA_Init+0x114>)
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c8a:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c8c:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c90:	f3c5 1404 	ubfx	r4, r5, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c94:	4540      	cmp	r0, r8
 8005c96:	bf88      	it	hi
 8005c98:	4676      	movhi	r6, lr
  tmp |=  hdma->Init.Direction        |
 8005c9a:	ea42 020c 	orr.w	r2, r2, ip
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c9e:	2501      	movs	r5, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ca0:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8005d54 <HAL_DMA_Init+0x12c>
  hdma->Instance->CCR = tmp;
 8005ca4:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ca6:	eb01 0e06 	add.w	lr, r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005caa:	fa05 f404 	lsl.w	r4, r5, r4
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005cae:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005cb2:	e9c3 ec12 	strd	lr, ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005cb6:	ea4f 0191 	mov.w	r1, r1, lsr #2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005cba:	651c      	str	r4, [r3, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005cbc:	d029      	beq.n	8005d12 <HAL_DMA_Init+0xea>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005cbe:	6858      	ldr	r0, [r3, #4]
 8005cc0:	b2c2      	uxtb	r2, r0
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005cc2:	3801      	subs	r0, #1
 8005cc4:	2803      	cmp	r0, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005cc6:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cca:	f8cc 4004 	str.w	r4, [ip, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005cce:	d826      	bhi.n	8005d1e <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cd0:	491b      	ldr	r1, [pc, #108]	; (8005d40 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cd2:	481c      	ldr	r0, [pc, #112]	; (8005d44 <HAL_DMA_Init+0x11c>)
 8005cd4:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cd6:	4411      	add	r1, r2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005cd8:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cda:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005cdc:	f002 021f 	and.w	r2, r2, #31
 8005ce0:	fa05 f202 	lsl.w	r2, r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ce4:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ce6:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005ce8:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005cea:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cec:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cee:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005cf0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cf2:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005cf4:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005cf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8005cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d00:	4911      	ldr	r1, [pc, #68]	; (8005d48 <HAL_DMA_Init+0x120>)
 8005d02:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8005d04:	4c11      	ldr	r4, [pc, #68]	; (8005d4c <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d06:	4401      	add	r1, r0
 8005d08:	fba2 2101 	umull	r2, r1, r2, r1
 8005d0c:	0909      	lsrs	r1, r1, #4
 8005d0e:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8005d10:	e79b      	b.n	8005c4a <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d12:	2200      	movs	r2, #0
 8005d14:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d16:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d1a:	f8cc 4004 	str.w	r4, [ip, #4]
    hdma->DMAmuxRequestGen = 0U;
 8005d1e:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8005d20:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d24:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d26:	e7e2      	b.n	8005cee <HAL_DMA_Init+0xc6>
    return HAL_ERROR;
 8005d28:	2001      	movs	r0, #1
}
 8005d2a:	4770      	bx	lr
 8005d2c:	40020407 	.word	0x40020407
 8005d30:	bffdfbf8 	.word	0xbffdfbf8
 8005d34:	cccccccd 	.word	0xcccccccd
 8005d38:	40020400 	.word	0x40020400
 8005d3c:	40020800 	.word	0x40020800
 8005d40:	1000823f 	.word	0x1000823f
 8005d44:	40020940 	.word	0x40020940
 8005d48:	bffdfff8 	.word	0xbffdfff8
 8005d4c:	40020000 	.word	0x40020000
 8005d50:	40020820 	.word	0x40020820
 8005d54:	40020880 	.word	0x40020880

08005d58 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	f000 80d8 	beq.w	8005f0e <HAL_FDCAN_Init+0x1b6>
{
 8005d5e:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005d60:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005d64:	4604      	mov	r4, r0
 8005d66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d071      	beq.n	8005e52 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	6993      	ldr	r3, [r2, #24]
 8005d72:	f023 0310 	bic.w	r3, r3, #16
 8005d76:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d78:	f7fe fe34 	bl	80049e4 <HAL_GetTick>
 8005d7c:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d7e:	e004      	b.n	8005d8a <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d80:	f7fe fe30 	bl	80049e4 <HAL_GetTick>
 8005d84:	1b43      	subs	r3, r0, r5
 8005d86:	2b0a      	cmp	r3, #10
 8005d88:	d85a      	bhi.n	8005e40 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	0711      	lsls	r1, r2, #28
 8005d90:	d4f6      	bmi.n	8005d80 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	f042 0201 	orr.w	r2, r2, #1
 8005d98:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d9a:	f7fe fe23 	bl	80049e4 <HAL_GetTick>
 8005d9e:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005da0:	e004      	b.n	8005dac <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005da2:	f7fe fe1f 	bl	80049e4 <HAL_GetTick>
 8005da6:	1b40      	subs	r0, r0, r5
 8005da8:	280a      	cmp	r0, #10
 8005daa:	d849      	bhi.n	8005e40 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	07d2      	lsls	r2, r2, #31
 8005db2:	d5f6      	bpl.n	8005da2 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005db4:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005db6:	4959      	ldr	r1, [pc, #356]	; (8005f1c <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005db8:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8005dbc:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005dbe:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8005dc0:	f000 80a1 	beq.w	8005f06 <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005dc4:	7c22      	ldrb	r2, [r4, #16]
 8005dc6:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	bf0c      	ite	eq
 8005dcc:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005dd0:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8005dd4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005dd6:	7c62      	ldrb	r2, [r4, #17]
 8005dd8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	bf0c      	ite	eq
 8005dde:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005de2:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8005de6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005de8:	7ca2      	ldrb	r2, [r4, #18]
 8005dea:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	bf0c      	ite	eq
 8005df0:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005df4:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8005df8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005dfa:	699a      	ldr	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005dfc:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005e00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e04:	432a      	orrs	r2, r5
 8005e06:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005e08:	699a      	ldr	r2, [r3, #24]
 8005e0a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005e0e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e10:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005e12:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e14:	f022 0210 	bic.w	r2, r2, #16
 8005e18:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005e1a:	d01f      	beq.n	8005e5c <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005e1c:	b311      	cbz	r1, 8005e64 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005e1e:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005e20:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005e22:	d076      	beq.n	8005f12 <HAL_FDCAN_Init+0x1ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005e24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e28:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e2a:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005e2c:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e2e:	f042 0210 	orr.w	r2, r2, #16
 8005e32:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005e34:	d116      	bne.n	8005e64 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	f042 0220 	orr.w	r2, r2, #32
 8005e3c:	619a      	str	r2, [r3, #24]
 8005e3e:	e011      	b.n	8005e64 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005e40:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e42:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e4a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8005e4e:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005e50:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005e52:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005e56:	f7fe fa1f 	bl	8004298 <HAL_FDCAN_MspInit>
 8005e5a:	e788      	b.n	8005d6e <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	f042 0204 	orr.w	r2, r2, #4
 8005e62:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e64:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e68:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e6a:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e6c:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e6e:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e70:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005e74:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e76:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e78:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005e7a:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e80:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e84:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e86:	d10e      	bne.n	8005ea6 <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e88:	e9d4 520b 	ldrd	r5, r2, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005e8c:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e90:	3a01      	subs	r2, #1
 8005e92:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e94:	3d01      	subs	r5, #1
 8005e96:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e9a:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e9c:	4302      	orrs	r2, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005e9e:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ea4:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005ea6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005eaa:	6be2      	ldr	r2, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005eac:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005eae:	481c      	ldr	r0, [pc, #112]	; (8005f20 <HAL_FDCAN_Init+0x1c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005eb0:	4311      	orrs	r1, r2
 8005eb2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005eb6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005eba:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005ebc:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005ec0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8005ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005ec8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005ecc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005ece:	4d15      	ldr	r5, [pc, #84]	; (8005f24 <HAL_FDCAN_Init+0x1cc>)
 8005ed0:	6465      	str	r5, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005ed2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ed6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005ede:	4912      	ldr	r1, [pc, #72]	; (8005f28 <HAL_FDCAN_Init+0x1d0>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005ee0:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <HAL_FDCAN_Init+0x1d4>)
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005ee2:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <HAL_FDCAN_Init+0x1d8>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005ee4:	3540      	adds	r5, #64	; 0x40
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005ee6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005eea:	e9c4 5112 	strd	r5, r1, [r4, #72]	; 0x48

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005eee:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	f004 fb0e 	bl	800a514 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ef8:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005efa:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005efc:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005efe:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8005f02:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8005f04:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005f06:	4a0b      	ldr	r2, [pc, #44]	; (8005f34 <HAL_FDCAN_Init+0x1dc>)
 8005f08:	6861      	ldr	r1, [r4, #4]
 8005f0a:	6011      	str	r1, [r2, #0]
 8005f0c:	e75a      	b.n	8005dc4 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8005f0e:	2001      	movs	r0, #1
}
 8005f10:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005f12:	f042 0220 	orr.w	r2, r2, #32
 8005f16:	619a      	str	r2, [r3, #24]
 8005f18:	e7a4      	b.n	8005e64 <HAL_FDCAN_Init+0x10c>
 8005f1a:	bf00      	nop
 8005f1c:	40006400 	.word	0x40006400
 8005f20:	4000a400 	.word	0x4000a400
 8005f24:	4000a470 	.word	0x4000a470
 8005f28:	4000a588 	.word	0x4000a588
 8005f2c:	4000a678 	.word	0x4000a678
 8005f30:	4000a660 	.word	0x4000a660
 8005f34:	40006500 	.word	0x40006500

08005f38 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005f38:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8005f3c:	2a01      	cmp	r2, #1
{
 8005f3e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005f40:	d005      	beq.n	8005f4e <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f42:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005f44:	f042 0204 	orr.w	r2, r2, #4
 8005f48:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005f4a:	2001      	movs	r0, #1
}
 8005f4c:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f4e:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005f50:	2202      	movs	r2, #2
 8005f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f56:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f58:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f5a:	f022 0201 	bic.w	r2, r2, #1
 8005f5e:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8005f60:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f62:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop

08005f68 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8005f68:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005f6a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8005f6e:	2802      	cmp	r0, #2
 8005f70:	d10e      	bne.n	8005f90 <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
{
 8005f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005f76:	681d      	ldr	r5, [r3, #0]
 8005f78:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8005f7c:	f410 1000 	ands.w	r0, r0, #2097152	; 0x200000
 8005f80:	d00c      	beq.n	8005f9c <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005f82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f88:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005f8a:	2001      	movs	r0, #1
}
 8005f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005f90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f92:	f042 0208 	orr.w	r2, r2, #8
 8005f96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_ERROR;
 8005f98:	2001      	movs	r0, #1
}
 8005f9a:	4770      	bx	lr
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005f9c:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005fa0:	684c      	ldr	r4, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005fa2:	f3c6 4c01 	ubfx	ip, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005fa6:	2c00      	cmp	r4, #0
 8005fa8:	d13c      	bne.n	8006024 <HAL_FDCAN_AddMessageToTxFifoQ+0xbc>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8005faa:	690c      	ldr	r4, [r1, #16]
 8005fac:	688f      	ldr	r7, [r1, #8]
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8005fae:	680e      	ldr	r6, [r1, #0]
                   FDCAN_STANDARD_ID |
 8005fb0:	433c      	orrs	r4, r7
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005fb2:	ea44 4886 	orr.w	r8, r4, r6, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005fb6:	e9d1 7406 	ldrd	r7, r4, [r1, #24]
 8005fba:	694e      	ldr	r6, [r1, #20]
 8005fbc:	433c      	orrs	r4, r7
 8005fbe:	4334      	orrs	r4, r6
 8005fc0:	68ce      	ldr	r6, [r1, #12]
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005fc2:	6d5f      	ldr	r7, [r3, #84]	; 0x54
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005fc4:	ea44 0e06 	orr.w	lr, r4, r6
 8005fc8:	6a0c      	ldr	r4, [r1, #32]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005fca:	eb0c 06cc 	add.w	r6, ip, ip, lsl #3
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005fce:	ea4e 6404 	orr.w	r4, lr, r4, lsl #24
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005fd2:	eb07 0ec6 	add.w	lr, r7, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005fd6:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 8005fda:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005fde:	89cc      	ldrh	r4, [r1, #14]
 8005fe0:	4e14      	ldr	r6, [pc, #80]	; (8006034 <HAL_FDCAN_AddMessageToTxFifoQ+0xcc>)
 8005fe2:	5d34      	ldrb	r4, [r6, r4]
 8005fe4:	b1ac      	cbz	r4, 8006012 <HAL_FDCAN_AddMessageToTxFifoQ+0xaa>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005fe6:	7894      	ldrb	r4, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005fe8:	f892 8003 	ldrb.w	r8, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8005fec:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005fee:	0424      	lsls	r4, r4, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005ff0:	ea44 6408 	orr.w	r4, r4, r8, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005ff4:	f892 8001 	ldrb.w	r8, [r2, #1]
 8005ff8:	433c      	orrs	r4, r7
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005ffa:	eb00 070e 	add.w	r7, r0, lr
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005ffe:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006002:	60bc      	str	r4, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006004:	89cc      	ldrh	r4, [r1, #14]
 8006006:	5d34      	ldrb	r4, [r6, r4]
 8006008:	3004      	adds	r0, #4
 800600a:	42a0      	cmp	r0, r4
 800600c:	f102 0204 	add.w	r2, r2, #4
 8006010:	d3e9      	bcc.n	8005fe6 <HAL_FDCAN_AddMessageToTxFifoQ+0x7e>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006012:	2201      	movs	r2, #1
 8006014:	fa02 f20c 	lsl.w	r2, r2, ip
 8006018:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
    return HAL_OK;
 800601c:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800601e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                   pTxHeader->TxFrameType |
 8006024:	690c      	ldr	r4, [r1, #16]
 8006026:	680f      	ldr	r7, [r1, #0]
 8006028:	688e      	ldr	r6, [r1, #8]
 800602a:	433c      	orrs	r4, r7
 800602c:	4326      	orrs	r6, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800602e:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
 8006032:	e7c0      	b.n	8005fb6 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8006034:	0800a7c0 	.word	0x0800a7c0

08006038 <HAL_FDCAN_GetRxMessage>:
{
 8006038:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800603a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 800603e:	2c02      	cmp	r4, #2
 8006040:	d10c      	bne.n	800605c <HAL_FDCAN_GetRxMessage+0x24>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006042:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006044:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006046:	d00f      	beq.n	8006068 <HAL_FDCAN_GetRxMessage+0x30>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006048:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 800604c:	0724      	lsls	r4, r4, #28
 800604e:	d15c      	bne.n	800610a <HAL_FDCAN_GetRxMessage+0xd2>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006050:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006056:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8006058:	2001      	movs	r0, #1
}
 800605a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800605c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800605e:	f043 0308 	orr.w	r3, r3, #8
 8006062:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006064:	2001      	movs	r0, #1
}
 8006066:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006068:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
 800606c:	0725      	lsls	r5, r4, #28
 800606e:	d0ef      	beq.n	8006050 <HAL_FDCAN_GetRxMessage+0x18>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006070:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006074:	6c87      	ldr	r7, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006076:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800607a:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800607e:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006082:	683c      	ldr	r4, [r7, #0]
 8006084:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006088:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800608a:	2c00      	cmp	r4, #0
 800608c:	d14c      	bne.n	8006128 <HAL_FDCAN_GetRxMessage+0xf0>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800608e:	683c      	ldr	r4, [r7, #0]
 8006090:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8006094:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006096:	683c      	ldr	r4, [r7, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006098:	f8df c094 	ldr.w	ip, [pc, #148]	; 8006130 <HAL_FDCAN_GetRxMessage+0xf8>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800609c:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 80060a0:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80060a2:	683c      	ldr	r4, [r7, #0]
 80060a4:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80060a8:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80060aa:	88bc      	ldrh	r4, [r7, #4]
 80060ac:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80060ae:	687c      	ldr	r4, [r7, #4]
 80060b0:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 80060b4:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80060b6:	687d      	ldr	r5, [r7, #4]
 80060b8:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 80060bc:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80060be:	687d      	ldr	r5, [r7, #4]
 80060c0:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 80060c4:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80060c6:	79fd      	ldrb	r5, [r7, #7]
 80060c8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80060cc:	0c24      	lsrs	r4, r4, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80060ce:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80060d0:	687d      	ldr	r5, [r7, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80060d2:	f81c 4004 	ldrb.w	r4, [ip, r4]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80060d6:	0fed      	lsrs	r5, r5, #31
 80060d8:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80060da:	b174      	cbz	r4, 80060fa <HAL_FDCAN_GetRxMessage+0xc2>
 80060dc:	1e5d      	subs	r5, r3, #1
 80060de:	1dfc      	adds	r4, r7, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 80060e0:	4623      	mov	r3, r4
 80060e2:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 80060e6:	f805 6f01 	strb.w	r6, [r5, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80060ea:	89d6      	ldrh	r6, [r2, #14]
 80060ec:	3b06      	subs	r3, #6
 80060ee:	f81c 6006 	ldrb.w	r6, [ip, r6]
 80060f2:	1bdb      	subs	r3, r3, r7
 80060f4:	429e      	cmp	r6, r3
 80060f6:	d8f3      	bhi.n	80060e0 <HAL_FDCAN_GetRxMessage+0xa8>
 80060f8:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80060fa:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 80060fc:	bf0c      	ite	eq
 80060fe:	f8c6 e094 	streq.w	lr, [r6, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006102:	f8c6 e09c 	strne.w	lr, [r6, #156]	; 0x9c
    return HAL_OK;
 8006106:	2000      	movs	r0, #0
}
 8006108:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800610a:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800610e:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006110:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006114:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8006118:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800611c:	683c      	ldr	r4, [r7, #0]
 800611e:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006122:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006124:	2c00      	cmp	r4, #0
 8006126:	d0b2      	beq.n	800608e <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006128:	683c      	ldr	r4, [r7, #0]
 800612a:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 800612e:	e7b1      	b.n	8006094 <HAL_FDCAN_GetRxMessage+0x5c>
 8006130:	0800a7c0 	.word	0x0800a7c0

08006134 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006134:	6803      	ldr	r3, [r0, #0]
 8006136:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 800613a:	f000 0007 	and.w	r0, r0, #7
 800613e:	4770      	bx	lr

08006140 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006140:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006144:	3b01      	subs	r3, #1
 8006146:	2b01      	cmp	r3, #1
 8006148:	d905      	bls.n	8006156 <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800614a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800614c:	f043 0302 	orr.w	r3, r3, #2
 8006150:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006152:	2001      	movs	r0, #1
}
 8006154:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006156:	6803      	ldr	r3, [r0, #0]
{
 8006158:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800615a:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 800615e:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006160:	d03d      	beq.n	80061de <HAL_FDCAN_ActivateNotification+0x9e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006162:	07c4      	lsls	r4, r0, #31
 8006164:	d43b      	bmi.n	80061de <HAL_FDCAN_ActivateNotification+0x9e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006166:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8006168:	f044 0401 	orr.w	r4, r4, #1
 800616c:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800616e:	b1cd      	cbz	r5, 80061a4 <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006170:	07c5      	lsls	r5, r0, #31
 8006172:	d517      	bpl.n	80061a4 <HAL_FDCAN_ActivateNotification+0x64>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006174:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006176:	f040 0002 	orr.w	r0, r0, #2
 800617a:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800617c:	060c      	lsls	r4, r1, #24
 800617e:	d504      	bpl.n	800618a <HAL_FDCAN_ActivateNotification+0x4a>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006180:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8006184:	4310      	orrs	r0, r2
 8006186:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800618a:	05c8      	lsls	r0, r1, #23
 800618c:	d504      	bpl.n	8006198 <HAL_FDCAN_ActivateNotification+0x58>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800618e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8006192:	4302      	orrs	r2, r0
 8006194:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800619a:	4311      	orrs	r1, r2
    return HAL_OK;
 800619c:	2000      	movs	r0, #0
}
 800619e:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80061a0:	6559      	str	r1, [r3, #84]	; 0x54
}
 80061a2:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80061a4:	f011 0f38 	tst.w	r1, #56	; 0x38
 80061a8:	d001      	beq.n	80061ae <HAL_FDCAN_ActivateNotification+0x6e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80061aa:	0784      	lsls	r4, r0, #30
 80061ac:	d4e2      	bmi.n	8006174 <HAL_FDCAN_ActivateNotification+0x34>
 80061ae:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80061b2:	d131      	bne.n	8006218 <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80061b4:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80061b8:	d001      	beq.n	80061be <HAL_FDCAN_ActivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80061ba:	0704      	lsls	r4, r0, #28
 80061bc:	d4da      	bmi.n	8006174 <HAL_FDCAN_ActivateNotification+0x34>
 80061be:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80061c2:	d001      	beq.n	80061c8 <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80061c4:	06c5      	lsls	r5, r0, #27
 80061c6:	d4d5      	bmi.n	8006174 <HAL_FDCAN_ActivateNotification+0x34>
 80061c8:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80061cc:	d001      	beq.n	80061d2 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80061ce:	0684      	lsls	r4, r0, #26
 80061d0:	d4d0      	bmi.n	8006174 <HAL_FDCAN_ActivateNotification+0x34>
 80061d2:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80061d6:	d0d1      	beq.n	800617c <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80061d8:	0645      	lsls	r5, r0, #25
 80061da:	d5cf      	bpl.n	800617c <HAL_FDCAN_ActivateNotification+0x3c>
 80061dc:	e7ca      	b.n	8006174 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80061de:	f011 0f38 	tst.w	r1, #56	; 0x38
 80061e2:	d001      	beq.n	80061e8 <HAL_FDCAN_ActivateNotification+0xa8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80061e4:	0784      	lsls	r4, r0, #30
 80061e6:	d5be      	bpl.n	8006166 <HAL_FDCAN_ActivateNotification+0x26>
 80061e8:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80061ec:	d117      	bne.n	800621e <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80061ee:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80061f2:	d001      	beq.n	80061f8 <HAL_FDCAN_ActivateNotification+0xb8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80061f4:	0704      	lsls	r4, r0, #28
 80061f6:	d5b6      	bpl.n	8006166 <HAL_FDCAN_ActivateNotification+0x26>
 80061f8:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80061fc:	d001      	beq.n	8006202 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80061fe:	06c4      	lsls	r4, r0, #27
 8006200:	d5b1      	bpl.n	8006166 <HAL_FDCAN_ActivateNotification+0x26>
 8006202:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006206:	d001      	beq.n	800620c <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006208:	0684      	lsls	r4, r0, #26
 800620a:	d5ac      	bpl.n	8006166 <HAL_FDCAN_ActivateNotification+0x26>
 800620c:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006210:	d0ad      	beq.n	800616e <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006212:	0644      	lsls	r4, r0, #25
 8006214:	d4ab      	bmi.n	800616e <HAL_FDCAN_ActivateNotification+0x2e>
 8006216:	e7a6      	b.n	8006166 <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006218:	0745      	lsls	r5, r0, #29
 800621a:	d4ab      	bmi.n	8006174 <HAL_FDCAN_ActivateNotification+0x34>
 800621c:	e7ca      	b.n	80061b4 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800621e:	0744      	lsls	r4, r0, #29
 8006220:	d5a1      	bpl.n	8006166 <HAL_FDCAN_ActivateNotification+0x26>
 8006222:	e7e4      	b.n	80061ee <HAL_FDCAN_ActivateNotification+0xae>

08006224 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop

08006228 <HAL_FDCAN_RxFifo1Callback>:
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop

0800622c <HAL_FDCAN_TxFifoEmptyCallback>:
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop

08006230 <HAL_FDCAN_TxBufferCompleteCallback>:
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop

08006234 <HAL_FDCAN_TxBufferAbortCallback>:
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop

08006238 <HAL_FDCAN_TimestampWraparoundCallback>:
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop

0800623c <HAL_FDCAN_TimeoutOccurredCallback>:
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop

08006240 <HAL_FDCAN_HighPriorityMessageCallback>:
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop

08006244 <HAL_FDCAN_ErrorCallback>:
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop

08006248 <HAL_FDCAN_ErrorStatusCallback>:
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop

0800624c <HAL_FDCAN_IRQHandler>:
{
 800624c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006250:	6803      	ldr	r3, [r0, #0]
 8006252:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006256:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800625a:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 800625e:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006260:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006262:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006264:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006266:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800626a:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 800626c:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006270:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006272:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006276:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 800627a:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 800627e:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006280:	0652      	lsls	r2, r2, #25
{
 8006282:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006284:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006288:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 800628c:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8006290:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006294:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006298:	d502      	bpl.n	80062a0 <HAL_FDCAN_IRQHandler+0x54>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800629a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800629c:	0651      	lsls	r1, r2, #25
 800629e:	d473      	bmi.n	8006388 <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80062a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062a2:	05d2      	lsls	r2, r2, #23
 80062a4:	d502      	bpl.n	80062ac <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80062a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062a8:	05d0      	lsls	r0, r2, #23
 80062aa:	d45d      	bmi.n	8006368 <HAL_FDCAN_IRQHandler+0x11c>
  if (TxEventFifoITs != 0U)
 80062ac:	f1b9 0f00 	cmp.w	r9, #0
 80062b0:	d14a      	bne.n	8006348 <HAL_FDCAN_IRQHandler+0xfc>
  if (RxFifo0ITs != 0U)
 80062b2:	f1b8 0f00 	cmp.w	r8, #0
 80062b6:	d137      	bne.n	8006328 <HAL_FDCAN_IRQHandler+0xdc>
  if (RxFifo1ITs != 0U)
 80062b8:	2f00      	cmp	r7, #0
 80062ba:	d13e      	bne.n	800633a <HAL_FDCAN_IRQHandler+0xee>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80062bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062be:	0591      	lsls	r1, r2, #22
 80062c0:	d502      	bpl.n	80062c8 <HAL_FDCAN_IRQHandler+0x7c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80062c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062c4:	0592      	lsls	r2, r2, #22
 80062c6:	d475      	bmi.n	80063b4 <HAL_FDCAN_IRQHandler+0x168>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80062c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ca:	0617      	lsls	r7, r2, #24
 80062cc:	d502      	bpl.n	80062d4 <HAL_FDCAN_IRQHandler+0x88>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80062ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062d0:	0610      	lsls	r0, r2, #24
 80062d2:	d477      	bmi.n	80063c4 <HAL_FDCAN_IRQHandler+0x178>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80062d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062d6:	0491      	lsls	r1, r2, #18
 80062d8:	d502      	bpl.n	80062e0 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80062da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062dc:	0492      	lsls	r2, r2, #18
 80062de:	d459      	bmi.n	8006394 <HAL_FDCAN_IRQHandler+0x148>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80062e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062e2:	0417      	lsls	r7, r2, #16
 80062e4:	d502      	bpl.n	80062ec <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80062e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e8:	0410      	lsls	r0, r2, #16
 80062ea:	d45b      	bmi.n	80063a4 <HAL_FDCAN_IRQHandler+0x158>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80062ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ee:	0451      	lsls	r1, r2, #17
 80062f0:	d509      	bpl.n	8006306 <HAL_FDCAN_IRQHandler+0xba>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80062f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062f4:	0452      	lsls	r2, r2, #17
 80062f6:	d506      	bpl.n	8006306 <HAL_FDCAN_IRQHandler+0xba>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80062f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062fc:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80062fe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006304:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8006306:	b94e      	cbnz	r6, 800631c <HAL_FDCAN_IRQHandler+0xd0>
  if (Errors != 0U)
 8006308:	b125      	cbz	r5, 8006314 <HAL_FDCAN_IRQHandler+0xc8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 800630e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006310:	431d      	orrs	r5, r3
 8006312:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006314:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006316:	bb13      	cbnz	r3, 800635e <HAL_FDCAN_IRQHandler+0x112>
}
 8006318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800631c:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800631e:	4631      	mov	r1, r6
 8006320:	4620      	mov	r0, r4
 8006322:	f7ff ff91 	bl	8006248 <HAL_FDCAN_ErrorStatusCallback>
 8006326:	e7ef      	b.n	8006308 <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006328:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800632c:	4641      	mov	r1, r8
 800632e:	4620      	mov	r0, r4
 8006330:	f7fb fcc8 	bl	8001cc4 <HAL_FDCAN_RxFifo0Callback>
 8006334:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8006336:	2f00      	cmp	r7, #0
 8006338:	d0c0      	beq.n	80062bc <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800633a:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800633c:	4639      	mov	r1, r7
 800633e:	4620      	mov	r0, r4
 8006340:	f7ff ff72 	bl	8006228 <HAL_FDCAN_RxFifo1Callback>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	e7b9      	b.n	80062bc <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006348:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800634c:	4649      	mov	r1, r9
 800634e:	4620      	mov	r0, r4
 8006350:	f7ff ff68 	bl	8006224 <HAL_FDCAN_TxEventFifoCallback>
 8006354:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8006356:	f1b8 0f00 	cmp.w	r8, #0
 800635a:	d0ad      	beq.n	80062b8 <HAL_FDCAN_IRQHandler+0x6c>
 800635c:	e7e4      	b.n	8006328 <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 800635e:	4620      	mov	r0, r4
 8006360:	f7ff ff70 	bl	8006244 <HAL_FDCAN_ErrorCallback>
}
 8006364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006368:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800636c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006370:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006374:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006376:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006378:	4620      	mov	r0, r4
 800637a:	f7ff ff5b 	bl	8006234 <HAL_FDCAN_TxBufferAbortCallback>
 800637e:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8006380:	f1b9 0f00 	cmp.w	r9, #0
 8006384:	d095      	beq.n	80062b2 <HAL_FDCAN_IRQHandler+0x66>
 8006386:	e7df      	b.n	8006348 <HAL_FDCAN_IRQHandler+0xfc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006388:	2240      	movs	r2, #64	; 0x40
 800638a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800638c:	f7ff ff58 	bl	8006240 <HAL_FDCAN_HighPriorityMessageCallback>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	e785      	b.n	80062a0 <HAL_FDCAN_IRQHandler+0x54>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006394:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006398:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800639a:	4620      	mov	r0, r4
 800639c:	f7ff ff4c 	bl	8006238 <HAL_FDCAN_TimestampWraparoundCallback>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	e79d      	b.n	80062e0 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80063a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80063a8:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80063aa:	4620      	mov	r0, r4
 80063ac:	f7ff ff46 	bl	800623c <HAL_FDCAN_TimeoutOccurredCallback>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	e79b      	b.n	80062ec <HAL_FDCAN_IRQHandler+0xa0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80063b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063b8:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7ff ff36 	bl	800622c <HAL_FDCAN_TxFifoEmptyCallback>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	e781      	b.n	80062c8 <HAL_FDCAN_IRQHandler+0x7c>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80063c4:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80063c8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80063cc:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80063ce:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80063d0:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7ff ff2c 	bl	8006230 <HAL_FDCAN_TxBufferCompleteCallback>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	e77b      	b.n	80062d4 <HAL_FDCAN_IRQHandler+0x88>

080063dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063e0:	680e      	ldr	r6, [r1, #0]
{
 80063e2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063e4:	2e00      	cmp	r6, #0
 80063e6:	f000 808b 	beq.w	8006500 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80063ea:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 80065c0 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 80063ee:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80063f0:	2201      	movs	r2, #1
 80063f2:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 80063f6:	ea14 0c06 	ands.w	ip, r4, r6
 80063fa:	d07c      	beq.n	80064f6 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063fc:	684d      	ldr	r5, [r1, #4]
 80063fe:	f025 0a10 	bic.w	sl, r5, #16
 8006402:	f10a 32ff 	add.w	r2, sl, #4294967295
 8006406:	2a01      	cmp	r2, #1
 8006408:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800640c:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006410:	d979      	bls.n	8006506 <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 8006412:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006414:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006416:	fa02 f208 	lsl.w	r2, r2, r8
 800641a:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800641e:	fa04 f408 	lsl.w	r4, r4, r8
 8006422:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8006424:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006426:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8006428:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800642a:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800642e:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006430:	fa02 f208 	lsl.w	r2, r2, r8
 8006434:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006436:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8006438:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800643a:	d55c      	bpl.n	80064f6 <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800643c:	4c5a      	ldr	r4, [pc, #360]	; (80065a8 <HAL_GPIO_Init+0x1cc>)
 800643e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	6622      	str	r2, [r4, #96]	; 0x60
 8006446:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006448:	f023 0403 	bic.w	r4, r3, #3
 800644c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006450:	f002 0201 	and.w	r2, r2, #1
 8006454:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8006458:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800645a:	f003 0203 	and.w	r2, r3, #3
 800645e:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006462:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006464:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006466:	220f      	movs	r2, #15
 8006468:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800646c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006470:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006474:	d018      	beq.n	80064a8 <HAL_GPIO_Init+0xcc>
 8006476:	4a4d      	ldr	r2, [pc, #308]	; (80065ac <HAL_GPIO_Init+0x1d0>)
 8006478:	4290      	cmp	r0, r2
 800647a:	f000 8084 	beq.w	8006586 <HAL_GPIO_Init+0x1aa>
 800647e:	4a4c      	ldr	r2, [pc, #304]	; (80065b0 <HAL_GPIO_Init+0x1d4>)
 8006480:	4290      	cmp	r0, r2
 8006482:	f000 8085 	beq.w	8006590 <HAL_GPIO_Init+0x1b4>
 8006486:	4a4b      	ldr	r2, [pc, #300]	; (80065b4 <HAL_GPIO_Init+0x1d8>)
 8006488:	4290      	cmp	r0, r2
 800648a:	d076      	beq.n	800657a <HAL_GPIO_Init+0x19e>
 800648c:	4a4a      	ldr	r2, [pc, #296]	; (80065b8 <HAL_GPIO_Init+0x1dc>)
 800648e:	4290      	cmp	r0, r2
 8006490:	f000 8084 	beq.w	800659c <HAL_GPIO_Init+0x1c0>
 8006494:	4a49      	ldr	r2, [pc, #292]	; (80065bc <HAL_GPIO_Init+0x1e0>)
 8006496:	4290      	cmp	r0, r2
 8006498:	bf0c      	ite	eq
 800649a:	f04f 0805 	moveq.w	r8, #5
 800649e:	f04f 0806 	movne.w	r8, #6
 80064a2:	fa08 f209 	lsl.w	r2, r8, r9
 80064a6:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064a8:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 80064aa:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 80064ae:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064b2:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 80064b4:	bf54      	ite	pl
 80064b6:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80064b8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 80064bc:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 80064c0:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80064c4:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 80064c6:	bf54      	ite	pl
 80064c8:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80064ca:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 80064ce:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064d2:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80064d6:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 80064d8:	bf54      	ite	pl
 80064da:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80064dc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 80064e0:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 80064e4:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064e8:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 80064ea:	bf54      	ite	pl
 80064ec:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80064ee:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 80064f2:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 80064f6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064f8:	fa36 f203 	lsrs.w	r2, r6, r3
 80064fc:	f47f af78 	bne.w	80063f0 <HAL_GPIO_Init+0x14>
  }
}
 8006500:	b003      	add	sp, #12
 8006502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8006506:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006508:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800650c:	fa02 f208 	lsl.w	r2, r2, r8
 8006510:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006514:	68cf      	ldr	r7, [r1, #12]
 8006516:	fa07 f708 	lsl.w	r7, r7, r8
 800651a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 800651e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006520:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006522:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006526:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800652a:	465c      	mov	r4, fp
 800652c:	409c      	lsls	r4, r3
 800652e:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8006530:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8006532:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006534:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006538:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800653c:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006540:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006544:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8006548:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800654a:	f47f af6d 	bne.w	8006428 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 800654e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8006552:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006556:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800655a:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800655e:	0092      	lsls	r2, r2, #2
 8006560:	f04f 0a0f 	mov.w	sl, #15
 8006564:	fa0a fb02 	lsl.w	fp, sl, r2
 8006568:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800656c:	690c      	ldr	r4, [r1, #16]
 800656e:	4094      	lsls	r4, r2
 8006570:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8006574:	f8c9 4020 	str.w	r4, [r9, #32]
 8006578:	e756      	b.n	8006428 <HAL_GPIO_Init+0x4c>
 800657a:	f04f 0803 	mov.w	r8, #3
 800657e:	fa08 f209 	lsl.w	r2, r8, r9
 8006582:	4317      	orrs	r7, r2
 8006584:	e790      	b.n	80064a8 <HAL_GPIO_Init+0xcc>
 8006586:	2201      	movs	r2, #1
 8006588:	fa02 f209 	lsl.w	r2, r2, r9
 800658c:	4317      	orrs	r7, r2
 800658e:	e78b      	b.n	80064a8 <HAL_GPIO_Init+0xcc>
 8006590:	f04f 0802 	mov.w	r8, #2
 8006594:	fa08 f209 	lsl.w	r2, r8, r9
 8006598:	4317      	orrs	r7, r2
 800659a:	e785      	b.n	80064a8 <HAL_GPIO_Init+0xcc>
 800659c:	f04f 0804 	mov.w	r8, #4
 80065a0:	fa08 f209 	lsl.w	r2, r8, r9
 80065a4:	4317      	orrs	r7, r2
 80065a6:	e77f      	b.n	80064a8 <HAL_GPIO_Init+0xcc>
 80065a8:	40021000 	.word	0x40021000
 80065ac:	48000400 	.word	0x48000400
 80065b0:	48000800 	.word	0x48000800
 80065b4:	48000c00 	.word	0x48000c00
 80065b8:	48001000 	.word	0x48001000
 80065bc:	48001400 	.word	0x48001400
 80065c0:	40010400 	.word	0x40010400

080065c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065c4:	b10a      	cbz	r2, 80065ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065c6:	6181      	str	r1, [r0, #24]
 80065c8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065ca:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop

080065d0 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d07d      	beq.n	80066d0 <HAL_OPAMP_Init+0x100>
{
 80065d4:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80065d6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80065da:	2b05      	cmp	r3, #5
{
 80065dc:	b082      	sub	sp, #8
 80065de:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80065e0:	d057      	beq.n	8006692 <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80065e2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d053      	beq.n	8006692 <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ea:	4b3a      	ldr	r3, [pc, #232]	; (80066d4 <HAL_OPAMP_Init+0x104>)
 80065ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	661a      	str	r2, [r3, #96]	; 0x60
 80065f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80065fe:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006602:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006606:	b90b      	cbnz	r3, 800660c <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006608:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800660c:	4620      	mov	r0, r4
 800660e:	f7fd fea1 	bl	8004354 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006612:	68a3      	ldr	r3, [r4, #8]
 8006614:	f023 0220 	bic.w	r2, r3, #32
 8006618:	2a40      	cmp	r2, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800661a:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800661c:	d03c      	beq.n	8006698 <HAL_OPAMP_Init+0xc8>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800661e:	6860      	ldr	r0, [r4, #4]
 8006620:	68e6      	ldr	r6, [r4, #12]
 8006622:	6811      	ldr	r1, [r2, #0]
 8006624:	6925      	ldr	r5, [r4, #16]
 8006626:	4303      	orrs	r3, r0
 8006628:	4333      	orrs	r3, r6
 800662a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800662c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800662e:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8006630:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8006634:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8006636:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8006638:	4333      	orrs	r3, r6
 800663a:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
      MODIFY_REG(hopamp->Instance->CSR,
 800663e:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8006640:	432b      	orrs	r3, r5
 8006642:	4925      	ldr	r1, [pc, #148]	; (80066d8 <HAL_OPAMP_Init+0x108>)
 8006644:	6815      	ldr	r5, [r2, #0]
 8006646:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800664a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800664e:	7d20      	ldrb	r0, [r4, #20]
 8006650:	4029      	ands	r1, r5
 8006652:	2801      	cmp	r0, #1
 8006654:	ea43 0301 	orr.w	r3, r3, r1
 8006658:	bf0c      	ite	eq
 800665a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800665e:	2100      	movne	r1, #0
 8006660:	430b      	orrs	r3, r1
 8006662:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006664:	6993      	ldr	r3, [r2, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	db09      	blt.n	800667e <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800666a:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 800666e:	6a20      	ldr	r0, [r4, #32]
 8006670:	6991      	ldr	r1, [r2, #24]
 8006672:	432b      	orrs	r3, r5
 8006674:	4303      	orrs	r3, r0
 8006676:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800667a:	430b      	orrs	r3, r1
 800667c:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800667e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8006682:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8006686:	bb03      	cbnz	r3, 80066ca <HAL_OPAMP_Init+0xfa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006688:	2301      	movs	r3, #1
 800668a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 800668e:	b002      	add	sp, #8
 8006690:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006692:	2001      	movs	r0, #1
}
 8006694:	b002      	add	sp, #8
 8006696:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8006698:	6866      	ldr	r6, [r4, #4]
 800669a:	6811      	ldr	r1, [r2, #0]
 800669c:	6920      	ldr	r0, [r4, #16]
 800669e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80066a0:	4333      	orrs	r3, r6
 80066a2:	4303      	orrs	r3, r0
 80066a4:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 80066a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 80066aa:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 80066ac:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 80066ae:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80066b0:	4303      	orrs	r3, r0
 80066b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80066b4:	6816      	ldr	r6, [r2, #0]
 80066b6:	4908      	ldr	r1, [pc, #32]	; (80066d8 <HAL_OPAMP_Init+0x108>)
 80066b8:	432b      	orrs	r3, r5
 80066ba:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80066bc:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 80066c0:	4031      	ands	r1, r6
 80066c2:	7d20      	ldrb	r0, [r4, #20]
 80066c4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80066c8:	e7c3      	b.n	8006652 <HAL_OPAMP_Init+0x82>
    return status;
 80066ca:	2000      	movs	r0, #0
}
 80066cc:	b002      	add	sp, #8
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80066d0:	2001      	movs	r0, #1
}
 80066d2:	4770      	bx	lr
 80066d4:	40021000 	.word	0x40021000
 80066d8:	e0003e11 	.word	0xe0003e11

080066dc <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066dc:	4a3b      	ldr	r2, [pc, #236]	; (80067cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 80066de:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066e0:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80066e2:	b968      	cbnz	r0, 8006700 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ec:	d014      	beq.n	8006718 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066ee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80066f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 80066fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066fe:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006700:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006704:	d02f      	beq.n	8006766 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006706:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800670a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800670e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006710:	2000      	movs	r0, #0
}
 8006712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006716:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006718:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800671c:	4b2c      	ldr	r3, [pc, #176]	; (80067d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800671e:	482d      	ldr	r0, [pc, #180]	; (80067d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006720:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006724:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006728:	6811      	ldr	r1, [r2, #0]
 800672a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800672e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006732:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006734:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006736:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006738:	2332      	movs	r3, #50	; 0x32
 800673a:	fb03 f304 	mul.w	r3, r3, r4
 800673e:	fba0 0303 	umull	r0, r3, r0, r3
 8006742:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006744:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006746:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800674a:	d506      	bpl.n	800675a <HAL_PWREx_ControlVoltageScaling+0x7e>
 800674c:	e000      	b.n	8006750 <HAL_PWREx_ControlVoltageScaling+0x74>
 800674e:	b123      	cbz	r3, 800675a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006750:	6951      	ldr	r1, [r2, #20]
 8006752:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8006754:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006758:	d4f9      	bmi.n	800674e <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800675a:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	055c      	lsls	r4, r3, #21
 8006760:	d5d6      	bpl.n	8006710 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8006762:	2003      	movs	r0, #3
 8006764:	e7c9      	b.n	80066fa <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006766:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800676a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800676e:	d009      	beq.n	8006784 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006770:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8006774:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 800677c:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800677e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8006782:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006784:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800678a:	4812      	ldr	r0, [pc, #72]	; (80067d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800678c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006790:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006794:	6811      	ldr	r1, [r2, #0]
 8006796:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800679a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800679e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067a0:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067a2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067a4:	2332      	movs	r3, #50	; 0x32
 80067a6:	fb03 f304 	mul.w	r3, r3, r4
 80067aa:	fba0 0303 	umull	r0, r3, r0, r3
 80067ae:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067b0:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067b2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067b6:	d5d0      	bpl.n	800675a <HAL_PWREx_ControlVoltageScaling+0x7e>
 80067b8:	e001      	b.n	80067be <HAL_PWREx_ControlVoltageScaling+0xe2>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0cd      	beq.n	800675a <HAL_PWREx_ControlVoltageScaling+0x7e>
 80067be:	6951      	ldr	r1, [r2, #20]
 80067c0:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80067c2:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067c6:	d5c8      	bpl.n	800675a <HAL_PWREx_ControlVoltageScaling+0x7e>
 80067c8:	e7f7      	b.n	80067ba <HAL_PWREx_ControlVoltageScaling+0xde>
 80067ca:	bf00      	nop
 80067cc:	40007000 	.word	0x40007000
 80067d0:	20000608 	.word	0x20000608
 80067d4:	431bde83 	.word	0x431bde83

080067d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80067d8:	4a02      	ldr	r2, [pc, #8]	; (80067e4 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80067da:	6893      	ldr	r3, [r2, #8]
 80067dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067e0:	6093      	str	r3, [r2, #8]
}
 80067e2:	4770      	bx	lr
 80067e4:	40007000 	.word	0x40007000

080067e8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f000 81c3 	beq.w	8006b74 <HAL_RCC_OscConfig+0x38c>
{
 80067ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	07d9      	lsls	r1, r3, #31
{
 80067f6:	b082      	sub	sp, #8
 80067f8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067fa:	d52d      	bpl.n	8006858 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067fc:	49b5      	ldr	r1, [pc, #724]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 80067fe:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006800:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006802:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006806:	2a0c      	cmp	r2, #12
 8006808:	f000 810a 	beq.w	8006a20 <HAL_RCC_OscConfig+0x238>
 800680c:	2a08      	cmp	r2, #8
 800680e:	f000 810c 	beq.w	8006a2a <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006812:	6863      	ldr	r3, [r4, #4]
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006818:	f000 8133 	beq.w	8006a82 <HAL_RCC_OscConfig+0x29a>
 800681c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006820:	f000 819b 	beq.w	8006b5a <HAL_RCC_OscConfig+0x372>
 8006824:	4dab      	ldr	r5, [pc, #684]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 8006826:	682a      	ldr	r2, [r5, #0]
 8006828:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800682c:	602a      	str	r2, [r5, #0]
 800682e:	682a      	ldr	r2, [r5, #0]
 8006830:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006834:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006836:	2b00      	cmp	r3, #0
 8006838:	f040 8128 	bne.w	8006a8c <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fe f8d2 	bl	80049e4 <HAL_GetTick>
 8006840:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006842:	e005      	b.n	8006850 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006844:	f7fe f8ce 	bl	80049e4 <HAL_GetTick>
 8006848:	1b80      	subs	r0, r0, r6
 800684a:	2864      	cmp	r0, #100	; 0x64
 800684c:	f200 813b 	bhi.w	8006ac6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	039f      	lsls	r7, r3, #14
 8006854:	d4f6      	bmi.n	8006844 <HAL_RCC_OscConfig+0x5c>
 8006856:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006858:	079e      	lsls	r6, r3, #30
 800685a:	d528      	bpl.n	80068ae <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800685c:	4a9d      	ldr	r2, [pc, #628]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 800685e:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006860:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006862:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006866:	2b0c      	cmp	r3, #12
 8006868:	f000 80ec 	beq.w	8006a44 <HAL_RCC_OscConfig+0x25c>
 800686c:	2b04      	cmp	r3, #4
 800686e:	f000 80ee 	beq.w	8006a4e <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006872:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006874:	4d97      	ldr	r5, [pc, #604]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8116 	beq.w	8006aa8 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006882:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fe f8ae 	bl	80049e4 <HAL_GetTick>
 8006888:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800688a:	e005      	b.n	8006898 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800688c:	f7fe f8aa 	bl	80049e4 <HAL_GetTick>
 8006890:	1b80      	subs	r0, r0, r6
 8006892:	2802      	cmp	r0, #2
 8006894:	f200 8117 	bhi.w	8006ac6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	0558      	lsls	r0, r3, #21
 800689c:	d5f6      	bpl.n	800688c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800689e:	686b      	ldr	r3, [r5, #4]
 80068a0:	6922      	ldr	r2, [r4, #16]
 80068a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80068a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80068aa:	606b      	str	r3, [r5, #4]
 80068ac:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ae:	071a      	lsls	r2, r3, #28
 80068b0:	d519      	bpl.n	80068e6 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068b2:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068b4:	4d87      	ldr	r5, [pc, #540]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 809e 	beq.w	80069f8 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80068bc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80068c0:	f043 0301 	orr.w	r3, r3, #1
 80068c4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c8:	f7fe f88c 	bl	80049e4 <HAL_GetTick>
 80068cc:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068ce:	e005      	b.n	80068dc <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068d0:	f7fe f888 	bl	80049e4 <HAL_GetTick>
 80068d4:	1b80      	subs	r0, r0, r6
 80068d6:	2802      	cmp	r0, #2
 80068d8:	f200 80f5 	bhi.w	8006ac6 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068dc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80068e0:	079f      	lsls	r7, r3, #30
 80068e2:	d5f5      	bpl.n	80068d0 <HAL_RCC_OscConfig+0xe8>
 80068e4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068e6:	0759      	lsls	r1, r3, #29
 80068e8:	d541      	bpl.n	800696e <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068ea:	4b7a      	ldr	r3, [pc, #488]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 80068ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068ee:	00d2      	lsls	r2, r2, #3
 80068f0:	f100 80ed 	bmi.w	8006ace <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80068fa:	659a      	str	r2, [r3, #88]	; 0x58
 80068fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006906:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006908:	4e73      	ldr	r6, [pc, #460]	; (8006ad8 <HAL_RCC_OscConfig+0x2f0>)
 800690a:	6833      	ldr	r3, [r6, #0]
 800690c:	05df      	lsls	r7, r3, #23
 800690e:	f140 8113 	bpl.w	8006b38 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006912:	68a3      	ldr	r3, [r4, #8]
 8006914:	2b01      	cmp	r3, #1
 8006916:	f000 80e3 	beq.w	8006ae0 <HAL_RCC_OscConfig+0x2f8>
 800691a:	2b05      	cmp	r3, #5
 800691c:	f000 8169 	beq.w	8006bf2 <HAL_RCC_OscConfig+0x40a>
 8006920:	4e6c      	ldr	r6, [pc, #432]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 8006922:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006926:	f022 0201 	bic.w	r2, r2, #1
 800692a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800692e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006932:	f022 0204 	bic.w	r2, r2, #4
 8006936:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800693a:	2b00      	cmp	r3, #0
 800693c:	f040 80d7 	bne.w	8006aee <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006940:	f7fe f850 	bl	80049e4 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006944:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006948:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800694a:	e005      	b.n	8006958 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fe f84a 	bl	80049e4 <HAL_GetTick>
 8006950:	1bc0      	subs	r0, r0, r7
 8006952:	4540      	cmp	r0, r8
 8006954:	f200 80b7 	bhi.w	8006ac6 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006958:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800695c:	079a      	lsls	r2, r3, #30
 800695e:	d4f5      	bmi.n	800694c <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006960:	b125      	cbz	r5, 800696c <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006962:	4a5c      	ldr	r2, [pc, #368]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 8006964:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696a:	6593      	str	r3, [r2, #88]	; 0x58
 800696c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800696e:	069b      	lsls	r3, r3, #26
 8006970:	d518      	bpl.n	80069a4 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006972:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006974:	4d57      	ldr	r5, [pc, #348]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80ca 	beq.w	8006b10 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 800697c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006988:	f7fe f82c 	bl	80049e4 <HAL_GetTick>
 800698c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800698e:	e005      	b.n	800699c <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006990:	f7fe f828 	bl	80049e4 <HAL_GetTick>
 8006994:	1b80      	subs	r0, r0, r6
 8006996:	2802      	cmp	r0, #2
 8006998:	f200 8095 	bhi.w	8006ac6 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800699c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80069a0:	079f      	lsls	r7, r3, #30
 80069a2:	d5f5      	bpl.n	8006990 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069a4:	69e0      	ldr	r0, [r4, #28]
 80069a6:	b318      	cbz	r0, 80069f0 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069a8:	4d4a      	ldr	r5, [pc, #296]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 80069aa:	68ab      	ldr	r3, [r5, #8]
 80069ac:	f003 030c 	and.w	r3, r3, #12
 80069b0:	2b0c      	cmp	r3, #12
 80069b2:	f000 812c 	beq.w	8006c0e <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b6:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069b8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80069ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069be:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069c0:	f000 80da 	beq.w	8006b78 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80069c4:	68eb      	ldr	r3, [r5, #12]
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80069cc:	68eb      	ldr	r3, [r5, #12]
 80069ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80069d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d6:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d8:	f7fe f804 	bl	80049e4 <HAL_GetTick>
 80069dc:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069de:	e004      	b.n	80069ea <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e0:	f7fe f800 	bl	80049e4 <HAL_GetTick>
 80069e4:	1b00      	subs	r0, r0, r4
 80069e6:	2802      	cmp	r0, #2
 80069e8:	d86d      	bhi.n	8006ac6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	019b      	lsls	r3, r3, #6
 80069ee:	d4f7      	bmi.n	80069e0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 80069f0:	2000      	movs	r0, #0
}
 80069f2:	b002      	add	sp, #8
 80069f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80069f8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80069fc:	f023 0301 	bic.w	r3, r3, #1
 8006a00:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006a04:	f7fd ffee 	bl	80049e4 <HAL_GetTick>
 8006a08:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a0a:	e004      	b.n	8006a16 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a0c:	f7fd ffea 	bl	80049e4 <HAL_GetTick>
 8006a10:	1b80      	subs	r0, r0, r6
 8006a12:	2802      	cmp	r0, #2
 8006a14:	d857      	bhi.n	8006ac6 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a16:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006a1a:	0798      	lsls	r0, r3, #30
 8006a1c:	d4f6      	bmi.n	8006a0c <HAL_RCC_OscConfig+0x224>
 8006a1e:	e761      	b.n	80068e4 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a20:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a24:	2903      	cmp	r1, #3
 8006a26:	f47f aef4 	bne.w	8006812 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a2a:	4a2a      	ldr	r2, [pc, #168]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	0392      	lsls	r2, r2, #14
 8006a30:	f57f af12 	bpl.w	8006858 <HAL_RCC_OscConfig+0x70>
 8006a34:	6862      	ldr	r2, [r4, #4]
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	f47f af0e 	bne.w	8006858 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8006a3c:	2001      	movs	r0, #1
}
 8006a3e:	b002      	add	sp, #8
 8006a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a44:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a48:	2a02      	cmp	r2, #2
 8006a4a:	f47f af12 	bne.w	8006872 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a4e:	4b21      	ldr	r3, [pc, #132]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	055d      	lsls	r5, r3, #21
 8006a54:	d502      	bpl.n	8006a5c <HAL_RCC_OscConfig+0x274>
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0ef      	beq.n	8006a3c <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 8006a5e:	6920      	ldr	r0, [r4, #16]
 8006a60:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a62:	491e      	ldr	r1, [pc, #120]	; (8006adc <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a64:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a68:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006a6c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a6e:	6808      	ldr	r0, [r1, #0]
 8006a70:	f7fd ff76 	bl	8004960 <HAL_InitTick>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d1e1      	bne.n	8006a3c <HAL_RCC_OscConfig+0x254>
 8006a78:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a7a:	071a      	lsls	r2, r3, #28
 8006a7c:	f57f af33 	bpl.w	80068e6 <HAL_RCC_OscConfig+0xfe>
 8006a80:	e717      	b.n	80068b2 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a82:	4a14      	ldr	r2, [pc, #80]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
 8006a84:	6813      	ldr	r3, [r2, #0]
 8006a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a8a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006a8c:	f7fd ffaa 	bl	80049e4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a90:	4e10      	ldr	r6, [pc, #64]	; (8006ad4 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8006a92:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a94:	e004      	b.n	8006aa0 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a96:	f7fd ffa5 	bl	80049e4 <HAL_GetTick>
 8006a9a:	1b40      	subs	r0, r0, r5
 8006a9c:	2864      	cmp	r0, #100	; 0x64
 8006a9e:	d812      	bhi.n	8006ac6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	039b      	lsls	r3, r3, #14
 8006aa4:	d5f7      	bpl.n	8006a96 <HAL_RCC_OscConfig+0x2ae>
 8006aa6:	e6d6      	b.n	8006856 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006ab0:	f7fd ff98 	bl	80049e4 <HAL_GetTick>
 8006ab4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ab6:	682b      	ldr	r3, [r5, #0]
 8006ab8:	0559      	lsls	r1, r3, #21
 8006aba:	d5dd      	bpl.n	8006a78 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006abc:	f7fd ff92 	bl	80049e4 <HAL_GetTick>
 8006ac0:	1b80      	subs	r0, r0, r6
 8006ac2:	2802      	cmp	r0, #2
 8006ac4:	d9f7      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8006ac6:	2003      	movs	r0, #3
}
 8006ac8:	b002      	add	sp, #8
 8006aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006ace:	2500      	movs	r5, #0
 8006ad0:	e71a      	b.n	8006908 <HAL_RCC_OscConfig+0x120>
 8006ad2:	bf00      	nop
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	40007000 	.word	0x40007000
 8006adc:	20000610 	.word	0x20000610
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ae0:	4a65      	ldr	r2, [pc, #404]	; (8006c78 <HAL_RCC_OscConfig+0x490>)
 8006ae2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006aee:	f7fd ff79 	bl	80049e4 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006af2:	4f61      	ldr	r7, [pc, #388]	; (8006c78 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006af4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af6:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006afa:	e004      	b.n	8006b06 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afc:	f7fd ff72 	bl	80049e4 <HAL_GetTick>
 8006b00:	1b80      	subs	r0, r0, r6
 8006b02:	4540      	cmp	r0, r8
 8006b04:	d8df      	bhi.n	8006ac6 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b0a:	0799      	lsls	r1, r3, #30
 8006b0c:	d5f6      	bpl.n	8006afc <HAL_RCC_OscConfig+0x314>
 8006b0e:	e727      	b.n	8006960 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8006b10:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006b14:	f023 0301 	bic.w	r3, r3, #1
 8006b18:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006b1c:	f7fd ff62 	bl	80049e4 <HAL_GetTick>
 8006b20:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b22:	e004      	b.n	8006b2e <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b24:	f7fd ff5e 	bl	80049e4 <HAL_GetTick>
 8006b28:	1b80      	subs	r0, r0, r6
 8006b2a:	2802      	cmp	r0, #2
 8006b2c:	d8cb      	bhi.n	8006ac6 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b2e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006b32:	0798      	lsls	r0, r3, #30
 8006b34:	d4f6      	bmi.n	8006b24 <HAL_RCC_OscConfig+0x33c>
 8006b36:	e735      	b.n	80069a4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b38:	6833      	ldr	r3, [r6, #0]
 8006b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b3e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006b40:	f7fd ff50 	bl	80049e4 <HAL_GetTick>
 8006b44:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b46:	6833      	ldr	r3, [r6, #0]
 8006b48:	05d8      	lsls	r0, r3, #23
 8006b4a:	f53f aee2 	bmi.w	8006912 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4e:	f7fd ff49 	bl	80049e4 <HAL_GetTick>
 8006b52:	1bc0      	subs	r0, r0, r7
 8006b54:	2802      	cmp	r0, #2
 8006b56:	d9f6      	bls.n	8006b46 <HAL_RCC_OscConfig+0x35e>
 8006b58:	e7b5      	b.n	8006ac6 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b5e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b70:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b72:	e78b      	b.n	8006a8c <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8006b74:	2001      	movs	r0, #1
}
 8006b76:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8006b78:	f7fd ff34 	bl	80049e4 <HAL_GetTick>
 8006b7c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b7e:	e004      	b.n	8006b8a <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b80:	f7fd ff30 	bl	80049e4 <HAL_GetTick>
 8006b84:	1b80      	subs	r0, r0, r6
 8006b86:	2802      	cmp	r0, #2
 8006b88:	d89d      	bhi.n	8006ac6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b8a:	682b      	ldr	r3, [r5, #0]
 8006b8c:	0199      	lsls	r1, r3, #6
 8006b8e:	d4f7      	bmi.n	8006b80 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b90:	68e9      	ldr	r1, [r5, #12]
 8006b92:	4b3a      	ldr	r3, [pc, #232]	; (8006c7c <HAL_RCC_OscConfig+0x494>)
 8006b94:	6a22      	ldr	r2, [r4, #32]
 8006b96:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b9c:	400b      	ands	r3, r1
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8006ba4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006ba8:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8006bac:	3801      	subs	r0, #1
 8006bae:	0849      	lsrs	r1, r1, #1
 8006bb0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006bb4:	3901      	subs	r1, #1
 8006bb6:	0852      	lsrs	r2, r2, #1
 8006bb8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006bbc:	3a01      	subs	r2, #1
 8006bbe:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006bc2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006bc4:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc6:	4e2c      	ldr	r6, [pc, #176]	; (8006c78 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8006bc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bcc:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bce:	68eb      	ldr	r3, [r5, #12]
 8006bd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bd4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006bd6:	f7fd ff05 	bl	80049e4 <HAL_GetTick>
 8006bda:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bdc:	e005      	b.n	8006bea <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bde:	f7fd ff01 	bl	80049e4 <HAL_GetTick>
 8006be2:	1b00      	subs	r0, r0, r4
 8006be4:	2802      	cmp	r0, #2
 8006be6:	f63f af6e 	bhi.w	8006ac6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bea:	6833      	ldr	r3, [r6, #0]
 8006bec:	019a      	lsls	r2, r3, #6
 8006bee:	d5f6      	bpl.n	8006bde <HAL_RCC_OscConfig+0x3f6>
 8006bf0:	e6fe      	b.n	80069f0 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bf2:	4b21      	ldr	r3, [pc, #132]	; (8006c78 <HAL_RCC_OscConfig+0x490>)
 8006bf4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006bf8:	f042 0204 	orr.w	r2, r2, #4
 8006bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006c00:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c04:	f042 0201 	orr.w	r2, r2, #1
 8006c08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c0c:	e76f      	b.n	8006aee <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c0e:	2801      	cmp	r0, #1
 8006c10:	f43f aeef 	beq.w	80069f2 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006c14:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c16:	6a22      	ldr	r2, [r4, #32]
 8006c18:	f003 0103 	and.w	r1, r3, #3
 8006c1c:	4291      	cmp	r1, r2
 8006c1e:	f47f af0d 	bne.w	8006a3c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c28:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c2a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006c2e:	f47f af05 	bne.w	8006a3c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006c34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c38:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006c3c:	f47f aefe 	bne.w	8006a3c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c46:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006c4a:	f47f aef7 	bne.w	8006a3c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c50:	0852      	lsrs	r2, r2, #1
 8006c52:	3a01      	subs	r2, #1
 8006c54:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c58:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006c5c:	f47f aeee 	bne.w	8006a3c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c60:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006c62:	0852      	lsrs	r2, r2, #1
 8006c64:	3a01      	subs	r2, #1
 8006c66:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c6a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8006c6e:	bf14      	ite	ne
 8006c70:	2001      	movne	r0, #1
 8006c72:	2000      	moveq	r0, #0
 8006c74:	e6bd      	b.n	80069f2 <HAL_RCC_OscConfig+0x20a>
 8006c76:	bf00      	nop
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	019f800c 	.word	0x019f800c

08006c80 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006c80:	4b18      	ldr	r3, [pc, #96]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x64>)
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	f002 020c 	and.w	r2, r2, #12
 8006c88:	2a04      	cmp	r2, #4
 8006c8a:	d027      	beq.n	8006cdc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	f002 020c 	and.w	r2, r2, #12
 8006c92:	2a08      	cmp	r2, #8
 8006c94:	d024      	beq.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	f002 020c 	and.w	r2, r2, #12
 8006c9c:	2a0c      	cmp	r2, #12
 8006c9e:	d001      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8006ca0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8006ca2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ca4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ca6:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ca8:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006caa:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cae:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8006cb2:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cb4:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cb8:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cbc:	bf0c      	ite	eq
 8006cbe:	480a      	ldreq	r0, [pc, #40]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cc0:	480a      	ldrne	r0, [pc, #40]	; (8006cec <HAL_RCC_GetSysClockFreq+0x6c>)
 8006cc2:	fbb0 f0f2 	udiv	r0, r0, r2
 8006cc6:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x64>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006cd6:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006cda:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006cdc:	4803      	ldr	r0, [pc, #12]	; (8006cec <HAL_RCC_GetSysClockFreq+0x6c>)
 8006cde:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x68>)
 8006ce2:	4770      	bx	lr
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	007a1200 	.word	0x007a1200
 8006cec:	00f42400 	.word	0x00f42400

08006cf0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f000 80ef 	beq.w	8006ed4 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cf6:	4a7f      	ldr	r2, [pc, #508]	; (8006ef4 <HAL_RCC_ClockConfig+0x204>)
{
 8006cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cfc:	6813      	ldr	r3, [r2, #0]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	428b      	cmp	r3, r1
 8006d04:	460d      	mov	r5, r1
 8006d06:	4604      	mov	r4, r0
 8006d08:	d20c      	bcs.n	8006d24 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d0a:	6813      	ldr	r3, [r2, #0]
 8006d0c:	f023 030f 	bic.w	r3, r3, #15
 8006d10:	430b      	orrs	r3, r1
 8006d12:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d14:	6813      	ldr	r3, [r2, #0]
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	428b      	cmp	r3, r1
 8006d1c:	d002      	beq.n	8006d24 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006d1e:	2001      	movs	r0, #1
}
 8006d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	07de      	lsls	r6, r3, #31
 8006d28:	d563      	bpl.n	8006df2 <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d2a:	6862      	ldr	r2, [r4, #4]
 8006d2c:	2a03      	cmp	r2, #3
 8006d2e:	f000 809a 	beq.w	8006e66 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d32:	4b71      	ldr	r3, [pc, #452]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d34:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d36:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d38:	f000 8091 	beq.w	8006e5e <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d3c:	055b      	lsls	r3, r3, #21
 8006d3e:	d5ee      	bpl.n	8006d1e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006d40:	f7ff ff9e 	bl	8006c80 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006d44:	4b6d      	ldr	r3, [pc, #436]	; (8006efc <HAL_RCC_ClockConfig+0x20c>)
 8006d46:	4298      	cmp	r0, r3
 8006d48:	f200 80c6 	bhi.w	8006ed8 <HAL_RCC_ClockConfig+0x1e8>
 8006d4c:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d4e:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d52:	4e69      	ldr	r6, [pc, #420]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
 8006d54:	68b3      	ldr	r3, [r6, #8]
 8006d56:	f023 0303 	bic.w	r3, r3, #3
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8006d5e:	f7fd fe41 	bl	80049e4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d62:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006d66:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d68:	e004      	b.n	8006d74 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d6a:	f7fd fe3b 	bl	80049e4 <HAL_GetTick>
 8006d6e:	1bc0      	subs	r0, r0, r7
 8006d70:	4540      	cmp	r0, r8
 8006d72:	d871      	bhi.n	8006e58 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d74:	68b3      	ldr	r3, [r6, #8]
 8006d76:	6862      	ldr	r2, [r4, #4]
 8006d78:	f003 030c 	and.w	r3, r3, #12
 8006d7c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006d80:	d1f3      	bne.n	8006d6a <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	079f      	lsls	r7, r3, #30
 8006d86:	d436      	bmi.n	8006df6 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8006d88:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8006d8c:	d103      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006d8e:	68b3      	ldr	r3, [r6, #8]
 8006d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d94:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d96:	4e57      	ldr	r6, [pc, #348]	; (8006ef4 <HAL_RCC_ClockConfig+0x204>)
 8006d98:	6833      	ldr	r3, [r6, #0]
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	42ab      	cmp	r3, r5
 8006da0:	d846      	bhi.n	8006e30 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	075a      	lsls	r2, r3, #29
 8006da6:	d506      	bpl.n	8006db6 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006da8:	4953      	ldr	r1, [pc, #332]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
 8006daa:	68e0      	ldr	r0, [r4, #12]
 8006dac:	688a      	ldr	r2, [r1, #8]
 8006dae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006db2:	4302      	orrs	r2, r0
 8006db4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db6:	071b      	lsls	r3, r3, #28
 8006db8:	d507      	bpl.n	8006dca <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dba:	4a4f      	ldr	r2, [pc, #316]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
 8006dbc:	6921      	ldr	r1, [r4, #16]
 8006dbe:	6893      	ldr	r3, [r2, #8]
 8006dc0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006dc4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006dc8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006dca:	f7ff ff59 	bl	8006c80 <HAL_RCC_GetSysClockFreq>
 8006dce:	4a4a      	ldr	r2, [pc, #296]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
 8006dd0:	4c4b      	ldr	r4, [pc, #300]	; (8006f00 <HAL_RCC_ClockConfig+0x210>)
 8006dd2:	6892      	ldr	r2, [r2, #8]
 8006dd4:	494b      	ldr	r1, [pc, #300]	; (8006f04 <HAL_RCC_ClockConfig+0x214>)
 8006dd6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006dda:	4603      	mov	r3, r0
 8006ddc:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006dde:	484a      	ldr	r0, [pc, #296]	; (8006f08 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006de0:	f002 021f 	and.w	r2, r2, #31
 8006de4:	40d3      	lsrs	r3, r2
 8006de6:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006de8:	6800      	ldr	r0, [r0, #0]
}
 8006dea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006dee:	f7fd bdb7 	b.w	8004960 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df2:	0798      	lsls	r0, r3, #30
 8006df4:	d5cf      	bpl.n	8006d96 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df6:	0758      	lsls	r0, r3, #29
 8006df8:	d504      	bpl.n	8006e04 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dfa:	493f      	ldr	r1, [pc, #252]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
 8006dfc:	688a      	ldr	r2, [r1, #8]
 8006dfe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006e02:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e04:	0719      	lsls	r1, r3, #28
 8006e06:	d506      	bpl.n	8006e16 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e08:	4a3b      	ldr	r2, [pc, #236]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
 8006e0a:	6893      	ldr	r3, [r2, #8]
 8006e0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e10:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e14:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e16:	4a38      	ldr	r2, [pc, #224]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
 8006e18:	68a1      	ldr	r1, [r4, #8]
 8006e1a:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e1c:	4e35      	ldr	r6, [pc, #212]	; (8006ef4 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e22:	430b      	orrs	r3, r1
 8006e24:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e26:	6833      	ldr	r3, [r6, #0]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	d9b8      	bls.n	8006da2 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e30:	6833      	ldr	r3, [r6, #0]
 8006e32:	f023 030f 	bic.w	r3, r3, #15
 8006e36:	432b      	orrs	r3, r5
 8006e38:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006e3a:	f7fd fdd3 	bl	80049e4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e3e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006e42:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e44:	6833      	ldr	r3, [r6, #0]
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	42ab      	cmp	r3, r5
 8006e4c:	d0a9      	beq.n	8006da2 <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e4e:	f7fd fdc9 	bl	80049e4 <HAL_GetTick>
 8006e52:	1bc0      	subs	r0, r0, r7
 8006e54:	4540      	cmp	r0, r8
 8006e56:	d9f5      	bls.n	8006e44 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8006e58:	2003      	movs	r0, #3
}
 8006e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e5e:	039a      	lsls	r2, r3, #14
 8006e60:	f53f af6e 	bmi.w	8006d40 <HAL_RCC_ClockConfig+0x50>
 8006e64:	e75b      	b.n	8006d1e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e66:	4824      	ldr	r0, [pc, #144]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
 8006e68:	6801      	ldr	r1, [r0, #0]
 8006e6a:	0189      	lsls	r1, r1, #6
 8006e6c:	f57f af57 	bpl.w	8006d1e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e70:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e72:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e74:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e76:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e7a:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 8006e7e:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e80:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e84:	bf0c      	ite	eq
 8006e86:	4921      	ldreq	r1, [pc, #132]	; (8006f0c <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e88:	4921      	ldrne	r1, [pc, #132]	; (8006f10 <HAL_RCC_ClockConfig+0x220>)
 8006e8a:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e8e:	4e1a      	ldr	r6, [pc, #104]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 8006e90:	4f1a      	ldr	r7, [pc, #104]	; (8006efc <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e92:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8006e96:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e9a:	68f0      	ldr	r0, [r6, #12]
 8006e9c:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8006ea4:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8006ea8:	42b9      	cmp	r1, r7
 8006eaa:	d920      	bls.n	8006eee <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006eac:	68b1      	ldr	r1, [r6, #8]
 8006eae:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x1d0>
 8006eb4:	f013 0902 	ands.w	r9, r3, #2
 8006eb8:	f43f af4b 	beq.w	8006d52 <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ebc:	68a3      	ldr	r3, [r4, #8]
 8006ebe:	b9b3      	cbnz	r3, 8006eee <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ec0:	490d      	ldr	r1, [pc, #52]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
 8006ec2:	688b      	ldr	r3, [r1, #8]
 8006ec4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ecc:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ece:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006ed2:	e73e      	b.n	8006d52 <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8006ed4:	2001      	movs	r0, #1
}
 8006ed6:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ed8:	4a07      	ldr	r2, [pc, #28]	; (8006ef8 <HAL_RCC_ClockConfig+0x208>)
 8006eda:	6893      	ldr	r3, [r2, #8]
 8006edc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ee6:	6862      	ldr	r2, [r4, #4]
 8006ee8:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006eec:	e731      	b.n	8006d52 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006eee:	f04f 0900 	mov.w	r9, #0
 8006ef2:	e72e      	b.n	8006d52 <HAL_RCC_ClockConfig+0x62>
 8006ef4:	40022000 	.word	0x40022000
 8006ef8:	40021000 	.word	0x40021000
 8006efc:	04c4b400 	.word	0x04c4b400
 8006f00:	0800a7a8 	.word	0x0800a7a8
 8006f04:	20000608 	.word	0x20000608
 8006f08:	20000610 	.word	0x20000610
 8006f0c:	007a1200 	.word	0x007a1200
 8006f10:	00f42400 	.word	0x00f42400

08006f14 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8006f14:	4b01      	ldr	r3, [pc, #4]	; (8006f1c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8006f16:	6818      	ldr	r0, [r3, #0]
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000608 	.word	0x20000608

08006f20 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006f22:	4a06      	ldr	r2, [pc, #24]	; (8006f3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006f24:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006f26:	4906      	ldr	r1, [pc, #24]	; (8006f40 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f28:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006f2c:	6808      	ldr	r0, [r1, #0]
 8006f2e:	5cd3      	ldrb	r3, [r2, r3]
 8006f30:	f003 031f 	and.w	r3, r3, #31
}
 8006f34:	40d8      	lsrs	r0, r3
 8006f36:	4770      	bx	lr
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	0800a7b8 	.word	0x0800a7b8
 8006f40:	20000608 	.word	0x20000608

08006f44 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f44:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006f46:	4a06      	ldr	r2, [pc, #24]	; (8006f60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006f48:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006f4a:	4906      	ldr	r1, [pc, #24]	; (8006f64 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f4c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006f50:	6808      	ldr	r0, [r1, #0]
 8006f52:	5cd3      	ldrb	r3, [r2, r3]
 8006f54:	f003 031f 	and.w	r3, r3, #31
}
 8006f58:	40d8      	lsrs	r0, r3
 8006f5a:	4770      	bx	lr
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	0800a7b8 	.word	0x0800a7b8
 8006f64:	20000608 	.word	0x20000608

08006f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f6c:	6803      	ldr	r3, [r0, #0]
{
 8006f6e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f70:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8006f74:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f76:	d056      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f78:	4b9f      	ldr	r3, [pc, #636]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f7c:	00d5      	lsls	r5, r2, #3
 8006f7e:	f140 810c 	bpl.w	800719a <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8006f82:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f84:	4d9d      	ldr	r5, [pc, #628]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f8c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f8e:	f7fd fd29 	bl	80049e4 <HAL_GetTick>
 8006f92:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f94:	e005      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f96:	f7fd fd25 	bl	80049e4 <HAL_GetTick>
 8006f9a:	1b83      	subs	r3, r0, r6
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	f200 8107 	bhi.w	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fa2:	682b      	ldr	r3, [r5, #0]
 8006fa4:	05d8      	lsls	r0, r3, #23
 8006fa6:	d5f6      	bpl.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fa8:	4d93      	ldr	r5, [pc, #588]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006faa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fae:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006fb2:	d027      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006fb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d025      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fba:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fbe:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fca:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fce:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fd6:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fd8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006fdc:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fe0:	f140 8108 	bpl.w	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fd fcfe 	bl	80049e4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fe8:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006fec:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fee:	e005      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff0:	f7fd fcf8 	bl	80049e4 <HAL_GetTick>
 8006ff4:	1b80      	subs	r0, r0, r6
 8006ff6:	4540      	cmp	r0, r8
 8006ff8:	f200 80da 	bhi.w	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ffc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007000:	079b      	lsls	r3, r3, #30
 8007002:	d5f5      	bpl.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007004:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007006:	497c      	ldr	r1, [pc, #496]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007008:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800700c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007010:	4313      	orrs	r3, r2
 8007012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007016:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007018:	b127      	cbz	r7, 8007024 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800701a:	4a77      	ldr	r2, [pc, #476]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800701c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800701e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007022:	6593      	str	r3, [r2, #88]	; 0x58
 8007024:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007026:	07de      	lsls	r6, r3, #31
 8007028:	d508      	bpl.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800702a:	4973      	ldr	r1, [pc, #460]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800702c:	6865      	ldr	r5, [r4, #4]
 800702e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007032:	f022 0203 	bic.w	r2, r2, #3
 8007036:	432a      	orrs	r2, r5
 8007038:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800703c:	079d      	lsls	r5, r3, #30
 800703e:	d508      	bpl.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007040:	496d      	ldr	r1, [pc, #436]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007042:	68a5      	ldr	r5, [r4, #8]
 8007044:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007048:	f022 020c 	bic.w	r2, r2, #12
 800704c:	432a      	orrs	r2, r5
 800704e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007052:	0759      	lsls	r1, r3, #29
 8007054:	d508      	bpl.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007056:	4968      	ldr	r1, [pc, #416]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007058:	68e5      	ldr	r5, [r4, #12]
 800705a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800705e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007062:	432a      	orrs	r2, r5
 8007064:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007068:	071a      	lsls	r2, r3, #28
 800706a:	d508      	bpl.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800706c:	4962      	ldr	r1, [pc, #392]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800706e:	6925      	ldr	r5, [r4, #16]
 8007070:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007074:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007078:	432a      	orrs	r2, r5
 800707a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800707e:	069f      	lsls	r7, r3, #26
 8007080:	d508      	bpl.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007082:	495d      	ldr	r1, [pc, #372]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007084:	6965      	ldr	r5, [r4, #20]
 8007086:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800708a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800708e:	432a      	orrs	r2, r5
 8007090:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007094:	065e      	lsls	r6, r3, #25
 8007096:	d508      	bpl.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007098:	4957      	ldr	r1, [pc, #348]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800709a:	69a5      	ldr	r5, [r4, #24]
 800709c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80070a4:	432a      	orrs	r2, r5
 80070a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070aa:	061d      	lsls	r5, r3, #24
 80070ac:	d508      	bpl.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070ae:	4952      	ldr	r1, [pc, #328]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070b0:	69e5      	ldr	r5, [r4, #28]
 80070b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80070ba:	432a      	orrs	r2, r5
 80070bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070c0:	05d9      	lsls	r1, r3, #23
 80070c2:	d508      	bpl.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070c4:	494c      	ldr	r1, [pc, #304]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070c6:	6a25      	ldr	r5, [r4, #32]
 80070c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070cc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80070d0:	432a      	orrs	r2, r5
 80070d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070d6:	059a      	lsls	r2, r3, #22
 80070d8:	d508      	bpl.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070da:	4947      	ldr	r1, [pc, #284]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070dc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80070de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070e2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80070e6:	432a      	orrs	r2, r5
 80070e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070ec:	055f      	lsls	r7, r3, #21
 80070ee:	d50b      	bpl.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070f0:	4941      	ldr	r1, [pc, #260]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070f2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80070f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070f8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80070fc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80070fe:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007102:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007106:	d055      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007108:	051e      	lsls	r6, r3, #20
 800710a:	d50b      	bpl.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800710c:	493a      	ldr	r1, [pc, #232]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800710e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007110:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007114:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007118:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800711a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800711e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007122:	d04c      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007124:	04dd      	lsls	r5, r3, #19
 8007126:	d50b      	bpl.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007128:	4933      	ldr	r1, [pc, #204]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800712a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800712c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007130:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007134:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007136:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800713a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800713e:	d043      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007140:	0499      	lsls	r1, r3, #18
 8007142:	d50b      	bpl.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007144:	492c      	ldr	r1, [pc, #176]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007146:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007148:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800714c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007150:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007152:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007156:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800715a:	d03a      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800715c:	045a      	lsls	r2, r3, #17
 800715e:	d50b      	bpl.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007160:	4925      	ldr	r1, [pc, #148]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007162:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007164:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007168:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800716c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800716e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007172:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007176:	d031      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007178:	041b      	lsls	r3, r3, #16
 800717a:	d50b      	bpl.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800717c:	4a1e      	ldr	r2, [pc, #120]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800717e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007180:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007184:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007188:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800718a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800718e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007192:	d028      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8007194:	b002      	add	sp, #8
 8007196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800719a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800719c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80071a0:	659a      	str	r2, [r3, #88]	; 0x58
 80071a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80071ac:	2701      	movs	r7, #1
 80071ae:	e6e9      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 80071b0:	2003      	movs	r0, #3
 80071b2:	e731      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071b4:	68ca      	ldr	r2, [r1, #12]
 80071b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071ba:	60ca      	str	r2, [r1, #12]
 80071bc:	e7a4      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071be:	68ca      	ldr	r2, [r1, #12]
 80071c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071c4:	60ca      	str	r2, [r1, #12]
 80071c6:	e7ad      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071c8:	68ca      	ldr	r2, [r1, #12]
 80071ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071ce:	60ca      	str	r2, [r1, #12]
 80071d0:	e7b6      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071d2:	68ca      	ldr	r2, [r1, #12]
 80071d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071d8:	60ca      	str	r2, [r1, #12]
 80071da:	e7bf      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071dc:	68ca      	ldr	r2, [r1, #12]
 80071de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071e2:	60ca      	str	r2, [r1, #12]
 80071e4:	e7c8      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80071e6:	68d3      	ldr	r3, [r2, #12]
 80071e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ec:	60d3      	str	r3, [r2, #12]
}
 80071ee:	b002      	add	sp, #8
 80071f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f4:	4613      	mov	r3, r2
 80071f6:	e706      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80071f8:	40021000 	.word	0x40021000
 80071fc:	40007000 	.word	0x40007000

08007200 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007200:	6a03      	ldr	r3, [r0, #32]
 8007202:	f023 0301 	bic.w	r3, r3, #1
 8007206:	6203      	str	r3, [r0, #32]
{
 8007208:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800720e:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007210:	4f18      	ldr	r7, [pc, #96]	; (8007274 <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 8007212:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8007214:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007216:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800721a:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800721e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007222:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8007224:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8007228:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800722c:	d00e      	beq.n	800724c <TIM_OC1_SetConfig+0x4c>
 800722e:	4c12      	ldr	r4, [pc, #72]	; (8007278 <TIM_OC1_SetConfig+0x78>)
 8007230:	42a0      	cmp	r0, r4
 8007232:	d00b      	beq.n	800724c <TIM_OC1_SetConfig+0x4c>
 8007234:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007238:	42a0      	cmp	r0, r4
 800723a:	d007      	beq.n	800724c <TIM_OC1_SetConfig+0x4c>
 800723c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007240:	42a0      	cmp	r0, r4
 8007242:	d003      	beq.n	800724c <TIM_OC1_SetConfig+0x4c>
 8007244:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007248:	42a0      	cmp	r0, r4
 800724a:	d10b      	bne.n	8007264 <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800724c:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800724e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007252:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007254:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007258:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800725c:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800725e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007262:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007264:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007266:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007268:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800726a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 800726c:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800726e:	6203      	str	r3, [r0, #32]
}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40013400 	.word	0x40013400

0800727c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800727c:	6a03      	ldr	r3, [r0, #32]
 800727e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007282:	6203      	str	r3, [r0, #32]
{
 8007284:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007286:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800728a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800728c:	4f19      	ldr	r7, [pc, #100]	; (80072f4 <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800728e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8007290:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007292:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8007296:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800729a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800729e:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072a0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80072a4:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072a8:	d00f      	beq.n	80072ca <TIM_OC3_SetConfig+0x4e>
 80072aa:	4c13      	ldr	r4, [pc, #76]	; (80072f8 <TIM_OC3_SetConfig+0x7c>)
 80072ac:	42a0      	cmp	r0, r4
 80072ae:	d00c      	beq.n	80072ca <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b0:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80072b4:	42a0      	cmp	r0, r4
 80072b6:	d00f      	beq.n	80072d8 <TIM_OC3_SetConfig+0x5c>
 80072b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80072bc:	42a0      	cmp	r0, r4
 80072be:	d00b      	beq.n	80072d8 <TIM_OC3_SetConfig+0x5c>
 80072c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80072c4:	42a0      	cmp	r0, r4
 80072c6:	d10e      	bne.n	80072e6 <TIM_OC3_SetConfig+0x6a>
 80072c8:	e006      	b.n	80072d8 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072ca:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80072cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072d0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80072d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072d8:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072dc:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072e0:	432c      	orrs	r4, r5
 80072e2:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072e6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80072e8:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80072ea:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80072ec:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 80072ee:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80072f0:	6203      	str	r3, [r0, #32]
}
 80072f2:	4770      	bx	lr
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40013400 	.word	0x40013400

080072fc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072fc:	6a03      	ldr	r3, [r0, #32]
 80072fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007302:	6203      	str	r3, [r0, #32]
{
 8007304:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007306:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007308:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800730a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800730c:	4f19      	ldr	r7, [pc, #100]	; (8007374 <TIM_OC4_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800730e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007310:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007312:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8007316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800731a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800731e:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007320:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007324:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007328:	d00f      	beq.n	800734a <TIM_OC4_SetConfig+0x4e>
 800732a:	4c13      	ldr	r4, [pc, #76]	; (8007378 <TIM_OC4_SetConfig+0x7c>)
 800732c:	42a0      	cmp	r0, r4
 800732e:	d00c      	beq.n	800734a <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007330:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007334:	42a0      	cmp	r0, r4
 8007336:	d00f      	beq.n	8007358 <TIM_OC4_SetConfig+0x5c>
 8007338:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800733c:	42a0      	cmp	r0, r4
 800733e:	d00b      	beq.n	8007358 <TIM_OC4_SetConfig+0x5c>
 8007340:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007344:	42a0      	cmp	r0, r4
 8007346:	d10e      	bne.n	8007366 <TIM_OC4_SetConfig+0x6a>
 8007348:	e006      	b.n	8007358 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800734a:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800734c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007350:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007358:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800735c:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007360:	432c      	orrs	r4, r5
 8007362:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007366:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007368:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800736a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800736c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 800736e:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007370:	6203      	str	r3, [r0, #32]
}
 8007372:	4770      	bx	lr
 8007374:	40012c00 	.word	0x40012c00
 8007378:	40013400 	.word	0x40013400

0800737c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800737c:	2800      	cmp	r0, #0
 800737e:	d07d      	beq.n	800747c <HAL_TIM_Base_Init+0x100>
{
 8007380:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007382:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007386:	4604      	mov	r4, r0
 8007388:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800738c:	2b00      	cmp	r3, #0
 800738e:	d06d      	beq.n	800746c <HAL_TIM_Base_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007390:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007392:	4a3b      	ldr	r2, [pc, #236]	; (8007480 <HAL_TIM_Base_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	2302      	movs	r3, #2
 8007396:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800739a:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 800739c:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800739e:	d051      	beq.n	8007444 <HAL_TIM_Base_Init+0xc8>
 80073a0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80073a4:	d021      	beq.n	80073ea <HAL_TIM_Base_Init+0x6e>
 80073a6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80073aa:	4291      	cmp	r1, r2
 80073ac:	d01d      	beq.n	80073ea <HAL_TIM_Base_Init+0x6e>
 80073ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073b2:	4291      	cmp	r1, r2
 80073b4:	d019      	beq.n	80073ea <HAL_TIM_Base_Init+0x6e>
 80073b6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80073ba:	4291      	cmp	r1, r2
 80073bc:	d042      	beq.n	8007444 <HAL_TIM_Base_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073be:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80073c2:	4291      	cmp	r1, r2
 80073c4:	d057      	beq.n	8007476 <HAL_TIM_Base_Init+0xfa>
 80073c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073ca:	4291      	cmp	r1, r2
 80073cc:	d053      	beq.n	8007476 <HAL_TIM_Base_Init+0xfa>
 80073ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073d2:	4291      	cmp	r1, r2
 80073d4:	d04f      	beq.n	8007476 <HAL_TIM_Base_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d6:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073d8:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80073da:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073e0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80073e2:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073e4:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80073e6:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073e8:	e010      	b.n	800740c <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80073ea:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ec:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073ee:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80073f4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80073f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073fa:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073fc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007402:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8007404:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007406:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007408:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800740a:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800740c:	2301      	movs	r3, #1
 800740e:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007410:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007414:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007418:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800741c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007420:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800742c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007430:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007434:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007438:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800743c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007440:	2000      	movs	r0, #0
}
 8007442:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007444:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007446:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007448:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800744a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800744e:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8007450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007454:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800745c:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800745e:	68e3      	ldr	r3, [r4, #12]
 8007460:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007462:	6863      	ldr	r3, [r4, #4]
 8007464:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007466:	6963      	ldr	r3, [r4, #20]
 8007468:	630b      	str	r3, [r1, #48]	; 0x30
 800746a:	e7cf      	b.n	800740c <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 800746c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007470:	f7fc ffd0 	bl	8004414 <HAL_TIM_Base_MspInit>
 8007474:	e78c      	b.n	8007390 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007476:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007478:	69a2      	ldr	r2, [r4, #24]
 800747a:	e7e9      	b.n	8007450 <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 800747c:	2001      	movs	r0, #1
}
 800747e:	4770      	bx	lr
 8007480:	40012c00 	.word	0x40012c00

08007484 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007484:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007488:	2b01      	cmp	r3, #1
 800748a:	d122      	bne.n	80074d2 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800748c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800748e:	4917      	ldr	r1, [pc, #92]	; (80074ec <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007490:	2202      	movs	r2, #2
 8007492:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007496:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007498:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a0:	d019      	beq.n	80074d6 <HAL_TIM_Base_Start_IT+0x52>
 80074a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a6:	d016      	beq.n	80074d6 <HAL_TIM_Base_Start_IT+0x52>
 80074a8:	4a11      	ldr	r2, [pc, #68]	; (80074f0 <HAL_TIM_Base_Start_IT+0x6c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d013      	beq.n	80074d6 <HAL_TIM_Base_Start_IT+0x52>
 80074ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00f      	beq.n	80074d6 <HAL_TIM_Base_Start_IT+0x52>
 80074b6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <HAL_TIM_Base_Start_IT+0x52>
 80074be:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d007      	beq.n	80074d6 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	f042 0201 	orr.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80074ce:	2000      	movs	r0, #0
 80074d0:	4770      	bx	lr
    return HAL_ERROR;
 80074d2:	2001      	movs	r0, #1
 80074d4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074d6:	6899      	ldr	r1, [r3, #8]
 80074d8:	4a06      	ldr	r2, [pc, #24]	; (80074f4 <HAL_TIM_Base_Start_IT+0x70>)
 80074da:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074dc:	2a06      	cmp	r2, #6
 80074de:	d002      	beq.n	80074e6 <HAL_TIM_Base_Start_IT+0x62>
 80074e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80074e4:	d1ef      	bne.n	80074c6 <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 80074e6:	2000      	movs	r0, #0
}
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40012c00 	.word	0x40012c00
 80074f0:	40000400 	.word	0x40000400
 80074f4:	00010007 	.word	0x00010007

080074f8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80074f8:	6803      	ldr	r3, [r0, #0]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	f022 0201 	bic.w	r2, r2, #1
 8007500:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	f241 1111 	movw	r1, #4369	; 0x1111
 8007508:	420a      	tst	r2, r1
 800750a:	d108      	bne.n	800751e <HAL_TIM_Base_Stop_IT+0x26>
 800750c:	6a19      	ldr	r1, [r3, #32]
 800750e:	f244 4244 	movw	r2, #17476	; 0x4444
 8007512:	4211      	tst	r1, r2
 8007514:	d103      	bne.n	800751e <HAL_TIM_Base_Stop_IT+0x26>
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	f022 0201 	bic.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800751e:	2301      	movs	r3, #1
 8007520:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8007524:	2000      	movs	r0, #0
 8007526:	4770      	bx	lr

08007528 <HAL_TIM_PWM_MspInit>:
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop

0800752c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800752c:	2800      	cmp	r0, #0
 800752e:	d07d      	beq.n	800762c <HAL_TIM_PWM_Init+0x100>
{
 8007530:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007532:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007536:	4604      	mov	r4, r0
 8007538:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800753c:	2b00      	cmp	r3, #0
 800753e:	d06d      	beq.n	800761c <HAL_TIM_PWM_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007540:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007542:	4a3b      	ldr	r2, [pc, #236]	; (8007630 <HAL_TIM_PWM_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007544:	2302      	movs	r3, #2
 8007546:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800754a:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 800754c:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800754e:	d051      	beq.n	80075f4 <HAL_TIM_PWM_Init+0xc8>
 8007550:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8007554:	d021      	beq.n	800759a <HAL_TIM_PWM_Init+0x6e>
 8007556:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800755a:	4291      	cmp	r1, r2
 800755c:	d01d      	beq.n	800759a <HAL_TIM_PWM_Init+0x6e>
 800755e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007562:	4291      	cmp	r1, r2
 8007564:	d019      	beq.n	800759a <HAL_TIM_PWM_Init+0x6e>
 8007566:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800756a:	4291      	cmp	r1, r2
 800756c:	d042      	beq.n	80075f4 <HAL_TIM_PWM_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800756e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007572:	4291      	cmp	r1, r2
 8007574:	d057      	beq.n	8007626 <HAL_TIM_PWM_Init+0xfa>
 8007576:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800757a:	4291      	cmp	r1, r2
 800757c:	d053      	beq.n	8007626 <HAL_TIM_PWM_Init+0xfa>
 800757e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007582:	4291      	cmp	r1, r2
 8007584:	d04f      	beq.n	8007626 <HAL_TIM_PWM_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007586:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007588:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800758a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800758c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007590:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007592:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007594:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007596:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007598:	e010      	b.n	80075bc <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800759a:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800759c:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800759e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80075a4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80075a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075aa:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075ac:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b2:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80075b4:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80075b6:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075b8:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80075ba:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80075bc:	2301      	movs	r3, #1
 80075be:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80075c8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80075cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80075d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80075d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80075e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075e4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80075e8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80075ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80075f0:	2000      	movs	r0, #0
}
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80075f4:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075f6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f8:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80075fe:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8007600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007604:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800760c:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800760e:	68e3      	ldr	r3, [r4, #12]
 8007610:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007612:	6863      	ldr	r3, [r4, #4]
 8007614:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007616:	6963      	ldr	r3, [r4, #20]
 8007618:	630b      	str	r3, [r1, #48]	; 0x30
 800761a:	e7cf      	b.n	80075bc <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 800761c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007620:	f7ff ff82 	bl	8007528 <HAL_TIM_PWM_MspInit>
 8007624:	e78c      	b.n	8007540 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007626:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007628:	69a2      	ldr	r2, [r4, #24]
 800762a:	e7e9      	b.n	8007600 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 800762c:	2001      	movs	r0, #1
}
 800762e:	4770      	bx	lr
 8007630:	40012c00 	.word	0x40012c00

08007634 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8007634:	2800      	cmp	r0, #0
 8007636:	f000 80ab 	beq.w	8007790 <HAL_TIM_Encoder_Init+0x15c>
{
 800763a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800763e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007642:	460d      	mov	r5, r1
 8007644:	4604      	mov	r4, r0
 8007646:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 8095 	beq.w	800777a <HAL_TIM_Encoder_Init+0x146>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007650:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007652:	4950      	ldr	r1, [pc, #320]	; (8007794 <HAL_TIM_Encoder_Init+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	2202      	movs	r2, #2
 8007656:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8007660:	f022 0207 	bic.w	r2, r2, #7
 8007664:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007666:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8007668:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800766a:	d072      	beq.n	8007752 <HAL_TIM_Encoder_Init+0x11e>
 800766c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007670:	d021      	beq.n	80076b6 <HAL_TIM_Encoder_Init+0x82>
 8007672:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8007676:	428b      	cmp	r3, r1
 8007678:	d01d      	beq.n	80076b6 <HAL_TIM_Encoder_Init+0x82>
 800767a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800767e:	428b      	cmp	r3, r1
 8007680:	d019      	beq.n	80076b6 <HAL_TIM_Encoder_Init+0x82>
 8007682:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8007686:	428b      	cmp	r3, r1
 8007688:	d063      	beq.n	8007752 <HAL_TIM_Encoder_Init+0x11e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800768a:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800768e:	428b      	cmp	r3, r1
 8007690:	d078      	beq.n	8007784 <HAL_TIM_Encoder_Init+0x150>
 8007692:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007696:	428b      	cmp	r3, r1
 8007698:	d074      	beq.n	8007784 <HAL_TIM_Encoder_Init+0x150>
 800769a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800769e:	428b      	cmp	r3, r1
 80076a0:	d070      	beq.n	8007784 <HAL_TIM_Encoder_Init+0x150>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076a2:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076aa:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80076ac:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80076ae:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076b0:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80076b2:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b4:	e010      	b.n	80076d8 <HAL_TIM_Encoder_Init+0xa4>
    tmpcr1 |= Structure->CounterMode;
 80076b6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076b8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80076be:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80076c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076c4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076c6:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076cc:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076ce:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80076d0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80076d2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076d4:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80076d6:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80076d8:	2601      	movs	r6, #1
 80076da:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 80076dc:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80076e0:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80076e2:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80076e4:	69af      	ldr	r7, [r5, #24]
 80076e6:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80076e8:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80076ec:	f420 7840 	bic.w	r8, r0, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80076f0:	69e8      	ldr	r0, [r5, #28]
 80076f2:	0112      	lsls	r2, r2, #4
 80076f4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80076f8:	68e8      	ldr	r0, [r5, #12]
 80076fa:	4302      	orrs	r2, r0
 80076fc:	6a28      	ldr	r0, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80076fe:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007702:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8007706:	ea41 0108 	orr.w	r1, r1, r8
  tmpccer = htim->Instance->CCER;
 800770a:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800770c:	f8d5 8014 	ldr.w	r8, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007710:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007714:	6868      	ldr	r0, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007716:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800771a:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800771e:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007722:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007726:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 8007728:	ea4c 050e 	orr.w	r5, ip, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800772c:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800772e:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8007730:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8007732:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007734:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007738:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800773c:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007740:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007744:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007748:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 800774c:	2000      	movs	r0, #0
}
 800774e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 8007752:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007754:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007756:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800775a:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800775c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007760:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007762:	69a1      	ldr	r1, [r4, #24]
 8007764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007768:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800776a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800776c:	68e2      	ldr	r2, [r4, #12]
 800776e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007770:	6862      	ldr	r2, [r4, #4]
 8007772:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007774:	6962      	ldr	r2, [r4, #20]
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
 8007778:	e7ae      	b.n	80076d8 <HAL_TIM_Encoder_Init+0xa4>
    htim->Lock = HAL_UNLOCKED;
 800777a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800777e:	f7fc fe97 	bl	80044b0 <HAL_TIM_Encoder_MspInit>
 8007782:	e765      	b.n	8007650 <HAL_TIM_Encoder_Init+0x1c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007784:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007786:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007788:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800778c:	4302      	orrs	r2, r0
 800778e:	e7e9      	b.n	8007764 <HAL_TIM_Encoder_Init+0x130>
    return HAL_ERROR;
 8007790:	2001      	movs	r0, #1
}
 8007792:	4770      	bx	lr
 8007794:	40012c00 	.word	0x40012c00

08007798 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007798:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800779c:	2b01      	cmp	r3, #1
 800779e:	f000 8083 	beq.w	80078a8 <HAL_TIM_ConfigClockSource+0x110>
{
 80077a2:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 80077a4:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 80077a6:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80077a8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80077aa:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80077ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80077b2:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80077b4:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077b6:	4c58      	ldr	r4, [pc, #352]	; (8007918 <HAL_TIM_ConfigClockSource+0x180>)
  switch (sClockSourceConfig->ClockSource)
 80077b8:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077ba:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 80077be:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80077c0:	d074      	beq.n	80078ac <HAL_TIM_ConfigClockSource+0x114>
 80077c2:	d91f      	bls.n	8007804 <HAL_TIM_ConfigClockSource+0x6c>
 80077c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c8:	d05e      	beq.n	8007888 <HAL_TIM_ConfigClockSource+0xf0>
 80077ca:	d947      	bls.n	800785c <HAL_TIM_ConfigClockSource+0xc4>
 80077cc:	4953      	ldr	r1, [pc, #332]	; (800791c <HAL_TIM_ConfigClockSource+0x184>)
 80077ce:	428b      	cmp	r3, r1
 80077d0:	d006      	beq.n	80077e0 <HAL_TIM_ConfigClockSource+0x48>
 80077d2:	d93c      	bls.n	800784e <HAL_TIM_ConfigClockSource+0xb6>
 80077d4:	4952      	ldr	r1, [pc, #328]	; (8007920 <HAL_TIM_ConfigClockSource+0x188>)
 80077d6:	428b      	cmp	r3, r1
 80077d8:	d002      	beq.n	80077e0 <HAL_TIM_ConfigClockSource+0x48>
 80077da:	3130      	adds	r1, #48	; 0x30
 80077dc:	428b      	cmp	r3, r1
 80077de:	d108      	bne.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077e0:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077e2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80077e6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ea:	430b      	orrs	r3, r1
 80077ec:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077f0:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 80077f2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80077f4:	2201      	movs	r2, #1
 80077f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80077fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80077fe:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007800:	4618      	mov	r0, r3
}
 8007802:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d06c      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x14a>
 8007808:	d91b      	bls.n	8007842 <HAL_TIM_ConfigClockSource+0xaa>
 800780a:	2b50      	cmp	r3, #80	; 0x50
 800780c:	d1f1      	bne.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 800780e:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007810:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007812:	684c      	ldr	r4, [r1, #4]
 8007814:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007816:	f026 0601 	bic.w	r6, r6, #1
 800781a:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800781c:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800781e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007826:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800782a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800782c:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800782e:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007830:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007832:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800783a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800783e:	6093      	str	r3, [r2, #8]
}
 8007840:	e7d7      	b.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007842:	2b20      	cmp	r3, #32
 8007844:	d0cc      	beq.n	80077e0 <HAL_TIM_ConfigClockSource+0x48>
 8007846:	d91b      	bls.n	8007880 <HAL_TIM_ConfigClockSource+0xe8>
 8007848:	2b30      	cmp	r3, #48	; 0x30
 800784a:	d1d2      	bne.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>
 800784c:	e7c8      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x48>
 800784e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007852:	d0c5      	beq.n	80077e0 <HAL_TIM_ConfigClockSource+0x48>
 8007854:	3910      	subs	r1, #16
 8007856:	428b      	cmp	r3, r1
 8007858:	d0c2      	beq.n	80077e0 <HAL_TIM_ConfigClockSource+0x48>
 800785a:	e7ca      	b.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>
 800785c:	2b70      	cmp	r3, #112	; 0x70
 800785e:	d1c8      	bne.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007860:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8007864:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007866:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007868:	432b      	orrs	r3, r5
 800786a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800786e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007872:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007874:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007876:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800787c:	6093      	str	r3, [r2, #8]
      break;
 800787e:	e7b8      	b.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007880:	f033 0110 	bics.w	r1, r3, #16
 8007884:	d1b5      	bne.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>
 8007886:	e7ab      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x48>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007888:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800788c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800788e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007890:	432b      	orrs	r3, r5
 8007892:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007896:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800789a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800789c:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800789e:	6893      	ldr	r3, [r2, #8]
 80078a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078a4:	6093      	str	r3, [r2, #8]
      break;
 80078a6:	e7a4      	b.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80078a8:	2002      	movs	r0, #2
}
 80078aa:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ac:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078ae:	684d      	ldr	r5, [r1, #4]
 80078b0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078b2:	f024 0410 	bic.w	r4, r4, #16
 80078b6:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b8:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80078ba:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078bc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80078c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078c8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80078cc:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80078ce:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80078d0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80078d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80078d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078da:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80078de:	6093      	str	r3, [r2, #8]
}
 80078e0:	e787      	b.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80078e2:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078e4:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078e6:	684c      	ldr	r4, [r1, #4]
 80078e8:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ea:	f026 0601 	bic.w	r6, r6, #1
 80078ee:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f0:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078f2:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078fa:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80078fe:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007900:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8007902:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007904:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007906:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800790e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007912:	6093      	str	r3, [r2, #8]
}
 8007914:	e76d      	b.n	80077f2 <HAL_TIM_ConfigClockSource+0x5a>
 8007916:	bf00      	nop
 8007918:	ffce0088 	.word	0xffce0088
 800791c:	00100030 	.word	0x00100030
 8007920:	00100040 	.word	0x00100040

08007924 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8007924:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007928:	2b01      	cmp	r3, #1
 800792a:	d04d      	beq.n	80079c8 <HAL_TIM_SlaveConfigSynchro+0xa4>
 800792c:	4602      	mov	r2, r0
{
 800792e:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8007930:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8007932:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007934:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8007936:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800793a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800793e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007940:	e9d1 5400 	ldrd	r5, r4, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007944:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800794c:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 800794e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007952:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007956:	432b      	orrs	r3, r5
  switch (sSlaveConfig->InputTrigger)
 8007958:	2c60      	cmp	r4, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800795a:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800795c:	d051      	beq.n	8007a02 <HAL_TIM_SlaveConfigSynchro+0xde>
 800795e:	d825      	bhi.n	80079ac <HAL_TIM_SlaveConfigSynchro+0x88>
 8007960:	2c40      	cmp	r4, #64	; 0x40
 8007962:	d033      	beq.n	80079cc <HAL_TIM_SlaveConfigSynchro+0xa8>
 8007964:	2c50      	cmp	r4, #80	; 0x50
 8007966:	d110      	bne.n	800798a <HAL_TIM_SlaveConfigSynchro+0x66>
  tmpccer = TIMx->CCER;
 8007968:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800796a:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800796c:	688c      	ldr	r4, [r1, #8]
 800796e:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007970:	f026 0601 	bic.w	r6, r6, #1
 8007974:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007976:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007978:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800797c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8007980:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007982:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007986:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007988:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800798a:	68c3      	ldr	r3, [r0, #12]
 800798c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007990:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007992:	68c3      	ldr	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8007994:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8007996:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800799c:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 800799e:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80079a2:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 80079a6:	4608      	mov	r0, r1
}
 80079a8:	bcf0      	pop	{r4, r5, r6, r7}
 80079aa:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80079ac:	2c70      	cmp	r4, #112	; 0x70
 80079ae:	d1ec      	bne.n	800798a <HAL_TIM_SlaveConfigSynchro+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079b0:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80079b4:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 80079b6:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079b8:	432b      	orrs	r3, r5
 80079ba:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079be:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079c2:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80079c4:	6083      	str	r3, [r0, #8]
 80079c6:	e7e0      	b.n	800798a <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 80079c8:	2002      	movs	r0, #2
}
 80079ca:	4770      	bx	lr
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80079cc:	2d05      	cmp	r5, #5
 80079ce:	d010      	beq.n	80079f2 <HAL_TIM_SlaveConfigSynchro+0xce>
 80079d0:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 80079d4:	d00d      	beq.n	80079f2 <HAL_TIM_SlaveConfigSynchro+0xce>
      tmpccer = htim->Instance->CCER;
 80079d6:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80079d8:	6a04      	ldr	r4, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80079da:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80079dc:	f024 0401 	bic.w	r4, r4, #1
 80079e0:	6204      	str	r4, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80079e2:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80079e8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80079ec:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 80079ee:	6205      	str	r5, [r0, #32]
      break;
 80079f0:	e7cb      	b.n	800798a <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 80079f2:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80079f4:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80079f6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80079fa:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80079fe:	bcf0      	pop	{r4, r5, r6, r7}
 8007a00:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a02:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a04:	688d      	ldr	r5, [r1, #8]
 8007a06:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a08:	f024 0410 	bic.w	r4, r4, #16
 8007a0c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a0e:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8007a10:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a12:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a1a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a1e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8007a22:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8007a24:	6203      	str	r3, [r0, #32]
 8007a26:	e7b0      	b.n	800798a <HAL_TIM_SlaveConfigSynchro+0x66>

08007a28 <HAL_TIM_OC_DelayElapsedCallback>:
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <HAL_TIM_IC_CaptureCallback>:
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop

08007a30 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop

08007a34 <HAL_TIM_TriggerCallback>:
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop

08007a38 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a38:	6803      	ldr	r3, [r0, #0]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	0791      	lsls	r1, r2, #30
{
 8007a3e:	b510      	push	{r4, lr}
 8007a40:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a42:	d503      	bpl.n	8007a4c <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	0792      	lsls	r2, r2, #30
 8007a48:	f100 808a 	bmi.w	8007b60 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a4c:	691a      	ldr	r2, [r3, #16]
 8007a4e:	0752      	lsls	r2, r2, #29
 8007a50:	d502      	bpl.n	8007a58 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	0750      	lsls	r0, r2, #29
 8007a56:	d470      	bmi.n	8007b3a <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	0711      	lsls	r1, r2, #28
 8007a5c:	d502      	bpl.n	8007a64 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	0712      	lsls	r2, r2, #28
 8007a62:	d458      	bmi.n	8007b16 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a64:	691a      	ldr	r2, [r3, #16]
 8007a66:	06d1      	lsls	r1, r2, #27
 8007a68:	d502      	bpl.n	8007a70 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	06d2      	lsls	r2, r2, #27
 8007a6e:	d43e      	bmi.n	8007aee <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	07d0      	lsls	r0, r2, #31
 8007a74:	d503      	bpl.n	8007a7e <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	07d1      	lsls	r1, r2, #31
 8007a7a:	f100 808a 	bmi.w	8007b92 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	0612      	lsls	r2, r2, #24
 8007a82:	d503      	bpl.n	8007a8c <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	0610      	lsls	r0, r2, #24
 8007a88:	f100 808b 	bmi.w	8007ba2 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	05d1      	lsls	r1, r2, #23
 8007a90:	d503      	bpl.n	8007a9a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	0612      	lsls	r2, r2, #24
 8007a96:	f100 808c 	bmi.w	8007bb2 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a9a:	691a      	ldr	r2, [r3, #16]
 8007a9c:	0650      	lsls	r0, r2, #25
 8007a9e:	d503      	bpl.n	8007aa8 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	0651      	lsls	r1, r2, #25
 8007aa4:	f100 808d 	bmi.w	8007bc2 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	0692      	lsls	r2, r2, #26
 8007aac:	d503      	bpl.n	8007ab6 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	0690      	lsls	r0, r2, #26
 8007ab2:	f100 808e 	bmi.w	8007bd2 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	02d1      	lsls	r1, r2, #11
 8007aba:	d503      	bpl.n	8007ac4 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	02d2      	lsls	r2, r2, #11
 8007ac0:	f100 808f 	bmi.w	8007be2 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007ac4:	691a      	ldr	r2, [r3, #16]
 8007ac6:	0290      	lsls	r0, r2, #10
 8007ac8:	d503      	bpl.n	8007ad2 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	0291      	lsls	r1, r2, #10
 8007ace:	f100 8090 	bmi.w	8007bf2 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	0252      	lsls	r2, r2, #9
 8007ad6:	d503      	bpl.n	8007ae0 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	0250      	lsls	r0, r2, #9
 8007adc:	f100 8091 	bmi.w	8007c02 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	0211      	lsls	r1, r2, #8
 8007ae4:	d502      	bpl.n	8007aec <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	0212      	lsls	r2, r2, #8
 8007aea:	d44a      	bmi.n	8007b82 <HAL_TIM_IRQHandler+0x14a>
}
 8007aec:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007aee:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007af2:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007af4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007af6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007afe:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b00:	f040 8090 	bne.w	8007c24 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b04:	f7ff ff90 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f7ff ff91 	bl	8007a30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0e:	2200      	movs	r2, #0
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	7722      	strb	r2, [r4, #28]
 8007b14:	e7ac      	b.n	8007a70 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b16:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b1a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b1c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b1e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007b24:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b26:	d17a      	bne.n	8007c1e <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b28:	f7ff ff7e 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f7ff ff7f 	bl	8007a30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b32:	2200      	movs	r2, #0
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	7722      	strb	r2, [r4, #28]
 8007b38:	e794      	b.n	8007a64 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b3a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b3e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b40:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b42:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b4c:	d164      	bne.n	8007c18 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b4e:	f7ff ff6b 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b52:	4620      	mov	r0, r4
 8007b54:	f7ff ff6c 	bl	8007a30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b58:	2200      	movs	r2, #0
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	7722      	strb	r2, [r4, #28]
 8007b5e:	e77b      	b.n	8007a58 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b60:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b64:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b66:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b68:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	0799      	lsls	r1, r3, #30
 8007b6e:	d150      	bne.n	8007c12 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b70:	f7ff ff5a 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b74:	4620      	mov	r0, r4
 8007b76:	f7ff ff5b 	bl	8007a30 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	7722      	strb	r2, [r4, #28]
 8007b80:	e764      	b.n	8007a4c <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007b82:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007b86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007b88:	611a      	str	r2, [r3, #16]
}
 8007b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007b8e:	f000 ba81 	b.w	8008094 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b92:	f06f 0201 	mvn.w	r2, #1
 8007b96:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f7f9 fba1 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	e76d      	b.n	8007a7e <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ba2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ba6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 fa69 	bl	8008080 <HAL_TIMEx_BreakCallback>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	e76c      	b.n	8007a8c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bb6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fa63 	bl	8008084 <HAL_TIMEx_Break2Callback>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	e76b      	b.n	8007a9a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bc6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f7ff ff33 	bl	8007a34 <HAL_TIM_TriggerCallback>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	e76a      	b.n	8007aa8 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bd2:	f06f 0220 	mvn.w	r2, #32
 8007bd6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 fa4f 	bl	800807c <HAL_TIMEx_CommutCallback>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	e769      	b.n	8007ab6 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007be2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007be6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 fa4d 	bl	8008088 <HAL_TIMEx_EncoderIndexCallback>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	e768      	b.n	8007ac4 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007bf2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007bf6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f000 fa47 	bl	800808c <HAL_TIMEx_DirectionChangeCallback>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	e767      	b.n	8007ad2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007c02:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007c06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fa41 	bl	8008090 <HAL_TIMEx_IndexErrorCallback>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	e766      	b.n	8007ae0 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8007c12:	f7ff ff0b 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007c16:	e7b0      	b.n	8007b7a <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8007c18:	f7ff ff08 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007c1c:	e79c      	b.n	8007b58 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8007c1e:	f7ff ff05 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007c22:	e786      	b.n	8007b32 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8007c24:	f7ff ff02 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007c28:	e771      	b.n	8007b0e <HAL_TIM_IRQHandler+0xd6>
 8007c2a:	bf00      	nop

08007c2c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c2c:	6a03      	ldr	r3, [r0, #32]
 8007c2e:	f023 0310 	bic.w	r3, r3, #16
 8007c32:	6203      	str	r3, [r0, #32]
{
 8007c34:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8007c36:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007c38:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007c3a:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c3c:	4f19      	ldr	r7, [pc, #100]	; (8007ca4 <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c3e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c40:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c42:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8007c46:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c4a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c4e:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c54:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c58:	d00f      	beq.n	8007c7a <TIM_OC2_SetConfig+0x4e>
 8007c5a:	4c13      	ldr	r4, [pc, #76]	; (8007ca8 <TIM_OC2_SetConfig+0x7c>)
 8007c5c:	42a0      	cmp	r0, r4
 8007c5e:	d00c      	beq.n	8007c7a <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c60:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007c64:	42a0      	cmp	r0, r4
 8007c66:	d00f      	beq.n	8007c88 <TIM_OC2_SetConfig+0x5c>
 8007c68:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007c6c:	42a0      	cmp	r0, r4
 8007c6e:	d00b      	beq.n	8007c88 <TIM_OC2_SetConfig+0x5c>
 8007c70:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007c74:	42a0      	cmp	r0, r4
 8007c76:	d10e      	bne.n	8007c96 <TIM_OC2_SetConfig+0x6a>
 8007c78:	e006      	b.n	8007c88 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c7a:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c80:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c88:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c8c:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c90:	432c      	orrs	r4, r5
 8007c92:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8007c96:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007c98:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007c9a:	6182      	str	r2, [r0, #24]
}
 8007c9c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8007c9e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007ca0:	6203      	str	r3, [r0, #32]
}
 8007ca2:	4770      	bx	lr
 8007ca4:	40012c00 	.word	0x40012c00
 8007ca8:	40013400 	.word	0x40013400

08007cac <HAL_TIM_PWM_ConfigChannel>:
{
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007cae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	f000 80e4 	beq.w	8007e80 <HAL_TIM_PWM_ConfigChannel+0x1d4>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	4604      	mov	r4, r0
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007cc2:	2a14      	cmp	r2, #20
 8007cc4:	d844      	bhi.n	8007d50 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8007cc6:	e8df f002 	tbb	[pc, r2]
 8007cca:	4347      	.short	0x4347
 8007ccc:	435b4343 	.word	0x435b4343
 8007cd0:	43704343 	.word	0x43704343
 8007cd4:	43844343 	.word	0x43844343
 8007cd8:	43994343 	.word	0x43994343
 8007cdc:	4343      	.short	0x4343
 8007cde:	0b          	.byte	0x0b
 8007cdf:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ce0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ce2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ce6:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce8:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cea:	4e6c      	ldr	r6, [pc, #432]	; (8007e9c <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cec:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8007cf0:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8007cf2:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007cf4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cf8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cfc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d00:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d04:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d06:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d0a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d0e:	d008      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007d10:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007d14:	42b3      	cmp	r3, r6
 8007d16:	d004      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007d18:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007d1c:	42b3      	cmp	r3, r6
 8007d1e:	f040 80b1 	bne.w	8007e84 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d22:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d24:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d28:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8007d2c:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8007d2e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007d30:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8007d32:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8007d34:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d36:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d38:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d3a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007d3e:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007d42:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007d46:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d4a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007d4e:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8007d50:	2000      	movs	r0, #0
 8007d52:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d58:	6800      	ldr	r0, [r0, #0]
 8007d5a:	f7ff fa51 	bl	8007200 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d5e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d60:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d62:	6999      	ldr	r1, [r3, #24]
 8007d64:	f041 0108 	orr.w	r1, r1, #8
 8007d68:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d6a:	6999      	ldr	r1, [r3, #24]
 8007d6c:	f021 0104 	bic.w	r1, r1, #4
 8007d70:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d72:	699a      	ldr	r2, [r3, #24]
 8007d74:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007d76:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d78:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007d7a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007d7e:	e7ea      	b.n	8007d56 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d80:	6800      	ldr	r0, [r0, #0]
 8007d82:	f7ff ff53 	bl	8007c2c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d86:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d88:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d8a:	6999      	ldr	r1, [r3, #24]
 8007d8c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007d90:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d92:	6999      	ldr	r1, [r3, #24]
 8007d94:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007d98:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d9a:	699a      	ldr	r2, [r3, #24]
 8007d9c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8007da0:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007da2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007da4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007da8:	e7d5      	b.n	8007d56 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007daa:	6800      	ldr	r0, [r0, #0]
 8007dac:	f7ff fa66 	bl	800727c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007db0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007db2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007db4:	69d9      	ldr	r1, [r3, #28]
 8007db6:	f041 0108 	orr.w	r1, r1, #8
 8007dba:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dbc:	69d9      	ldr	r1, [r3, #28]
 8007dbe:	f021 0104 	bic.w	r1, r1, #4
 8007dc2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dc4:	69da      	ldr	r2, [r3, #28]
 8007dc6:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007dc8:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dca:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007dcc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007dd0:	e7c1      	b.n	8007d56 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dd2:	6800      	ldr	r0, [r0, #0]
 8007dd4:	f7ff fa92 	bl	80072fc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dd8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dda:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ddc:	69d9      	ldr	r1, [r3, #28]
 8007dde:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007de2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007de4:	69d9      	ldr	r1, [r3, #28]
 8007de6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007dea:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dec:	69da      	ldr	r2, [r3, #28]
 8007dee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8007df2:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007df4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007df6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007dfa:	e7ac      	b.n	8007d56 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007dfc:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007dfe:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e02:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8007e04:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e06:	4e25      	ldr	r6, [pc, #148]	; (8007e9c <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e08:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8007e0c:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8007e0e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007e10:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007e12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8007e18:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e20:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e22:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8007e26:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2a:	d00f      	beq.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8007e2c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007e30:	42b3      	cmp	r3, r6
 8007e32:	d00b      	beq.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8007e34:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007e38:	42b3      	cmp	r3, r6
 8007e3a:	d007      	beq.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8007e3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007e40:	42b3      	cmp	r3, r6
 8007e42:	d003      	beq.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8007e44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007e48:	42b3      	cmp	r3, r6
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e4c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e4e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e52:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8007e56:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8007e58:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007e5a:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8007e5c:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8007e5e:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e60:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e62:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e64:	f041 0108 	orr.w	r1, r1, #8
 8007e68:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e6a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007e6c:	f021 0104 	bic.w	r1, r1, #4
 8007e70:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e74:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007e76:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e78:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8007e7a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007e7e:	e76a      	b.n	8007d56 <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 8007e80:	2002      	movs	r0, #2
}
 8007e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e84:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007e88:	42b3      	cmp	r3, r6
 8007e8a:	f43f af4a 	beq.w	8007d22 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007e8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007e92:	42b3      	cmp	r3, r6
 8007e94:	f47f af4a 	bne.w	8007d2c <HAL_TIM_PWM_ConfigChannel+0x80>
 8007e98:	e743      	b.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007e9a:	bf00      	nop
 8007e9c:	40012c00 	.word	0x40012c00

08007ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ea0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d03c      	beq.n	8007f22 <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 8007ea8:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eaa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007eac:	4c1e      	ldr	r4, [pc, #120]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007eb4:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8007eb6:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007eb8:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007eba:	d026      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8007ebc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007ec0:	42a2      	cmp	r2, r4
 8007ec2:	d022      	beq.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ec4:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ec6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ece:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8007ed4:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed6:	d00a      	beq.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007ed8:	4b14      	ldr	r3, [pc, #80]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d007      	beq.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d003      	beq.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007ee6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d104      	bne.n	8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eee:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ef0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ef4:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ef6:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007ef8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007efa:	2201      	movs	r2, #1
 8007efc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007f00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8007f04:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8007f06:	4618      	mov	r0, r3
}
 8007f08:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f0a:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f12:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f14:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f1c:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8007f1e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f20:	e7e5      	b.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8007f22:	2002      	movs	r0, #2
}
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	40012c00 	.word	0x40012c00
 8007f2c:	40000400 	.word	0x40000400

08007f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d044      	beq.n	8007fc2 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 8007f38:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f3a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8007f3e:	4602      	mov	r2, r0
 8007f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f44:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f48:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f4e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f54:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f58:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f5e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f64:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f66:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f68:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f6e:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007f70:	4c15      	ldr	r4, [pc, #84]	; (8007fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007f72:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f74:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007f78:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f7a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007f7e:	d00a      	beq.n	8007f96 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8007f80:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007f84:	42a0      	cmp	r0, r4
 8007f86:	d006      	beq.n	8007f96 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8007f88:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007f8a:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007f8c:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8007f90:	4608      	mov	r0, r1
}
 8007f92:	bc30      	pop	{r4, r5}
 8007f94:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007f96:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f98:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f9e:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fa0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fa4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fa8:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fb0:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fb2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007fb6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fb8:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007fba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007fbe:	430b      	orrs	r3, r1
 8007fc0:	e7e2      	b.n	8007f88 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007fc2:	2002      	movs	r0, #2
}
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	40012c00 	.word	0x40012c00

08007fcc <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d048      	beq.n	8008066 <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 8007fd4:	6813      	ldr	r3, [r2, #0]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	2b0f      	cmp	r3, #15
{
 8007fda:	b4f0      	push	{r4, r5, r6, r7}
 8007fdc:	d826      	bhi.n	800802c <HAL_TIMEx_ConfigBreakInput+0x60>
 8007fde:	4e23      	ldr	r6, [pc, #140]	; (800806c <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8007fe0:	4c23      	ldr	r4, [pc, #140]	; (8008070 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8007fe2:	4f24      	ldr	r7, [pc, #144]	; (8008074 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8007fe4:	4d24      	ldr	r5, [pc, #144]	; (8008078 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8007fe6:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 8007fea:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8007fee:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8007ff2:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8007ff6:	2901      	cmp	r1, #1
 8007ff8:	d01e      	beq.n	8008038 <HAL_TIMEx_ConfigBreakInput+0x6c>
 8007ffa:	2902      	cmp	r1, #2
 8007ffc:	d110      	bne.n	8008020 <HAL_TIMEx_ConfigBreakInput+0x54>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8007ffe:	6801      	ldr	r1, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008000:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF2;
 8008002:	f8d1 c064 	ldr.w	ip, [r1, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008006:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008008:	40bb      	lsls	r3, r7
 800800a:	ea83 030c 	eor.w	r3, r3, ip
 800800e:	4033      	ands	r3, r6
 8008010:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008014:	fa02 f505 	lsl.w	r5, r2, r5
 8008018:	405d      	eors	r5, r3
 800801a:	402c      	ands	r4, r5
 800801c:	4063      	eors	r3, r4

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800801e:	664b      	str	r3, [r1, #100]	; 0x64
    }
    default:
      break;
  }

  __HAL_UNLOCK(htim);
 8008020:	2300      	movs	r3, #0
 8008022:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8008026:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8008028:	4618      	mov	r0, r3
}
 800802a:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 800802c:	2500      	movs	r5, #0
  switch (BreakInput)
 800802e:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8008030:	462f      	mov	r7, r5
 8008032:	462c      	mov	r4, r5
 8008034:	462e      	mov	r6, r5
  switch (BreakInput)
 8008036:	d1e0      	bne.n	8007ffa <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 8008038:	6801      	ldr	r1, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800803a:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 800803c:	f8d1 c060 	ldr.w	ip, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008040:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008042:	40bb      	lsls	r3, r7
 8008044:	ea83 030c 	eor.w	r3, r3, ip
 8008048:	4033      	ands	r3, r6
 800804a:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800804e:	fa02 f505 	lsl.w	r5, r2, r5
 8008052:	405d      	eors	r5, r3
 8008054:	402c      	ands	r4, r5
 8008056:	4063      	eors	r3, r4
      htim->Instance->AF1 = tmporx;
 8008058:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 800805a:	2300      	movs	r3, #0
 800805c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8008060:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8008062:	4618      	mov	r0, r3
}
 8008064:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008066:	2002      	movs	r0, #2
}
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	0800a7d0 	.word	0x0800a7d0
 8008070:	0800a810 	.word	0x0800a810
 8008074:	0800a850 	.word	0x0800a850
 8008078:	0800a890 	.word	0x0800a890

0800807c <HAL_TIMEx_CommutCallback>:
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop

08008080 <HAL_TIMEx_BreakCallback>:
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop

08008084 <HAL_TIMEx_Break2Callback>:
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop

08008088 <HAL_TIMEx_EncoderIndexCallback>:
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop

0800808c <HAL_TIMEx_DirectionChangeCallback>:
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop

08008090 <HAL_TIMEx_IndexErrorCallback>:
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop

08008094 <HAL_TIMEx_TransitionErrorCallback>:
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop

08008098 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008098:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800809a:	07da      	lsls	r2, r3, #31
{
 800809c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800809e:	d506      	bpl.n	80080ae <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080a0:	6801      	ldr	r1, [r0, #0]
 80080a2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80080a4:	684a      	ldr	r2, [r1, #4]
 80080a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80080aa:	4322      	orrs	r2, r4
 80080ac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ae:	079c      	lsls	r4, r3, #30
 80080b0:	d506      	bpl.n	80080c0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080b2:	6801      	ldr	r1, [r0, #0]
 80080b4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80080b6:	684a      	ldr	r2, [r1, #4]
 80080b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80080bc:	4322      	orrs	r2, r4
 80080be:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080c0:	0759      	lsls	r1, r3, #29
 80080c2:	d506      	bpl.n	80080d2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080c4:	6801      	ldr	r1, [r0, #0]
 80080c6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80080c8:	684a      	ldr	r2, [r1, #4]
 80080ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080ce:	4322      	orrs	r2, r4
 80080d0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d2:	071a      	lsls	r2, r3, #28
 80080d4:	d506      	bpl.n	80080e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080d6:	6801      	ldr	r1, [r0, #0]
 80080d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80080da:	684a      	ldr	r2, [r1, #4]
 80080dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080e0:	4322      	orrs	r2, r4
 80080e2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080e4:	06dc      	lsls	r4, r3, #27
 80080e6:	d506      	bpl.n	80080f6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080e8:	6801      	ldr	r1, [r0, #0]
 80080ea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80080ec:	688a      	ldr	r2, [r1, #8]
 80080ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080f2:	4322      	orrs	r2, r4
 80080f4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080f6:	0699      	lsls	r1, r3, #26
 80080f8:	d506      	bpl.n	8008108 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080fa:	6801      	ldr	r1, [r0, #0]
 80080fc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80080fe:	688a      	ldr	r2, [r1, #8]
 8008100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008104:	4322      	orrs	r2, r4
 8008106:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008108:	065a      	lsls	r2, r3, #25
 800810a:	d509      	bpl.n	8008120 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800810c:	6801      	ldr	r1, [r0, #0]
 800810e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008110:	684a      	ldr	r2, [r1, #4]
 8008112:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008116:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008118:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800811c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800811e:	d00b      	beq.n	8008138 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008120:	061b      	lsls	r3, r3, #24
 8008122:	d506      	bpl.n	8008132 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008124:	6802      	ldr	r2, [r0, #0]
 8008126:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008128:	6853      	ldr	r3, [r2, #4]
 800812a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800812e:	430b      	orrs	r3, r1
 8008130:	6053      	str	r3, [r2, #4]
  }
}
 8008132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008136:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008138:	684a      	ldr	r2, [r1, #4]
 800813a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800813c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008140:	4322      	orrs	r2, r4
 8008142:	604a      	str	r2, [r1, #4]
 8008144:	e7ec      	b.n	8008120 <UART_AdvFeatureConfig+0x88>
 8008146:	bf00      	nop

08008148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008148:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814a:	2300      	movs	r3, #0
{
 800814c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008152:	f7fc fc47 	bl	80049e4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800815c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800815e:	d40d      	bmi.n	800817c <UART_CheckIdleState+0x34>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	0752      	lsls	r2, r2, #29
 8008164:	d431      	bmi.n	80081ca <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008166:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008168:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 800816a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800816e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  return HAL_OK;
 8008172:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8008174:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008178:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800817a:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800817c:	69da      	ldr	r2, [r3, #28]
 800817e:	0292      	lsls	r2, r2, #10
 8008180:	d4ee      	bmi.n	8008160 <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008182:	f7fc fc2f 	bl	80049e4 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008186:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008188:	1b40      	subs	r0, r0, r5
 800818a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800818e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008190:	d22c      	bcs.n	80081ec <UART_CheckIdleState+0xa4>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008192:	0750      	lsls	r0, r2, #29
 8008194:	d5f2      	bpl.n	800817c <UART_CheckIdleState+0x34>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008196:	69da      	ldr	r2, [r3, #28]
 8008198:	0511      	lsls	r1, r2, #20
 800819a:	d5ef      	bpl.n	800817c <UART_CheckIdleState+0x34>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800819c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081aa:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ac:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ae:	f021 0101 	bic.w	r1, r1, #1
 80081b2:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80081b4:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 80081b6:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 80081ba:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 80081be:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 80081c0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081c4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 80081c8:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	0258      	lsls	r0, r3, #9
 80081ce:	d4ca      	bmi.n	8008166 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d0:	f7fc fc08 	bl	80049e4 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80081d4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d6:	1b40      	subs	r0, r0, r5
 80081d8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80081dc:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081de:	d205      	bcs.n	80081ec <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081e0:	0751      	lsls	r1, r2, #29
 80081e2:	d5f2      	bpl.n	80081ca <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081e4:	69da      	ldr	r2, [r3, #28]
 80081e6:	0512      	lsls	r2, r2, #20
 80081e8:	d5ef      	bpl.n	80081ca <UART_CheckIdleState+0x82>
 80081ea:	e7d7      	b.n	800819c <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80081ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f2:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 80081f4:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f6:	f022 0201 	bic.w	r2, r2, #1
 80081fa:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80081fc:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80081fe:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8008202:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8008206:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8008208:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 800820c:	bd38      	pop	{r3, r4, r5, pc}
 800820e:	bf00      	nop

08008210 <HAL_UART_Init>:
  if (huart == NULL)
 8008210:	2800      	cmp	r0, #0
 8008212:	f000 817f 	beq.w	8008514 <HAL_UART_Init+0x304>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008216:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800821a:	b570      	push	{r4, r5, r6, lr}
 800821c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800821e:	2b00      	cmp	r3, #0
 8008220:	d056      	beq.n	80082d0 <HAL_UART_Init+0xc0>
  __HAL_UART_DISABLE(huart);
 8008222:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008224:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008226:	49c1      	ldr	r1, [pc, #772]	; (800852c <HAL_UART_Init+0x31c>)
  huart->gState = HAL_UART_STATE_BUSY;
 8008228:	2224      	movs	r2, #36	; 0x24
 800822a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800822e:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008230:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8008232:	f020 0001 	bic.w	r0, r0, #1
 8008236:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008238:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800823a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800823c:	4332      	orrs	r2, r6
 800823e:	4302      	orrs	r2, r0
 8008240:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008242:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008244:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008246:	430a      	orrs	r2, r1
 8008248:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800824e:	49b8      	ldr	r1, [pc, #736]	; (8008530 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008250:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008254:	432a      	orrs	r2, r5
 8008256:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008258:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800825a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800825c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800825e:	d03c      	beq.n	80082da <HAL_UART_Init+0xca>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008260:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008264:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008268:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800826c:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800826e:	430a      	orrs	r2, r1
 8008270:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008274:	49af      	ldr	r1, [pc, #700]	; (8008534 <HAL_UART_Init+0x324>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008276:	f022 020f 	bic.w	r2, r2, #15
 800827a:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800827c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800827e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008280:	d012      	beq.n	80082a8 <HAL_UART_Init+0x98>
 8008282:	4aad      	ldr	r2, [pc, #692]	; (8008538 <HAL_UART_Init+0x328>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d07b      	beq.n	8008380 <HAL_UART_Init+0x170>
 8008288:	4aac      	ldr	r2, [pc, #688]	; (800853c <HAL_UART_Init+0x32c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	f000 8130 	beq.w	80084f0 <HAL_UART_Init+0x2e0>
 8008290:	4aab      	ldr	r2, [pc, #684]	; (8008540 <HAL_UART_Init+0x330>)
 8008292:	4293      	cmp	r3, r2
 8008294:	f000 80cf 	beq.w	8008436 <HAL_UART_Init+0x226>
  huart->NbRxDataToProcess = 1;
 8008298:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800829c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800829e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80082a2:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80082a4:	2001      	movs	r0, #1
 80082a6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082a8:	4ba6      	ldr	r3, [pc, #664]	; (8008544 <HAL_UART_Init+0x334>)
 80082aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	f240 80d7 	bls.w	8008468 <HAL_UART_Init+0x258>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80082be:	f000 8131 	beq.w	8008524 <HAL_UART_Init+0x314>
        pclk = HAL_RCC_GetPCLK2Freq();
 80082c2:	f7fe fe3f 	bl	8006f44 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f000 80d1 	beq.w	800846e <HAL_UART_Init+0x25e>
 80082cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80082ce:	e081      	b.n	80083d4 <HAL_UART_Init+0x1c4>
    huart->Lock = HAL_UNLOCKED;
 80082d0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80082d4:	f7fc f982 	bl	80045dc <HAL_UART_MspInit>
 80082d8:	e7a3      	b.n	8008222 <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082da:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80082de:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80082e2:	430a      	orrs	r2, r1
 80082e4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ea:	4896      	ldr	r0, [pc, #600]	; (8008544 <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082ec:	f022 020f 	bic.w	r2, r2, #15
 80082f0:	430a      	orrs	r2, r1
 80082f2:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082f4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80082f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008300:	f000 8134 	beq.w	800856c <HAL_UART_Init+0x35c>
 8008304:	d80c      	bhi.n	8008320 <HAL_UART_Init+0x110>
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 812b 	beq.w	8008562 <HAL_UART_Init+0x352>
 800830c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008310:	d1c2      	bne.n	8008298 <HAL_UART_Init+0x88>
        pclk = HAL_RCC_GetSysClockFreq();
 8008312:	f7fe fcb5 	bl	8006c80 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008316:	2800      	cmp	r0, #0
 8008318:	f000 80a9 	beq.w	800846e <HAL_UART_Init+0x25e>
 800831c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800831e:	e004      	b.n	800832a <HAL_UART_Init+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008324:	d1b8      	bne.n	8008298 <HAL_UART_Init+0x88>
        pclk = (uint32_t) LSE_VALUE;
 8008326:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800832a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800832c:	4b86      	ldr	r3, [pc, #536]	; (8008548 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800832e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008332:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8008336:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800833a:	42b3      	cmp	r3, r6
 800833c:	d3ac      	bcc.n	8008298 <HAL_UART_Init+0x88>
 800833e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8008342:	d8a9      	bhi.n	8008298 <HAL_UART_Init+0x88>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008344:	2600      	movs	r6, #0
 8008346:	2300      	movs	r3, #0
 8008348:	4631      	mov	r1, r6
 800834a:	f7f8 fa73 	bl	8000834 <__aeabi_uldivmod>
 800834e:	020b      	lsls	r3, r1, #8
 8008350:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008354:	0202      	lsls	r2, r0, #8
 8008356:	0868      	lsrs	r0, r5, #1
 8008358:	1810      	adds	r0, r2, r0
 800835a:	f143 0100 	adc.w	r1, r3, #0
 800835e:	462a      	mov	r2, r5
 8008360:	4633      	mov	r3, r6
 8008362:	f7f8 fa67 	bl	8000834 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008366:	4b79      	ldr	r3, [pc, #484]	; (800854c <HAL_UART_Init+0x33c>)
 8008368:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800836c:	429a      	cmp	r2, r3
 800836e:	d893      	bhi.n	8008298 <HAL_UART_Init+0x88>
          huart->Instance->BRR = usartdiv;
 8008370:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8008372:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8008376:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8008378:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800837c:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 800837e:	e043      	b.n	8008408 <HAL_UART_Init+0x1f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008380:	4b70      	ldr	r3, [pc, #448]	; (8008544 <HAL_UART_Init+0x334>)
 8008382:	4a73      	ldr	r2, [pc, #460]	; (8008550 <HAL_UART_Init+0x340>)
 8008384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008388:	f003 030c 	and.w	r3, r3, #12
 800838c:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800838e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008392:	d079      	beq.n	8008488 <HAL_UART_Init+0x278>
    switch (clocksource)
 8008394:	2b08      	cmp	r3, #8
 8008396:	f63f af7f 	bhi.w	8008298 <HAL_UART_Init+0x88>
 800839a:	a201      	add	r2, pc, #4	; (adr r2, 80083a0 <HAL_UART_Init+0x190>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	08008463 	.word	0x08008463
 80083a4:	080082c3 	.word	0x080082c3
 80083a8:	08008433 	.word	0x08008433
 80083ac:	08008299 	.word	0x08008299
 80083b0:	08008457 	.word	0x08008457
 80083b4:	08008299 	.word	0x08008299
 80083b8:	08008299 	.word	0x08008299
 80083bc:	08008299 	.word	0x08008299
 80083c0:	080083d1 	.word	0x080083d1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083c4:	2b30      	cmp	r3, #48	; 0x30
 80083c6:	f47f af67 	bne.w	8008298 <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80083ce:	d074      	beq.n	80084ba <HAL_UART_Init+0x2aa>
 80083d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083d4:	6862      	ldr	r2, [r4, #4]
 80083d6:	4b5c      	ldr	r3, [pc, #368]	; (8008548 <HAL_UART_Init+0x338>)
 80083d8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80083dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80083e0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80083e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083e8:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ea:	f1a3 0110 	sub.w	r1, r3, #16
 80083ee:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80083f2:	4291      	cmp	r1, r2
 80083f4:	f63f af50 	bhi.w	8008298 <HAL_UART_Init+0x88>
        huart->Instance->BRR = usartdiv;
 80083f8:	6820      	ldr	r0, [r4, #0]
 80083fa:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 80083fc:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80083fe:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008402:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008406:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008408:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800840a:	2b00      	cmp	r3, #0
 800840c:	d138      	bne.n	8008480 <HAL_UART_Init+0x270>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800841e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8008426:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8008428:	601a      	str	r2, [r3, #0]
}
 800842a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 800842e:	f7ff be8b 	b.w	8008148 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8008432:	4848      	ldr	r0, [pc, #288]	; (8008554 <HAL_UART_Init+0x344>)
 8008434:	e7ce      	b.n	80083d4 <HAL_UART_Init+0x1c4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008436:	4b43      	ldr	r3, [pc, #268]	; (8008544 <HAL_UART_Init+0x334>)
 8008438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	f000 8095 	beq.w	8008570 <HAL_UART_Init+0x360>
 8008446:	d861      	bhi.n	800850c <HAL_UART_Init+0x2fc>
 8008448:	b143      	cbz	r3, 800845c <HAL_UART_Init+0x24c>
 800844a:	2b40      	cmp	r3, #64	; 0x40
 800844c:	f47f af24 	bne.w	8008298 <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008450:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008454:	d060      	beq.n	8008518 <HAL_UART_Init+0x308>
        pclk = HAL_RCC_GetSysClockFreq();
 8008456:	f7fe fc13 	bl	8006c80 <HAL_RCC_GetSysClockFreq>
        break;
 800845a:	e734      	b.n	80082c6 <HAL_UART_Init+0xb6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800845c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008460:	d07c      	beq.n	800855c <HAL_UART_Init+0x34c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008462:	f7fe fd5d 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
        break;
 8008466:	e72e      	b.n	80082c6 <HAL_UART_Init+0xb6>
 8008468:	4a3b      	ldr	r2, [pc, #236]	; (8008558 <HAL_UART_Init+0x348>)
 800846a:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800846c:	e78f      	b.n	800838e <HAL_UART_Init+0x17e>
  huart->RxISR = NULL;
 800846e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008470:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008474:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 8008476:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800847a:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0c6      	beq.n	800840e <HAL_UART_Init+0x1fe>
    UART_AdvFeatureConfig(huart);
 8008480:	4620      	mov	r0, r4
 8008482:	f7ff fe09 	bl	8008098 <UART_AdvFeatureConfig>
 8008486:	e7c2      	b.n	800840e <HAL_UART_Init+0x1fe>
    switch (clocksource)
 8008488:	2b08      	cmp	r3, #8
 800848a:	f63f af05 	bhi.w	8008298 <HAL_UART_Init+0x88>
 800848e:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <HAL_UART_Init+0x284>)
 8008490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008494:	0800855d 	.word	0x0800855d
 8008498:	08008525 	.word	0x08008525
 800849c:	080084b9 	.word	0x080084b9
 80084a0:	08008299 	.word	0x08008299
 80084a4:	08008519 	.word	0x08008519
 80084a8:	08008299 	.word	0x08008299
 80084ac:	08008299 	.word	0x08008299
 80084b0:	08008299 	.word	0x08008299
 80084b4:	080084bb 	.word	0x080084bb
        pclk = (uint32_t) HSI_VALUE;
 80084b8:	4826      	ldr	r0, [pc, #152]	; (8008554 <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	4922      	ldr	r1, [pc, #136]	; (8008548 <HAL_UART_Init+0x338>)
 80084be:	0853      	lsrs	r3, r2, #1
 80084c0:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 80084c4:	fbb0 f0f1 	udiv	r0, r0, r1
 80084c8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80084cc:	fbb0 f0f2 	udiv	r0, r0, r2
 80084d0:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084d2:	f1a2 0110 	sub.w	r1, r2, #16
 80084d6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80084da:	4299      	cmp	r1, r3
 80084dc:	f63f aedc 	bhi.w	8008298 <HAL_UART_Init+0x88>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084e0:	f020 030f 	bic.w	r3, r0, #15
 80084e4:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084e6:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 80084ea:	6820      	ldr	r0, [r4, #0]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	e784      	b.n	80083fa <HAL_UART_Init+0x1ea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084f0:	4b14      	ldr	r3, [pc, #80]	; (8008544 <HAL_UART_Init+0x334>)
 80084f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d038      	beq.n	8008570 <HAL_UART_Init+0x360>
 80084fe:	f63f af61 	bhi.w	80083c4 <HAL_UART_Init+0x1b4>
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0aa      	beq.n	800845c <HAL_UART_Init+0x24c>
 8008506:	2b10      	cmp	r3, #16
 8008508:	d0a2      	beq.n	8008450 <HAL_UART_Init+0x240>
 800850a:	e6c5      	b.n	8008298 <HAL_UART_Init+0x88>
 800850c:	2bc0      	cmp	r3, #192	; 0xc0
 800850e:	f43f af5c 	beq.w	80083ca <HAL_UART_Init+0x1ba>
 8008512:	e6c1      	b.n	8008298 <HAL_UART_Init+0x88>
}
 8008514:	2001      	movs	r0, #1
 8008516:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8008518:	f7fe fbb2 	bl	8006c80 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800851c:	2800      	cmp	r0, #0
 800851e:	d0a6      	beq.n	800846e <HAL_UART_Init+0x25e>
 8008520:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008522:	e7ca      	b.n	80084ba <HAL_UART_Init+0x2aa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008524:	f7fe fd0e 	bl	8006f44 <HAL_RCC_GetPCLK2Freq>
        break;
 8008528:	e7f8      	b.n	800851c <HAL_UART_Init+0x30c>
 800852a:	bf00      	nop
 800852c:	cfff69f3 	.word	0xcfff69f3
 8008530:	40008000 	.word	0x40008000
 8008534:	40013800 	.word	0x40013800
 8008538:	40004400 	.word	0x40004400
 800853c:	40004800 	.word	0x40004800
 8008540:	40004c00 	.word	0x40004c00
 8008544:	40021000 	.word	0x40021000
 8008548:	0800a8e4 	.word	0x0800a8e4
 800854c:	000ffcff 	.word	0x000ffcff
 8008550:	0800a8d4 	.word	0x0800a8d4
 8008554:	00f42400 	.word	0x00f42400
 8008558:	0800a8d0 	.word	0x0800a8d0
        pclk = HAL_RCC_GetPCLK1Freq();
 800855c:	f7fe fce0 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
        break;
 8008560:	e7dc      	b.n	800851c <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008562:	f7fe fcdd 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008566:	2800      	cmp	r0, #0
 8008568:	d081      	beq.n	800846e <HAL_UART_Init+0x25e>
 800856a:	e6d7      	b.n	800831c <HAL_UART_Init+0x10c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800856c:	4803      	ldr	r0, [pc, #12]	; (800857c <HAL_UART_Init+0x36c>)
 800856e:	e6dc      	b.n	800832a <HAL_UART_Init+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008570:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8008574:	4801      	ldr	r0, [pc, #4]	; (800857c <HAL_UART_Init+0x36c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008576:	f47f af2d 	bne.w	80083d4 <HAL_UART_Init+0x1c4>
 800857a:	e79e      	b.n	80084ba <HAL_UART_Init+0x2aa>
 800857c:	00f42400 	.word	0x00f42400

08008580 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008580:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8008584:	2a01      	cmp	r2, #1
 8008586:	d017      	beq.n	80085b8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008588:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800858a:	2124      	movs	r1, #36	; 0x24
{
 800858c:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800858e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 8008592:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008594:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008596:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008598:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800859a:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800859e:	f024 0401 	bic.w	r4, r4, #1
 80085a2:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80085a4:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085a6:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085a8:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085aa:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 80085ae:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80085b0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80085b4:	bc30      	pop	{r4, r5}
 80085b6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80085b8:	2002      	movs	r0, #2
}
 80085ba:	4770      	bx	lr

080085bc <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085bc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80085c0:	2a01      	cmp	r2, #1
 80085c2:	d033      	beq.n	800862c <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 80085c4:	4603      	mov	r3, r0
 80085c6:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085c8:	681a      	ldr	r2, [r3, #0]
{
 80085ca:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80085cc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085d0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085d2:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085d4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80085d6:	f020 0001 	bic.w	r0, r0, #1
 80085da:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085dc:	6890      	ldr	r0, [r2, #8]
 80085de:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80085e2:	4301      	orrs	r1, r0
 80085e4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085e6:	b1f5      	cbz	r5, 8008626 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085e8:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085ea:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085ec:	4810      	ldr	r0, [pc, #64]	; (8008630 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80085ee:	4f11      	ldr	r7, [pc, #68]	; (8008634 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085f0:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085f4:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085f6:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085f8:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80085fa:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80085fc:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085fe:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008600:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008602:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008606:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800860a:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800860e:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8008610:	2520      	movs	r5, #32
 8008612:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008616:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8008618:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800861c:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800861e:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8008622:	bcf0      	pop	{r4, r5, r6, r7}
 8008624:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8008626:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008628:	4608      	mov	r0, r1
 800862a:	e7ee      	b.n	800860a <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800862c:	2002      	movs	r0, #2
}
 800862e:	4770      	bx	lr
 8008630:	0800a904 	.word	0x0800a904
 8008634:	0800a8fc 	.word	0x0800a8fc

08008638 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8008638:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800863c:	2a01      	cmp	r2, #1
 800863e:	d033      	beq.n	80086a8 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8008640:	4603      	mov	r3, r0
 8008642:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008644:	681a      	ldr	r2, [r3, #0]
{
 8008646:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8008648:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800864c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800864e:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008650:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8008652:	f020 0001 	bic.w	r0, r0, #1
 8008656:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008658:	6890      	ldr	r0, [r2, #8]
 800865a:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800865e:	4301      	orrs	r1, r0
 8008660:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008662:	b1f5      	cbz	r5, 80086a2 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008664:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008666:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008668:	4810      	ldr	r0, [pc, #64]	; (80086ac <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800866a:	4f11      	ldr	r7, [pc, #68]	; (80086b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800866c:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008670:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008672:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008674:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8008676:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008678:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800867a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800867c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800867e:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008682:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008686:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800868a:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800868c:	2520      	movs	r5, #32
 800868e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008692:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8008694:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8008698:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800869a:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800869e:	bcf0      	pop	{r4, r5, r6, r7}
 80086a0:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80086a2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80086a4:	4608      	mov	r0, r1
 80086a6:	e7ee      	b.n	8008686 <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80086a8:	2002      	movs	r0, #2
}
 80086aa:	4770      	bx	lr
 80086ac:	0800a904 	.word	0x0800a904
 80086b0:	0800a8fc 	.word	0x0800a8fc

080086b4 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80086b4:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80086b6:	8840      	ldrh	r0, [r0, #2]
 80086b8:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80086bc:	0c00      	lsrs	r0, r0, #16
 80086be:	4770      	bx	lr

080086c0 <Circle_Limitation>:

#if defined CIRCLE_LIMITATION_SQRT_M0
const uint16_t SqrtTable[1025] = SQRT_CIRCLE_LIMITATION;
#endif
__weak qd_t Circle_Limitation(CircleLimitation_Handle_t * pHandle, qd_t Vqd)
{
 80086c0:	b570      	push	{r4, r5, r6, lr}
  int32_t vd_square_limit;
  int32_t new_q;
  int32_t new_d;
  qd_t Local_Vqd=Vqd;

  MaxModule = pHandle->MaxModule;
 80086c2:	8803      	ldrh	r3, [r0, #0]
 80086c4:	140c      	asrs	r4, r1, #16
{
 80086c6:	b084      	sub	sp, #16
 80086c8:	b20d      	sxth	r5, r1

  square_q = (int32_t)(Vqd.q) * Vqd.q;
  square_d = (int32_t)(Vqd.d) * Vqd.d;
 80086ca:	fb04 f204 	mul.w	r2, r4, r4
{
 80086ce:	9101      	str	r1, [sp, #4]
  square_limit = MaxModule * MaxModule;
 80086d0:	fb03 f303 	mul.w	r3, r3, r3
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
  square_sum = square_q + square_d;
 80086d4:	fb05 2105 	mla	r1, r5, r5, r2

  if (square_sum > square_limit)
 80086d8:	428b      	cmp	r3, r1
 80086da:	da10      	bge.n	80086fe <Circle_Limitation+0x3e>
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
 80086dc:	8846      	ldrh	r6, [r0, #2]
 80086de:	fb06 f006 	mul.w	r0, r6, r6
  {
    if(square_d <= vd_square_limit)
 80086e2:	4282      	cmp	r2, r0
 80086e4:	dd14      	ble.n	8008710 <Circle_Limitation+0x50>
      new_d = Vqd.d;
    }
    else
    {
      new_d = pHandle->MaxVd;
      if(Vqd.d < 0)
 80086e6:	2c00      	cmp	r4, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
      square_temp = (square_limit - vd_square_limit)/1048576;
      new_q = SqrtTable[square_temp];
#else
      square_temp = square_limit - vd_square_limit;
      new_q = MCM_Sqrt(square_temp);
 80086e8:	eba3 0000 	sub.w	r0, r3, r0
        new_d = -new_d;
 80086ec:	bfb8      	it	lt
 80086ee:	4276      	neglt	r6, r6
      new_q = MCM_Sqrt(square_temp);
 80086f0:	f7f9 fd66 	bl	80021c0 <MCM_Sqrt>
#endif
      if(Vqd.q < 0)
 80086f4:	2d00      	cmp	r5, #0
      {
        new_q = - new_q;
 80086f6:	bfb8      	it	lt
 80086f8:	4240      	neglt	r0, r0
 80086fa:	b234      	sxth	r4, r6
      }
    }
    Local_Vqd.q = new_q;
 80086fc:	b205      	sxth	r5, r0
    Local_Vqd.d = new_d;
  }
  return(Local_Vqd);
 80086fe:	b2ad      	uxth	r5, r5
 8008700:	2000      	movs	r0, #0
 8008702:	b2a4      	uxth	r4, r4
 8008704:	f365 000f 	bfi	r0, r5, #0, #16
 8008708:	f364 401f 	bfi	r0, r4, #16, #16
}
 800870c:	b004      	add	sp, #16
 800870e:	bd70      	pop	{r4, r5, r6, pc}
      new_q = MCM_Sqrt(square_temp);
 8008710:	1a98      	subs	r0, r3, r2
 8008712:	f7f9 fd55 	bl	80021c0 <MCM_Sqrt>
      if(Vqd.q < 0)
 8008716:	2d00      	cmp	r5, #0
 8008718:	daf0      	bge.n	80086fc <Circle_Limitation+0x3c>
        new_q = -new_q;
 800871a:	4240      	negs	r0, r0
 800871c:	e7ee      	b.n	80086fc <Circle_Limitation+0x3c>
 800871e:	bf00      	nop

08008720 <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 8008720:	b410      	push	{r4}
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 8008722:	2400      	movs	r4, #0
 8008724:	81c4      	strh	r4, [r0, #14]
  pHandle->pVSS = pVSS;
 8008726:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->EncRestart = false;
}
 800872a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pENC = pENC;
 800872e:	6083      	str	r3, [r0, #8]
}
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop

08008734 <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 8008734:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 8008736:	2200      	movs	r2, #0
{
 8008738:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 800873a:	4611      	mov	r1, r2
 800873c:	6840      	ldr	r0, [r0, #4]
 800873e:	f001 fe79 	bl	800a434 <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 8008742:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8008746:	6860      	ldr	r0, [r4, #4]
 8008748:	f001 fe6c 	bl	800a424 <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	2100      	movs	r1, #0
 8008750:	f001 fd0e 	bl	800a170 <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 8008754:	2200      	movs	r2, #0
 8008756:	4611      	mov	r1, r2
 8008758:	6820      	ldr	r0, [r4, #0]
 800875a:	f001 fd0d 	bl	800a178 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 800875e:	8ae2      	ldrh	r2, [r4, #22]
 8008760:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	f001 fd07 	bl	800a178 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 800876a:	8ae1      	ldrh	r1, [r4, #22]
 800876c:	8a23      	ldrh	r3, [r4, #16]
  wAux /= 1000u;
 800876e:	4a04      	ldr	r2, [pc, #16]	; (8008780 <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8008770:	fb03 f301 	mul.w	r3, r3, r1
  wAux /= 1000u;
 8008774:	fba2 2303 	umull	r2, r3, r2, r3
 8008778:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 800877a:	3301      	adds	r3, #1
 800877c:	81a3      	strh	r3, [r4, #12]
}
 800877e:	bd10      	pop	{r4, pc}
 8008780:	10624dd3 	.word	0x10624dd3

08008784 <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 8008784:	8983      	ldrh	r3, [r0, #12]
 8008786:	b13b      	cbz	r3, 8008798 <EAC_Exec+0x14>
  {
    pHandle->hRemainingTicks--;
 8008788:	3b01      	subs	r3, #1
 800878a:	b29b      	uxth	r3, r3
{
 800878c:	b510      	push	{r4, lr}
 800878e:	4604      	mov	r4, r0
    pHandle->hRemainingTicks--;
 8008790:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 8008792:	b11b      	cbz	r3, 800879c <EAC_Exec+0x18>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 8008794:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 8008796:	bd10      	pop	{r4, pc}
  bool retVal = true;
 8008798:	2001      	movs	r0, #1
}
 800879a:	4770      	bx	lr
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 800879c:	7e03      	ldrb	r3, [r0, #24]
 800879e:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 80087a2:	6880      	ldr	r0, [r0, #8]
 80087a4:	fb91 f1f3 	sdiv	r1, r1, r3
 80087a8:	f000 f948 	bl	8008a3c <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 80087ac:	2001      	movs	r0, #1
 80087ae:	73a0      	strb	r0, [r4, #14]
}
 80087b0:	bd10      	pop	{r4, pc}
 80087b2:	bf00      	nop

080087b4 <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 80087b4:	7b80      	ldrb	r0, [r0, #14]
 80087b6:	4770      	bx	lr

080087b8 <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 80087b8:	73c1      	strb	r1, [r0, #15]
}
 80087ba:	4770      	bx	lr

080087bc <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 80087bc:	7bc0      	ldrb	r0, [r0, #15]
 80087be:	4770      	bx	lr

080087c0 <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 80087c0:	6a03      	ldr	r3, [r0, #32]
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80087c2:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 80087c6:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80087c8:	681d      	ldr	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80087ca:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80087ce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80087d2:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 80087d4:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80087d6:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80087da:	601d      	str	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80087dc:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 80087e0:	6259      	str	r1, [r3, #36]	; 0x24
 80087e2:	fbb4 f4f6 	udiv	r4, r4, r6
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80087e6:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80087e8:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80087ea:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 80087ec:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 80087f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80087f4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80087f8:	619a      	str	r2, [r3, #24]
 80087fa:	699a      	ldr	r2, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 80087fc:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8008800:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8008804:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008808:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800880c:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800880e:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	f042 0201 	orr.w	r2, r2, #1
 8008816:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	f042 0201 	orr.w	r2, r2, #1
 800881e:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 8008820:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 8008824:	b13a      	cbz	r2, 8008836 <ENC_Init+0x76>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8008826:	3a01      	subs	r2, #1
 8008828:	b2d2      	uxtb	r2, r2
 800882a:	3201      	adds	r2, #1
  }
}
 800882c:	bc70      	pop	{r4, r5, r6}
 800882e:	0092      	lsls	r2, r2, #2
 8008830:	3028      	adds	r0, #40	; 0x28
 8008832:	f001 be6f 	b.w	800a514 <memset>
 8008836:	bc70      	pop	{r4, r5, r6}
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop

0800883c <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 800883c:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 800883e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 8008842:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8008844:	b13a      	cbz	r2, 8008856 <ENC_Clear+0x1a>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8008846:	3a01      	subs	r2, #1
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	3201      	adds	r2, #1
 800884c:	0092      	lsls	r2, r2, #2
 800884e:	2100      	movs	r1, #0
 8008850:	3028      	adds	r0, #40	; 0x28
 8008852:	f001 fe5f 	bl	800a514 <memset>
  }
  pHandle->SensorIsReliable = true;
 8008856:	2301      	movs	r3, #1
 8008858:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 800885c:	bd10      	pop	{r4, pc}
 800885e:	bf00      	nop

08008860 <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8008860:	6a01      	ldr	r1, [r0, #32]
 8008862:	6e82      	ldr	r2, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 8008864:	6a49      	ldr	r1, [r1, #36]	; 0x24
{
 8008866:	b410      	push	{r4}
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8008868:	b289      	uxth	r1, r1
 800886a:	fb02 f201 	mul.w	r2, r2, r1
{
 800886e:	4603      	mov	r3, r0
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8008870:	2a00      	cmp	r2, #0
 8008872:	bfb8      	it	lt
 8008874:	f64f 70ff 	movwlt	r0, #65535	; 0xffff

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8008878:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 800887c:	689c      	ldr	r4, [r3, #8]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 800887e:	bfb8      	it	lt
 8008880:	1812      	addlt	r2, r2, r0
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8008882:	7858      	ldrb	r0, [r3, #1]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8008884:	1412      	asrs	r2, r2, #16
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8008886:	fb00 f002 	mul.w	r0, r0, r2
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 800888a:	1a51      	subs	r1, r2, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 800888c:	b200      	sxth	r0, r0
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 800888e:	fa04 f181 	sxtah	r1, r4, r1
  pHandle->_Super.hElAngle = elAngle;
 8008892:	8098      	strh	r0, [r3, #4]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 8008894:	f85d 4b04 	ldr.w	r4, [sp], #4
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8008898:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 800889a:	6099      	str	r1, [r3, #8]
}
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop

080088a0 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 80088a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80088a2:	6a03      	ldr	r3, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 80088a4:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80088a8:	68dc      	ldr	r4, [r3, #12]
 80088aa:	f024 0401 	bic.w	r4, r4, #1
 80088ae:	60dc      	str	r4, [r3, #12]
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
  pHandle->TimerOverflowNb = 0;
 80088b0:	2600      	movs	r6, #0
  return (uint32_t)(READ_REG(TIMx->CNT));
 80088b2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  OverflowCntSample = pHandle->TimerOverflowNb;
 80088b4:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
 80088b8:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80088bc:	681e      	ldr	r6, [r3, #0]
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 80088be:	0fef      	lsrs	r7, r5, #31
 80088c0:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80088c4:	bf1c      	itt	ne
 80088c6:	f06f 0601 	mvnne.w	r6, #1
 80088ca:	611e      	strne	r6, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80088cc:	68de      	ldr	r6, [r3, #12]
  OverflowCntSample = pHandle->TimerOverflowNb;
 80088ce:	b2a4      	uxth	r4, r4
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 80088d0:	443c      	add	r4, r7
 80088d2:	f046 0601 	orr.w	r6, r6, #1
 80088d6:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80088da:	60de      	str	r6, [r3, #12]
  {
    pHandle->TimerOverflowError = true;
 80088dc:	bf8a      	itet	hi
 80088de:	2601      	movhi	r6, #1
 80088e0:	f890 6079 	ldrbls.w	r6, [r0, #121]	; 0x79
 80088e4:	f880 6079 	strbhi.w	r6, [r0, #121]	; 0x79
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 80088e8:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 80088ec:	f1bc 0f00 	cmp.w	ip, #0
 80088f0:	f000 808d 	beq.w	8008a0e <ENC_CalcAvrgMecSpeedUnit+0x16e>
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 80088f4:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80088f8:	f890 c078 	ldrb.w	ip, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 80088fc:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8008900:	1aeb      	subs	r3, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008902:	f10c 0c0a 	add.w	ip, ip, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8008906:	fb07 3414 	mls	r4, r7, r4, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800890a:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800890e:	2a00      	cmp	r2, #0
 8008910:	f000 808d 	beq.w	8008a2e <ENC_CalcAvrgMecSpeedUnit+0x18e>
 8008914:	2a01      	cmp	r2, #1
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008916:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008918:	d939      	bls.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800891a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800891c:	2a02      	cmp	r2, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800891e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008920:	d035      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008922:	6b04      	ldr	r4, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008924:	2a03      	cmp	r2, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008926:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008928:	d031      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800892a:	6b44      	ldr	r4, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800892c:	2a04      	cmp	r2, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800892e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008930:	d02d      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008932:	6b84      	ldr	r4, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008934:	2a05      	cmp	r2, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008936:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008938:	d029      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800893a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800893c:	2a06      	cmp	r2, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800893e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008940:	d025      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008942:	6c04      	ldr	r4, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008944:	2a07      	cmp	r2, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008946:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008948:	d021      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800894a:	6c44      	ldr	r4, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800894c:	2a08      	cmp	r2, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800894e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008950:	d01d      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008952:	6c84      	ldr	r4, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008954:	2a09      	cmp	r2, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008956:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008958:	d019      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800895a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800895c:	2a0a      	cmp	r2, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800895e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008960:	d015      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008962:	6d04      	ldr	r4, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008964:	2a0b      	cmp	r2, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008966:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008968:	d011      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800896a:	6d44      	ldr	r4, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800896c:	2a0c      	cmp	r2, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800896e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008970:	d00d      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008972:	6d84      	ldr	r4, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008974:	2a0d      	cmp	r2, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008976:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008978:	d009      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800897a:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800897c:	2a0e      	cmp	r2, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800897e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008980:	d005      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008982:	6e04      	ldr	r4, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008984:	2a0f      	cmp	r2, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008986:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008988:	d001      	beq.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800898a:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800898c:	4423      	add	r3, r4
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 800898e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 8008990:	fb07 f202 	mul.w	r2, r7, r2
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8008994:	fb04 f303 	mul.w	r3, r4, r3
           ( int32_t )( pHandle->SpeedBufferSize );
  wtemp1 /= wtemp2;
 8008998:	fb93 f3f2 	sdiv	r3, r3, r2
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 800899c:	b21f      	sxth	r7, r3
 800899e:	800f      	strh	r7, [r1, #0]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80089a0:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 80089a4:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 80089a8:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 80089ac:	f8b0 e06c 	ldrh.w	lr, [r0, #108]	; 0x6c
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 80089b0:	8187      	strh	r7, [r0, #12]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80089b2:	340a      	adds	r4, #10
  pHandle->DeltaCapturesIndex++;
 80089b4:	3201      	adds	r2, #1
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80089b6:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 80089ba:	69c4      	ldr	r4, [r0, #28]
  pHandle->PreviousCapture = CntCapture;
 80089bc:	f8a0 5072 	strh.w	r5, [r0, #114]	; 0x72
  pHandle->DeltaCapturesIndex++;
 80089c0:	b2d2      	uxtb	r2, r2
 80089c2:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 80089c6:	eba3 020c 	sub.w	r2, r3, ip
 80089ca:	8242      	strh	r2, [r0, #18]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80089cc:	fb07 f30e 	mul.w	r3, r7, lr

  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 80089d0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 80089d4:	f890 7078 	ldrb.w	r7, [r0, #120]	; 0x78
           ( int32_t )pHandle->_Super.bElToMecRatio;
 80089d8:	7845      	ldrb	r5, [r0, #1]
  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 80089da:	42ba      	cmp	r2, r7
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80089dc:	fb05 f303 	mul.w	r3, r5, r3
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 80089e0:	f8b0 506e 	ldrh.w	r5, [r0, #110]	; 0x6e
 80089e4:	fb93 f3f5 	sdiv	r3, r3, r5
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 80089e8:	fb04 f403 	mul.w	r4, r4, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 80089ec:	8b43      	ldrh	r3, [r0, #26]
 80089ee:	fb94 f4f3 	sdiv	r4, r4, r3
  {
    pHandle->DeltaCapturesIndex = 0u;
 80089f2:	bf08      	it	eq
 80089f4:	2300      	moveq	r3, #0
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 80089f6:	81c4      	strh	r4, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 80089f8:	bf08      	it	eq
 80089fa:	f880 3078 	strbeq.w	r3, [r0, #120]	; 0x78
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 80089fe:	b1c6      	cbz	r6, 8008a32 <ENC_CalcAvrgMecSpeedUnit+0x192>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008a00:	78c2      	ldrb	r2, [r0, #3]
 8008a02:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 8008a04:	2300      	movs	r3, #0
 8008a06:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8008a0e:	f8b0 c072 	ldrh.w	ip, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008a12:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8008a16:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8008a1a:	eba5 0c0c 	sub.w	ip, r5, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008a1e:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8008a20:	fb07 c404 	mla	r4, r7, r4, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008a24:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a28:	2a00      	cmp	r2, #0
 8008a2a:	f47f af73 	bne.w	8008914 <ENC_CalcAvrgMecSpeedUnit+0x74>
  int32_t wOverallAngleVariation = 0;
 8008a2e:	4613      	mov	r3, r2
 8008a30:	e7ad      	b.n	800898e <ENC_CalcAvrgMecSpeedUnit+0xee>
}
 8008a32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8008a36:	f001 bb35 	b.w	800a0a4 <SPD_IsMecSpeedReliable>
 8008a3a:	bf00      	nop

08008a3c <ENC_SetMecAngle>:

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8008a3c:	7843      	ldrb	r3, [r0, #1]
  pHandle->_Super.hMecAngle = hMecAngle;
 8008a3e:	80c1      	strh	r1, [r0, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8008a40:	fb03 f301 	mul.w	r3, r3, r1
 8008a44:	8083      	strh	r3, [r0, #4]
  if ( hMecAngle < 0 )
 8008a46:	2900      	cmp	r1, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8008a48:	b28b      	uxth	r3, r1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8008a4a:	6a02      	ldr	r2, [r0, #32]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8008a4c:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 8008a50:	4905      	ldr	r1, [pc, #20]	; (8008a68 <ENC_SetMecAngle+0x2c>)
 8008a52:	bfbc      	itt	lt
 8008a54:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008a58:	b29b      	uxthlt	r3, r3
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8008a5a:	fb03 f300 	mul.w	r3, r3, r0
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8008a5e:	fba1 1303 	umull	r1, r3, r1, r3
 8008a62:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 8008a64:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 8008a66:	4770      	bx	lr
 8008a68:	80008001 	.word	0x80008001

08008a6c <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 8008a6c:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 8008a6e:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 8008a70:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8008a74:	3301      	adds	r3, #1
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop

08008a80 <MCP_ReceivedPacket>:
#include "mcp.h"
#include "register_interface.h"
#include "mc_config.h"

void MCP_ReceivedPacket(MCP_Handle_t * pHandle)
{
 8008a80:	b538      	push	{r3, r4, r5, lr}
  uint16_t * packetHeader;
  uint16_t command;
  uint8_t motorID;
  uint8_t MCPResponse;
  
  if (pHandle->rxLength != 0)
 8008a82:	8983      	ldrh	r3, [r0, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d03c      	beq.n	8008b02 <MCP_ReceivedPacket+0x82>
  {
    packetHeader = (uint16_t *) pHandle->rxBuffer;  
    command = *packetHeader & CMD_MASK;
 8008a88:	6843      	ldr	r3, [r0, #4]
    motorID = (*packetHeader & MOTOR_MASK)-1;
    
    MCI_Handle_t * pMCI = &Mci[motorID];
 8008a8a:	4d3a      	ldr	r5, [pc, #232]	; (8008b74 <MCP_ReceivedPacket+0xf4>)
    command = *packetHeader & CMD_MASK;
 8008a8c:	881a      	ldrh	r2, [r3, #0]
    motorID = (*packetHeader & MOTOR_MASK)-1;
 8008a8e:	f002 0307 	and.w	r3, r2, #7
 8008a92:	3b01      	subs	r3, #1
    MCI_Handle_t * pMCI = &Mci[motorID];
 8008a94:	b2db      	uxtb	r3, r3
    command = *packetHeader & CMD_MASK;
 8008a96:	f022 0207 	bic.w	r2, r2, #7
    MCI_Handle_t * pMCI = &Mci[motorID];
 8008a9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    /* Initialization of the tx length, command which send back data has to increment the txLength (case of Read register)*/
    pHandle->txLength = 0;
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	3a08      	subs	r2, #8
 8008aa2:	4604      	mov	r4, r0
    MCI_Handle_t * pMCI = &Mci[motorID];
 8008aa4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    pHandle->txLength = 0;
 8008aa8:	81c1      	strh	r1, [r0, #14]
    
    switch (command) 
 8008aaa:	2a40      	cmp	r2, #64	; 0x40
 8008aac:	d822      	bhi.n	8008af4 <MCP_ReceivedPacket+0x74>
 8008aae:	e8df f002 	tbb	[pc, r2]
 8008ab2:	2141      	.short	0x2141
 8008ab4:	21212121 	.word	0x21212121
 8008ab8:	21452121 	.word	0x21452121
 8008abc:	21212121 	.word	0x21212121
 8008ac0:	21332121 	.word	0x21332121
 8008ac4:	21212121 	.word	0x21212121
 8008ac8:	212d2121 	.word	0x212d2121
 8008acc:	21212121 	.word	0x21212121
 8008ad0:	21492121 	.word	0x21492121
 8008ad4:	21212121 	.word	0x21212121
 8008ad8:	21292121 	.word	0x21292121
 8008adc:	21212121 	.word	0x21212121
 8008ae0:	21512121 	.word	0x21512121
 8008ae4:	21212121 	.word	0x21212121
 8008ae8:	21572121 	.word	0x21572121
 8008aec:	21212121 	.word	0x21212121
 8008af0:	2121      	.short	0x2121
 8008af2:	3b          	.byte	0x3b
 8008af3:	00          	.byte	0x00
    pHandle->txLength = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	2002      	movs	r0, #2
      case PFC_DISABLE:
      case PFC_FAULT_ACK:
      default :
        MCPResponse = MCP_CMD_UNKNOWN;
      }
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008af8:	68a2      	ldr	r2, [r4, #8]
 8008afa:	54d0      	strb	r0, [r2, r3]
      pHandle->txLength++;
 8008afc:	89e3      	ldrh	r3, [r4, #14]
 8008afe:	3301      	adds	r3, #1
 8008b00:	81e3      	strh	r3, [r4, #14]
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
    /* Nothing to do, txBuffer and txLength have not been modified */
  } 
}
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
          if (MCI_GetSTMState(pMCI) == IDLE)
 8008b04:	4628      	mov	r0, r5
 8008b06:	f7f9 fa37 	bl	8001f78 <MCI_GetSTMState>
 8008b0a:	b128      	cbz	r0, 8008b18 <MCP_ReceivedPacket+0x98>
            MCI_StopMotor(pMCI);
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f7f9 f9eb 	bl	8001ee8 <MCI_StopMotor>
            MCPResponse = MCP_CMD_OK;
 8008b12:	89e3      	ldrh	r3, [r4, #14]
 8008b14:	2000      	movs	r0, #0
 8008b16:	e7ef      	b.n	8008af8 <MCP_ReceivedPacket+0x78>
            MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f7f9 f9db 	bl	8001ed4 <MCI_StartMotor>
 8008b1e:	f080 0001 	eor.w	r0, r0, #1
 8008b22:	89e3      	ldrh	r3, [r4, #14]
 8008b24:	b2c0      	uxtb	r0, r0
 8008b26:	e7e7      	b.n	8008af8 <MCP_ReceivedPacket+0x78>
        MCI_Clear_Iqdref(pMCI);
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f7f9 fa9d 	bl	8002068 <MCI_Clear_Iqdref>
        break;
 8008b2e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008b30:	2000      	movs	r0, #0
        break;
 8008b32:	e7e1      	b.n	8008af8 <MCP_ReceivedPacket+0x78>
        MCPResponse = RI_SetRegCommandParser (pHandle); 
 8008b34:	f7fa f93e 	bl	8002db4 <RI_SetRegCommandParser>
      break;
 8008b38:	89e3      	ldrh	r3, [r4, #14]
 8008b3a:	e7dd      	b.n	8008af8 <MCP_ReceivedPacket+0x78>
        MCPResponse = RI_GetRegCommandParser (pHandle); 
 8008b3c:	f7fa fc22 	bl	8003384 <RI_GetRegCommandParser>
        break;
 8008b40:	89e3      	ldrh	r3, [r4, #14]
 8008b42:	e7d9      	b.n	8008af8 <MCP_ReceivedPacket+0x78>
          if (MCI_GetSTMState(pMCI) == RUN)
 8008b44:	4628      	mov	r0, r5
 8008b46:	f7f9 fa17 	bl	8001f78 <MCI_GetSTMState>
 8008b4a:	2806      	cmp	r0, #6
 8008b4c:	d00c      	beq.n	8008b68 <MCP_ReceivedPacket+0xe8>
        break;
 8008b4e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008b50:	2000      	movs	r0, #0
        break;
 8008b52:	e7d1      	b.n	8008af8 <MCP_ReceivedPacket+0x78>
          MCI_FaultAcknowledged(pMCI);
 8008b54:	4628      	mov	r0, r5
 8008b56:	f7f9 f9cb 	bl	8001ef0 <MCI_FaultAcknowledged>
        break;
 8008b5a:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8008b5c:	2000      	movs	r0, #0
        break;
 8008b5e:	e7cb      	b.n	8008af8 <MCP_ReceivedPacket+0x78>
        MCI_EncoderAlign(pMCI);
 8008b60:	4628      	mov	r0, r5
 8008b62:	f7f9 f9c9 	bl	8001ef8 <MCI_EncoderAlign>
 8008b66:	e7f2      	b.n	8008b4e <MCP_ReceivedPacket+0xce>
            MCI_StopRamp(pMCI);
 8008b68:	4628      	mov	r0, r5
 8008b6a:	f7f9 fa15 	bl	8001f98 <MCI_StopRamp>
 8008b6e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008b70:	2000      	movs	r0, #0
 8008b72:	e7c1      	b.n	8008af8 <MCP_ReceivedPacket+0x78>
 8008b74:	20000b88 	.word	0x20000b88

08008b78 <MCPA_dataLog>:
#include "mcpa.h"

uint32_t GLOBAL_TIMESTAMP = 0;

void MCPA_dataLog (MCPA_Handle_t *pHandle)
{
 8008b78:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008b7a:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
 8008b7e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8008b82:	429a      	cmp	r2, r3
{
 8008b84:	4604      	mov	r4, r0
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008b86:	d003      	beq.n	8008b90 <MCPA_dataLog+0x18>
    }     
  }
  else 
  {
    /* nothing to log just waiting next call to MCPA_datalog*/
    pHandle->HFIndex++;
 8008b88:	3301      	adds	r3, #1
 8008b8a:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
  }
}  
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
    if (pHandle->bufferIndex == 0)
 8008b90:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
    pHandle->HFIndex = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
    if (pHandle->bufferIndex == 0)
 8008b9a:	b1bd      	cbz	r5, 8008bcc <MCPA_dataLog+0x54>
 8008b9c:	6e61      	ldr	r1, [r4, #100]	; 0x64
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8008b9e:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 8008ba2:	42aa      	cmp	r2, r5
 8008ba4:	d25c      	bcs.n	8008c60 <MCPA_dataLog+0xe8>
 8008ba6:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
      if (pHandle->MFRateBuff == 254) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8008baa:	2bfe      	cmp	r3, #254	; 0xfe
 8008bac:	d07a      	beq.n	8008ca4 <MCPA_dataLog+0x12c>
       *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008bae:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
 8008bb2:	534b      	strh	r3, [r1, r5]
       pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008bb4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	3202      	adds	r2, #2
 8008bbc:	2309      	movs	r3, #9
 8008bbe:	6845      	ldr	r5, [r0, #4]
 8008bc0:	b292      	uxth	r2, r2
 8008bc2:	47a8      	blx	r5
       pHandle->bufferIndex = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}  
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
      if ( pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer, (void **) &pHandle->currentBuffer, MCTL_ASYNC))
 8008bcc:	4601      	mov	r1, r0
 8008bce:	2209      	movs	r2, #9
 8008bd0:	f851 0b64 	ldr.w	r0, [r1], #100
 8008bd4:	6803      	ldr	r3, [r0, #0]
 8008bd6:	4798      	blx	r3
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d03c      	beq.n	8008c56 <MCPA_dataLog+0xde>
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8008bdc:	4b76      	ldr	r3, [pc, #472]	; (8008db8 <MCPA_dataLog+0x240>)
        logValue = (uint32_t *) pHandle->currentBuffer;
 8008bde:	6e61      	ldr	r1, [r4, #100]	; 0x64
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	600b      	str	r3, [r1, #0]
        if (pHandle->Mark != pHandle->MarkBuff)
 8008be4:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8008be8:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
        pHandle->MFIndex = 0; /* Restart the motif from scratch at each buffer*/
 8008bec:	f884 507f 	strb.w	r5, [r4, #127]	; 0x7f
        if (pHandle->Mark != pHandle->MarkBuff)
 8008bf0:	429a      	cmp	r2, r3
        pHandle->bufferIndex = 4; 
 8008bf2:	f04f 0504 	mov.w	r5, #4
 8008bf6:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
        if (pHandle->Mark != pHandle->MarkBuff)
 8008bfa:	d0d0      	beq.n	8008b9e <MCPA_dataLog+0x26>
          pHandle->HFNumBuff = pHandle->HFNum;
 8008bfc:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
          pHandle->HFRateBuff = pHandle->HFRate;
 8008c00:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
          pHandle->MFRateBuff = pHandle->MFRate;
 8008c04:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
          pHandle->MFNumBuff = pHandle->MFNum;
 8008c08:	f894 5086 	ldrb.w	r5, [r4, #134]	; 0x86
          pHandle->MarkBuff = pHandle->Mark;
 8008c0c:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008c10:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
          pHandle->HFNumBuff = pHandle->HFNum;
 8008c14:	f884 2083 	strb.w	r2, [r4, #131]	; 0x83
          pHandle->HFRateBuff = pHandle->HFRate;
 8008c18:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          memcpy(pHandle->pHFTableIDBuff, pHandle->pHFTableID, pHandle->HFNum*4); /* We store pointer here, so 4 bytes */
 8008c1c:	0092      	lsls	r2, r2, #2
          pHandle->MFRateBuff = pHandle->MFRate;
 8008c1e:	f884 1085 	strb.w	r1, [r4, #133]	; 0x85
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008c22:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          memcpy(pHandle->pHFTableIDBuff, pHandle->pHFTableID, pHandle->HFNum*4); /* We store pointer here, so 4 bytes */
 8008c26:	1d21      	adds	r1, r4, #4
          pHandle->MFNumBuff = pHandle->MFNum;
 8008c28:	f884 5087 	strb.w	r5, [r4, #135]	; 0x87
          memcpy(pHandle->pHFTableIDBuff, pHandle->pHFTableID, pHandle->HFNum*4); /* We store pointer here, so 4 bytes */
 8008c2c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008c30:	f001 fc62 	bl	800a4f8 <memcpy>
          memcpy(pHandle->pMFTableIDBuff, pHandle->pMFTableID, pHandle->MFNum*4);
 8008c34:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
 8008c38:	f104 011c 	add.w	r1, r4, #28
 8008c3c:	0092      	lsls	r2, r2, #2
 8008c3e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8008c42:	f001 fc59 	bl	800a4f8 <memcpy>
          memcpy(pHandle->MFIDSizeBuff, pHandle->MFIDSize, pHandle->MFNum ); /* 1 size byte per MF ID*/
 8008c46:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
 8008c4a:	f104 0172 	add.w	r1, r4, #114	; 0x72
 8008c4e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8008c52:	f001 fc51 	bl	800a4f8 <memcpy>
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8008c56:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 8008c5a:	2d00      	cmp	r5, #0
 8008c5c:	d19e      	bne.n	8008b9c <MCPA_dataLog+0x24>
}  
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008c60:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
      logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008c64:	1948      	adds	r0, r1, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d057      	beq.n	8008d1a <MCPA_dataLog+0x1a2>
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	4613      	mov	r3, r2
        *logValue16 = *((uint16_t *) pHandle->pHFTableIDBuff[i]);
 8008c6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c72:	3201      	adds	r2, #1
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	f820 3b02 	strh.w	r3, [r0], #2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8008c7c:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008c80:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8008c84:	3502      	adds	r5, #2
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008c86:	b2d3      	uxtb	r3, r2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8008c88:	b2ad      	uxth	r5, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008c8a:	429e      	cmp	r6, r3
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8008c8c:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008c90:	d8ed      	bhi.n	8008c6e <MCPA_dataLog+0xf6>
      if (pHandle->MFRateBuff < 254) 
 8008c92:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
 8008c96:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 8008c9a:	2bfd      	cmp	r3, #253	; 0xfd
 8008c9c:	d942      	bls.n	8008d24 <MCPA_dataLog+0x1ac>
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008c9e:	42aa      	cmp	r2, r5
 8008ca0:	d383      	bcc.n	8008baa <MCPA_dataLog+0x32>
}  
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008ca4:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d080      	beq.n	8008bae <MCPA_dataLog+0x36>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008cac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008cb2:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008cb6:	2b01      	cmp	r3, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008cb8:	4415      	add	r5, r2
 8008cba:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008cbc:	d92a      	bls.n	8008d14 <MCPA_dataLog+0x19c>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008cbe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008cc0:	6812      	ldr	r2, [r2, #0]
 8008cc2:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008cc4:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008cc8:	2b02      	cmp	r3, #2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008cca:	4415      	add	r5, r2
 8008ccc:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008cce:	d021      	beq.n	8008d14 <MCPA_dataLog+0x19c>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008cd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008cd6:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008cda:	2b03      	cmp	r3, #3
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008cdc:	4415      	add	r5, r2
 8008cde:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008ce0:	d018      	beq.n	8008d14 <MCPA_dataLog+0x19c>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008ce2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008ce4:	6812      	ldr	r2, [r2, #0]
 8008ce6:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008ce8:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008cec:	2b04      	cmp	r3, #4
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008cee:	4415      	add	r5, r2
 8008cf0:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008cf2:	d00f      	beq.n	8008d14 <MCPA_dataLog+0x19c>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008cf4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008cf6:	6812      	ldr	r2, [r2, #0]
 8008cf8:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008cfa:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008cfe:	2b05      	cmp	r3, #5
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d00:	4415      	add	r5, r2
 8008d02:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008d04:	d006      	beq.n	8008d14 <MCPA_dataLog+0x19c>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008d06:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	514b      	str	r3, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d0c:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8008d10:	441d      	add	r5, r3
 8008d12:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008d14:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
 8008d18:	e749      	b.n	8008bae <MCPA_dataLog+0x36>
      if (pHandle->MFRateBuff < 254) 
 8008d1a:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
 8008d1e:	2bfd      	cmp	r3, #253	; 0xfd
 8008d20:	f63f af35 	bhi.w	8008b8e <MCPA_dataLog+0x16>
        if (pHandle->MFIndex == pHandle->MFRateBuff)  
 8008d24:	f894 007f 	ldrb.w	r0, [r4, #127]	; 0x7f
 8008d28:	4298      	cmp	r0, r3
 8008d2a:	d006      	beq.n	8008d3a <MCPA_dataLog+0x1c2>
          pHandle->MFIndex ++;
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008d32:	42aa      	cmp	r2, r5
 8008d34:	f4ff af3b 	bcc.w	8008bae <MCPA_dataLog+0x36>
}  
 8008d38:	bd70      	pop	{r4, r5, r6, pc}
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d3a:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
          pHandle->MFIndex = 0;
 8008d3e:	2000      	movs	r0, #0
 8008d40:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0f4      	beq.n	8008d32 <MCPA_dataLog+0x1ba>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008d48:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008d4a:	6800      	ldr	r0, [r0, #0]
 8008d4c:	5148      	str	r0, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d4e:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d52:	2b01      	cmp	r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d54:	4405      	add	r5, r0
 8008d56:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d58:	d92a      	bls.n	8008db0 <MCPA_dataLog+0x238>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008d5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008d5c:	6800      	ldr	r0, [r0, #0]
 8008d5e:	5148      	str	r0, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d60:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d64:	2b02      	cmp	r3, #2
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d66:	4405      	add	r5, r0
 8008d68:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d6a:	d021      	beq.n	8008db0 <MCPA_dataLog+0x238>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008d6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d6e:	6800      	ldr	r0, [r0, #0]
 8008d70:	5148      	str	r0, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d72:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d76:	2b03      	cmp	r3, #3
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d78:	4405      	add	r5, r0
 8008d7a:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d7c:	d018      	beq.n	8008db0 <MCPA_dataLog+0x238>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008d7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d80:	6800      	ldr	r0, [r0, #0]
 8008d82:	5148      	str	r0, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d84:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d88:	2b04      	cmp	r3, #4
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d8a:	4405      	add	r5, r0
 8008d8c:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d8e:	d00f      	beq.n	8008db0 <MCPA_dataLog+0x238>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008d90:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008d92:	6800      	ldr	r0, [r0, #0]
 8008d94:	5148      	str	r0, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d96:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008d9a:	2b05      	cmp	r3, #5
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008d9c:	4405      	add	r5, r0
 8008d9e:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008da0:	d006      	beq.n	8008db0 <MCPA_dataLog+0x238>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008da2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	514b      	str	r3, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008da8:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8008dac:	441d      	add	r5, r3
 8008dae:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008db0:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
 8008db4:	e7bd      	b.n	8008d32 <MCPA_dataLog+0x1ba>
 8008db6:	bf00      	nop
 8008db8:	20000650 	.word	0x20000650

08008dbc <MCPA_cfgLog>:
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
  uint16_t *logValue16;
  uint8_t result = MCP_CMD_OK;
  
  buffSize = *((uint16_t *) cfgdata);
  if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8008dbc:	6803      	ldr	r3, [r0, #0]
{
 8008dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8008dc2:	89db      	ldrh	r3, [r3, #14]
  buffSize = *((uint16_t *) cfgdata);
 8008dc4:	f8b1 8000 	ldrh.w	r8, [r1]
  if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8008dc8:	4543      	cmp	r3, r8
 8008dca:	d363      	bcc.n	8008e94 <MCPA_cfgLog+0xd8>
  {
    result = MCP_ERROR_NO_TXASYNC_SPACE;
  }
  else
  {
     pHandle->HFRate = *((uint8_t *) &cfgdata[2]);
 8008dcc:	788b      	ldrb	r3, [r1, #2]
 8008dce:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
     pHandle->HFNum  = *((uint8_t *) &cfgdata[3]);
 8008dd2:	78cc      	ldrb	r4, [r1, #3]
 8008dd4:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
     pHandle->MFRate = *((uint8_t *) &cfgdata[4]);
 8008dd8:	790b      	ldrb	r3, [r1, #4]
 8008dda:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 8008dde:	794b      	ldrb	r3, [r1, #5]
 8008de0:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
 8008de4:	4605      	mov	r5, r0
 8008de6:	1d8f      	adds	r7, r1, #6
     for (i =0; i <  pHandle->HFNum ; i++)
 8008de8:	b19c      	cbz	r4, 8008e12 <MCPA_cfgLog+0x56>
 8008dea:	2600      	movs	r6, #0
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
 8008dec:	4634      	mov	r4, r6
 8008dee:	4631      	mov	r1, r6
     {
       newID = *((uint16_t *) cfgdata);
       RI_GetPtrReg (newID, &pHandle->pHFTableID[i]);
 8008df0:	3101      	adds	r1, #1
 8008df2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8008df6:	f837 0b02 	ldrh.w	r0, [r7], #2
 8008dfa:	f7fa fe21 	bl	8003a40 <RI_GetPtrReg>
       cfgdata = cfgdata+2; /* Point to the next UID */
       logSize = logSize+2;
 8008dfe:	3601      	adds	r6, #1
     for (i =0; i <  pHandle->HFNum ; i++)
 8008e00:	f895 2082 	ldrb.w	r2, [r5, #130]	; 0x82
 8008e04:	b2f1      	uxtb	r1, r6
       logSize = logSize+2;
 8008e06:	1ca3      	adds	r3, r4, #2
     for (i =0; i <  pHandle->HFNum ; i++)
 8008e08:	428a      	cmp	r2, r1
       logSize = logSize+2;
 8008e0a:	b2dc      	uxtb	r4, r3
     for (i =0; i <  pHandle->HFNum ; i++)
 8008e0c:	d8f0      	bhi.n	8008df0 <MCPA_cfgLog+0x34>
 8008e0e:	f895 3086 	ldrb.w	r3, [r5, #134]	; 0x86
     }
     for (i =0; i <  pHandle->MFNum ; i++)
 8008e12:	b1d3      	cbz	r3, 8008e4a <MCPA_cfgLog+0x8e>
 8008e14:	f04f 0900 	mov.w	r9, #0
 8008e18:	464e      	mov	r6, r9
     {
       newID = *((uint16_t *) cfgdata);
 8008e1a:	f837 ab02 	ldrh.w	sl, [r7], #2
       RI_GetPtrReg (newID, &pHandle->pMFTableID[i]);
 8008e1e:	1df1      	adds	r1, r6, #7
 8008e20:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8008e24:	4650      	mov	r0, sl
 8008e26:	f7fa fe0b 	bl	8003a40 <RI_GetPtrReg>
       pHandle->MFIDSize[i] = RI_GetIDSize(newID);
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	f7fa fdfc 	bl	8003a28 <RI_GetIDSize>
 8008e30:	442e      	add	r6, r5
 8008e32:	f109 0901 	add.w	r9, r9, #1
 8008e36:	f886 0072 	strb.w	r0, [r6, #114]	; 0x72
     for (i =0; i <  pHandle->MFNum ; i++)
 8008e3a:	f895 2086 	ldrb.w	r2, [r5, #134]	; 0x86
 8008e3e:	fa5f f689 	uxtb.w	r6, r9
       logSize = logSize + pHandle->MFIDSize[i];
 8008e42:	1903      	adds	r3, r0, r4
     for (i =0; i <  pHandle->MFNum ; i++)
 8008e44:	42b2      	cmp	r2, r6
       logSize = logSize + pHandle->MFIDSize[i];
 8008e46:	b2dc      	uxtb	r4, r3
     for (i =0; i <  pHandle->MFNum ; i++)
 8008e48:	d8e7      	bhi.n	8008e1a <MCPA_cfgLog+0x5e>
       cfgdata = cfgdata+2; /* Point to the next UID */
     }
     if (buffSize < (logSize+2+4) ) /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
 8008e4a:	1d63      	adds	r3, r4, #5
 8008e4c:	4543      	cmp	r3, r8
 8008e4e:	da21      	bge.n	8008e94 <MCPA_cfgLog+0xd8>
     {
       result = MCP_ERROR_NO_TXASYNC_SPACE;
     }
     else
     {
       pHandle->bufferTxTrigger = buffSize-logSize-2; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8008e50:	f1a8 0302 	sub.w	r3, r8, #2
 8008e54:	1b1b      	subs	r3, r3, r4
 8008e56:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
       pHandle->Mark =   *((uint8_t *) cfgdata);
 8008e5a:	783b      	ldrb	r3, [r7, #0]
 8008e5c:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
       if (pHandle->Mark == 0 && pHandle->MarkBuff != 0)
 8008e60:	b9db      	cbnz	r3, 8008e9a <MCPA_cfgLog+0xde>
 8008e62:	f895 0089 	ldrb.w	r0, [r5, #137]	; 0x89
 8008e66:	b1b0      	cbz	r0, 8008e96 <MCPA_cfgLog+0xda>
       {  /* Switch Off condition */
          /* if Mark is cleared, dataLog is disabled. We send buffer if not empty*/
          /* Not empty means Index>4 because 4 first bytes are used for TimeStamp*/
          if (pHandle->bufferIndex > 4) {  
 8008e68:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8008e6c:	2b04      	cmp	r3, #4
 8008e6e:	d90a      	bls.n	8008e86 <MCPA_cfgLog+0xca>
            logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008e70:	6e69      	ldr	r1, [r5, #100]	; 0x64
            *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
            pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008e72:	682c      	ldr	r4, [r5, #0]
            *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008e74:	52c8      	strh	r0, [r1, r3]
            pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008e76:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
 8008e7a:	6866      	ldr	r6, [r4, #4]
 8008e7c:	3202      	adds	r2, #2
 8008e7e:	b292      	uxth	r2, r2
 8008e80:	4620      	mov	r0, r4
 8008e82:	2309      	movs	r3, #9
 8008e84:	47b0      	blx	r6
          }  
          pHandle->bufferIndex = 0;
 8008e86:	2000      	movs	r0, #0
          pHandle->MarkBuff = 0;
 8008e88:	f885 0089 	strb.w	r0, [r5, #137]	; 0x89
          pHandle->bufferIndex = 0;
 8008e8c:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
       }
     }
  }
  return result;
}
 8008e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    result = MCP_ERROR_NO_TXASYNC_SPACE;
 8008e94:	2009      	movs	r0, #9
}
 8008e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t result = MCP_CMD_OK;
 8008e9a:	2000      	movs	r0, #0
}
 8008e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008ea0 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	f001 fb33 	bl	800a514 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8008eb4:	bd10      	pop	{r4, pc}
 8008eb6:	bf00      	nop

08008eb8 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8008eb8:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8008ebc:	1c53      	adds	r3, r2, #1
 8008ebe:	b29b      	uxth	r3, r3
{
 8008ec0:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8008ec2:	2b7f      	cmp	r3, #127	; 0x7f
{
 8008ec4:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8008ec6:	bf88      	it	hi
 8008ec8:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8008eca:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8008ece:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8008ed0:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8008ed4:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8008ed8:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8008edc:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8008ede:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8008ee0:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8008ee4:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8008ee6:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8008ee8:	d1fa      	bne.n	8008ee0 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8008eea:	2a00      	cmp	r2, #0
 8008eec:	bfb8      	it	lt
 8008eee:	327f      	addlt	r2, #127	; 0x7f
 8008ef0:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8008ef2:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8008ef6:	bc70      	pop	{r4, r5, r6}
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop

08008efc <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8008efc:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop

08008f04 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8008f04:	8a03      	ldrh	r3, [r0, #16]
 8008f06:	8b42      	ldrh	r2, [r0, #26]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d306      	bcc.n	8008f1a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8008f0c:	8b82      	ldrh	r2, [r0, #28]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d901      	bls.n	8008f16 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8008f12:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8008f14:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8008f16:	8ac0      	ldrh	r0, [r0, #22]
 8008f18:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8008f1a:	2008      	movs	r0, #8
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop

08008f20 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8008f20:	2300      	movs	r3, #0
 8008f22:	8203      	strh	r3, [r0, #16]
}
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop

08008f28 <NTC_Init>:
{
 8008f28:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8008f2a:	7803      	ldrb	r3, [r0, #0]
{
 8008f2c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8008f2e:	b123      	cbz	r3, 8008f3a <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008f30:	8a43      	ldrh	r3, [r0, #18]
 8008f32:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8008f34:	2200      	movs	r2, #0
 8008f36:	82c2      	strh	r2, [r0, #22]
}
 8008f38:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8008f3a:	3004      	adds	r0, #4
 8008f3c:	f7fa fe4a 	bl	8003bd4 <RCM_RegisterRegConv>
 8008f40:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8008f44:	4620      	mov	r0, r4
 8008f46:	f7ff ffeb 	bl	8008f20 <NTC_Clear>
}
 8008f4a:	bd10      	pop	{r4, pc}

08008f4c <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8008f4c:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8008f4e:	7803      	ldrb	r3, [r0, #0]
{
 8008f50:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8008f52:	b113      	cbz	r3, 8008f5a <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8008f54:	2000      	movs	r0, #0
 8008f56:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8008f58:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008f5a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008f5e:	f7fa ff0d 	bl	8003d7c <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8008f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f66:	4298      	cmp	r0, r3
 8008f68:	d007      	beq.n	8008f7a <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8008f6a:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8008f6c:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8008f6e:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8008f70:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8008f74:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8008f78:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f7ff ffc2 	bl	8008f04 <NTC_SetFaultState>
 8008f80:	82e0      	strh	r0, [r4, #22]
}
 8008f82:	bd10      	pop	{r4, pc}

08008f84 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8008f84:	7803      	ldrb	r3, [r0, #0]
 8008f86:	b983      	cbnz	r3, 8008faa <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8008f88:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8008f8a:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8008f8c:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8008f90:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8008f92:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8008f94:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	bfbc      	itt	lt
 8008f9c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8008fa0:	33ff      	addlt	r3, #255	; 0xff
 8008fa2:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8008fa6:	b200      	sxth	r0, r0
 8008fa8:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8008faa:	8a80      	ldrh	r0, [r0, #20]
}
 8008fac:	b200      	sxth	r0, r0
 8008fae:	4770      	bx	lr

08008fb0 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8008fb0:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8008fb2:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8008fb4:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8008fb6:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8008fb8:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8008fba:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8008fbc:	6283      	str	r3, [r0, #40]	; 0x28
}
 8008fbe:	4770      	bx	lr

08008fc0 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8008fc0:	8081      	strh	r1, [r0, #4]
}
 8008fc2:	4770      	bx	lr

08008fc4 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8008fc4:	80c1      	strh	r1, [r0, #6]
}
 8008fc6:	4770      	bx	lr

08008fc8 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8008fc8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop

08008fd0 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8008fd0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop

08008fd8 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8008fd8:	6081      	str	r1, [r0, #8]

  return;
}
 8008fda:	4770      	bx	lr

08008fdc <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8008fdc:	8b00      	ldrh	r0, [r0, #24]
 8008fde:	4770      	bx	lr

08008fe0 <PID_SetKPDivisorPOW2>:
 * @retval None
 */
__weak void PID_SetKPDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKpDivisorPOW2 )
{
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	408b      	lsls	r3, r1
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8008fe4:	8381      	strh	r1, [r0, #28]
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8008fe6:	8303      	strh	r3, [r0, #24]
}
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop

08008fec <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8008fec:	8b40      	ldrh	r0, [r0, #26]
 8008fee:	4770      	bx	lr

08008ff0 <PID_SetLowerIntegralTermLimit>:
 * @param  wLowerLimit: new lower integral term limit value
 * @retval None
 */
__weak void PID_SetLowerIntegralTermLimit( PID_Handle_t * pHandle, int32_t wLowerLimit )
{
  pHandle->wLowerIntegralLimit = wLowerLimit;
 8008ff0:	6101      	str	r1, [r0, #16]
}
 8008ff2:	4770      	bx	lr

08008ff4 <PID_SetUpperIntegralTermLimit>:
 * @param  wUpperLimit: new upper integral term limit value
 * @retval None
 */
__weak void PID_SetUpperIntegralTermLimit( PID_Handle_t * pHandle, int32_t wUpperLimit )
{
  pHandle->wUpperIntegralLimit = wUpperLimit;
 8008ff4:	60c1      	str	r1, [r0, #12]
}
 8008ff6:	4770      	bx	lr

08008ff8 <PID_SetKIDivisorPOW2>:
{
 8008ff8:	b538      	push	{r3, r4, r5, lr}
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8008ffa:	2301      	movs	r3, #1
{
 8008ffc:	460c      	mov	r4, r1
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8008ffe:	408b      	lsls	r3, r1
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8009000:	f647 71ff 	movw	r1, #32767	; 0x7fff
  pHandle->hKiDivisor = ( uint16_t )( wKiDiv );
 8009004:	8343      	strh	r3, [r0, #26]
  pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8009006:	83c4      	strh	r4, [r0, #30]
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8009008:	40a1      	lsls	r1, r4
{
 800900a:	4605      	mov	r5, r0
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 800900c:	f7ff fff2 	bl	8008ff4 <PID_SetUpperIntegralTermLimit>
  PID_SetLowerIntegralTermLimit( pHandle, ( int32_t ) - INT16_MAX * wKiDiv );
 8009010:	4902      	ldr	r1, [pc, #8]	; (800901c <PID_SetKIDivisorPOW2+0x24>)
 8009012:	4628      	mov	r0, r5
 8009014:	40a1      	lsls	r1, r4
 8009016:	f7ff ffeb 	bl	8008ff0 <PID_SetLowerIntegralTermLimit>
}
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	ffff8001 	.word	0xffff8001

08009020 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8009020:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8009022:	4770      	bx	lr

08009024 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8009024:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop

0800902c <PID_GetKDDivisor>:
 * @retval Kd gain divisor
 */
__weak uint16_t PID_GetKDDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKdDivisor );
}
 800902c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 800902e:	4770      	bx	lr

08009030 <PID_SetKDDivisorPOW2>:
 * @param hKdDivisorPOW2
 */
__weak void PID_SetKDDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKdDivisorPOW2 )
{
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 8009030:	2301      	movs	r3, #1
 8009032:	408b      	lsls	r3, r1
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8009034:	84c1      	strh	r1, [r0, #38]	; 0x26
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 8009036:	8483      	strh	r3, [r0, #36]	; 0x24
}
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop

0800903c <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800903c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8009040:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8009044:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009046:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800904a:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800904e:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8009052:	b162      	cbz	r2, 800906e <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8009054:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009056:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 800905a:	1872      	adds	r2, r6, r1
 800905c:	d420      	bmi.n	80090a0 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800905e:	2e00      	cmp	r6, #0
 8009060:	db29      	blt.n	80090b6 <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8009062:	68c1      	ldr	r1, [r0, #12]
 8009064:	4291      	cmp	r1, r2
 8009066:	db03      	blt.n	8009070 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8009068:	6901      	ldr	r1, [r0, #16]
 800906a:	4291      	cmp	r1, r2
 800906c:	dc00      	bgt.n	8009070 <PI_Controller+0x34>
 800906e:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8009070:	8b86      	ldrh	r6, [r0, #28]
 8009072:	8bc2      	ldrh	r2, [r0, #30]
 8009074:	4133      	asrs	r3, r6
 8009076:	fa41 f202 	asr.w	r2, r1, r2
 800907a:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800907c:	429c      	cmp	r4, r3
 800907e:	da05      	bge.n	800908c <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8009080:	1ae3      	subs	r3, r4, r3
 8009082:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8009084:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8009086:	4620      	mov	r0, r4
 8009088:	bc70      	pop	{r4, r5, r6}
 800908a:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 800908c:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 800908e:	bfc9      	itett	gt
 8009090:	1aeb      	subgt	r3, r5, r3
 8009092:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8009094:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8009096:	18c9      	addgt	r1, r1, r3
 8009098:	6081      	str	r1, [r0, #8]
}
 800909a:	4620      	mov	r0, r4
 800909c:	bc70      	pop	{r4, r5, r6}
 800909e:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 80090a0:	2e00      	cmp	r6, #0
 80090a2:	ddde      	ble.n	8009062 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 80090a4:	2900      	cmp	r1, #0
 80090a6:	dddc      	ble.n	8009062 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80090a8:	68c1      	ldr	r1, [r0, #12]
 80090aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80090ae:	4291      	cmp	r1, r2
 80090b0:	d1de      	bne.n	8009070 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 80090b2:	460a      	mov	r2, r1
 80090b4:	e7db      	b.n	800906e <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 80090b6:	4e03      	ldr	r6, [pc, #12]	; (80090c4 <PI_Controller+0x88>)
 80090b8:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 80090bc:	bf28      	it	cs
 80090be:	4632      	movcs	r2, r6
 80090c0:	e7cf      	b.n	8009062 <PI_Controller+0x26>
 80090c2:	bf00      	nop
 80090c4:	80000001 	.word	0x80000001

080090c8 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 80090c8:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80090ca:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80090ce:	8b11      	ldrh	r1, [r2, #24]
 80090d0:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80090d2:	8995      	ldrh	r5, [r2, #12]
 80090d4:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80090d6:	fb13 f301 	smulbb	r3, r3, r1
{
 80090da:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80090dc:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80090e0:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80090e4:	f7ff fae6 	bl	80086b4 <VBS_GetAvBusVoltage_V>
 80090e8:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 80090ec:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80090ee:	480e      	ldr	r0, [pc, #56]	; (8009128 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 80090f0:	490e      	ldr	r1, [pc, #56]	; (800912c <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 80090f2:	bfb8      	it	lt
 80090f4:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80090f8:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 80090fc:	bfb8      	it	lt
 80090fe:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8009100:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8009102:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8009104:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8009108:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800910c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009110:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8009112:	fb81 2103 	smull	r2, r1, r1, r3
 8009116:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8009118:	4630      	mov	r0, r6
 800911a:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 800911e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8009122:	f7ff bec9 	b.w	8008eb8 <MPM_CalcElMotorPower>
 8009126:	bf00      	nop
 8009128:	1b4e81b5 	.word	0x1b4e81b5
 800912c:	66666667 	.word	0x66666667

08009130 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8009130:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8009132:	4b18      	ldr	r3, [pc, #96]	; (8009194 <startTimers+0x64>)
 8009134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009136:	07d2      	lsls	r2, r2, #31
 8009138:	b082      	sub	sp, #8
 800913a:	d415      	bmi.n	8009168 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800913c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800913e:	f042 0201 	orr.w	r2, r2, #1
 8009142:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009144:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009146:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800914a:	f002 0201 	and.w	r2, r2, #1
 800914e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8009150:	9a01      	ldr	r2, [sp, #4]
 8009152:	694a      	ldr	r2, [r1, #20]
 8009154:	f042 0201 	orr.w	r2, r2, #1
 8009158:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800915a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800915c:	f022 0201 	bic.w	r2, r2, #1
 8009160:	659a      	str	r2, [r3, #88]	; 0x58
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
#endif
}
 8009162:	b002      	add	sp, #8
 8009164:	bc30      	pop	{r4, r5}
 8009166:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8009168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800916c:	4c0a      	ldr	r4, [pc, #40]	; (8009198 <startTimers+0x68>)
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	6859      	ldr	r1, [r3, #4]
 8009172:	4d0a      	ldr	r5, [pc, #40]	; (800919c <startTimers+0x6c>)
 8009174:	4021      	ands	r1, r4
 8009176:	f041 0120 	orr.w	r1, r1, #32
 800917a:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800917c:	6958      	ldr	r0, [r3, #20]
 800917e:	f040 0001 	orr.w	r0, r0, #1
 8009182:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009184:	6859      	ldr	r1, [r3, #4]
 8009186:	402a      	ands	r2, r5
 8009188:	4021      	ands	r1, r4
 800918a:	430a      	orrs	r2, r1
 800918c:	605a      	str	r2, [r3, #4]
}
 800918e:	b002      	add	sp, #8
 8009190:	bc30      	pop	{r4, r5}
 8009192:	4770      	bx	lr
 8009194:	40021000 	.word	0x40021000
 8009198:	fdffff8f 	.word	0xfdffff8f
 800919c:	02000070 	.word	0x02000070

080091a0 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 80091a0:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80091a2:	1c56      	adds	r6, r2, #1
 80091a4:	0876      	lsrs	r6, r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80091a6:	f06f 0702 	mvn.w	r7, #2
 80091aa:	0176      	lsls	r6, r6, #5
 80091ac:	6107      	str	r7, [r0, #16]

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 80091ae:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 80091b0:	781c      	ldrb	r4, [r3, #0]
 80091b2:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 80091b4:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 80091b8:	d80b      	bhi.n	80091d2 <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80091ba:	6904      	ldr	r4, [r0, #16]
 80091bc:	07a4      	lsls	r4, r4, #30
 80091be:	d5f7      	bpl.n	80091b0 <waitForPolarizationEnd+0x10>
      hCalibrationPeriodCounter++;
 80091c0:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80091c2:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80091c4:	6107      	str	r7, [r0, #16]
 80091c6:	d8f3      	bhi.n	80091b0 <waitForPolarizationEnd+0x10>
      {
        if (*cnt < NB_CONVERSIONS)
 80091c8:	781c      	ldrb	r4, [r3, #0]
 80091ca:	2c0f      	cmp	r4, #15
 80091cc:	d8f0      	bhi.n	80091b0 <waitForPolarizationEnd+0x10>
        {
          *SWerror = 1u;
 80091ce:	2301      	movs	r3, #1
 80091d0:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 80091d2:	bcf0      	pop	{r4, r5, r6, r7}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop

080091d8 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80091d8:	6883      	ldr	r3, [r0, #8]
 80091da:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80091de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80091e2:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80091e4:	6883      	ldr	r3, [r0, #8]
 80091e6:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 80091e8:	b082      	sub	sp, #8
 80091ea:	d418      	bmi.n	800921e <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 80091ec:	4b24      	ldr	r3, [pc, #144]	; (8009280 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 80091ee:	6882      	ldr	r2, [r0, #8]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4924      	ldr	r1, [pc, #144]	; (8009284 <R3_2_ADCxInit+0xac>)
 80091f4:	099b      	lsrs	r3, r3, #6
 80091f6:	fba1 1303 	umull	r1, r3, r1, r3
 80091fa:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80091fe:	099b      	lsrs	r3, r3, #6
 8009200:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800920a:	6082      	str	r2, [r0, #8]
 800920c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800920e:	9b01      	ldr	r3, [sp, #4]
 8009210:	b12b      	cbz	r3, 800921e <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	3b01      	subs	r3, #1
 8009216:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8009218:	9b01      	ldr	r3, [sp, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1f9      	bne.n	8009212 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800921e:	6883      	ldr	r3, [r0, #8]
 8009220:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800922c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800922e:	6883      	ldr	r3, [r0, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	dbfc      	blt.n	800922e <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8009234:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 8009236:	07da      	lsls	r2, r3, #31
 8009238:	d408      	bmi.n	800924c <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 800923a:	4a13      	ldr	r2, [pc, #76]	; (8009288 <R3_2_ADCxInit+0xb0>)
 800923c:	6883      	ldr	r3, [r0, #8]
 800923e:	4013      	ands	r3, r2
 8009240:	f043 0301 	orr.w	r3, r3, #1
 8009244:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8009246:	6803      	ldr	r3, [r0, #0]
 8009248:	07db      	lsls	r3, r3, #31
 800924a:	d5f7      	bpl.n	800923c <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 800924c:	6882      	ldr	r2, [r0, #8]
 800924e:	490e      	ldr	r1, [pc, #56]	; (8009288 <R3_2_ADCxInit+0xb0>)
 8009250:	400a      	ands	r2, r1
 8009252:	f042 0208 	orr.w	r2, r2, #8
 8009256:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8009258:	6882      	ldr	r2, [r0, #8]
 800925a:	400a      	ands	r2, r1
 800925c:	f042 0220 	orr.w	r2, r2, #32
 8009260:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8009262:	68c3      	ldr	r3, [r0, #12]
 8009264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009268:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800926c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009270:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8009272:	6883      	ldr	r3, [r0, #8]
 8009274:	400b      	ands	r3, r1
 8009276:	f043 0304 	orr.w	r3, r3, #4
 800927a:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 800927c:	b002      	add	sp, #8
 800927e:	4770      	bx	lr
 8009280:	20000608 	.word	0x20000608
 8009284:	053e2d63 	.word	0x053e2d63
 8009288:	7fffffc0 	.word	0x7fffffc0

0800928c <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800928c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8009290:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
{
 8009294:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009296:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8009298:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800929c:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800929e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 80092a0:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 80092a2:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80092a4:	6863      	ldr	r3, [r4, #4]
 80092a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80092aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ae:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 80092b0:	2a05      	cmp	r2, #5
 80092b2:	f200 8099 	bhi.w	80093e8 <R3_2_GetPhaseCurrents+0x15c>
 80092b6:	e8df f002 	tbb	[pc, r2]
 80092ba:	1e38      	.short	0x1e38
 80092bc:	3803031e 	.word	0x3803031e
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80092c0:	6f04      	ldr	r4, [r0, #112]	; 0x70

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 80092c2:	4b4d      	ldr	r3, [pc, #308]	; (80093f8 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80092c4:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80092c6:	429c      	cmp	r4, r3
 80092c8:	da55      	bge.n	8009376 <R3_2_GetPhaseCurrents+0xea>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 80092ca:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 80092cc:	6f42      	ldr	r2, [r0, #116]	; 0x74

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 80092ce:	4f4a      	ldr	r7, [pc, #296]	; (80093f8 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 80092d0:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 80092d2:	42ba      	cmp	r2, r7
 80092d4:	da55      	bge.n	8009382 <R3_2_GetPhaseCurrents+0xf6>
      {
        Iab->b = -INT16_MAX;
 80092d6:	f9b1 5000 	ldrsh.w	r5, [r1]
 80092da:	804f      	strh	r7, [r1, #2]
 80092dc:	b2ab      	uxth	r3, r5
 80092de:	f248 0201 	movw	r2, #32769	; 0x8001
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80092e2:	4413      	add	r3, r2
 80092e4:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 80092e6:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
  pHandle->_Super.Ib = Iab->b;
 80092ea:	f8a0 704e 	strh.w	r7, [r0, #78]	; 0x4e
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80092ee:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 80092f2:	bcf0      	pop	{r4, r5, r6, r7}
 80092f4:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80092f6:	6f04      	ldr	r4, [r0, #112]	; 0x70
      if ( Aux < -INT16_MAX )
 80092f8:	4b3f      	ldr	r3, [pc, #252]	; (80093f8 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80092fa:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80092fc:	429c      	cmp	r4, r3
 80092fe:	db34      	blt.n	800936a <R3_2_GetPhaseCurrents+0xde>
      else  if ( Aux > INT16_MAX )
 8009300:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009304:	db68      	blt.n	80093d8 <R3_2_GetPhaseCurrents+0x14c>
        Iab->a = INT16_MAX;
 8009306:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800930a:	4613      	mov	r3, r2
 800930c:	800a      	strh	r2, [r1, #0]
 800930e:	4614      	mov	r4, r2
 8009310:	4615      	mov	r5, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8009312:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009314:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8009316:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8009318:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800931c:	db44      	blt.n	80093a8 <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = INT16_MAX;
 800931e:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8009322:	4622      	mov	r2, r4
 8009324:	804c      	strh	r4, [r1, #2]
 8009326:	4627      	mov	r7, r4
 8009328:	e7db      	b.n	80092e2 <R3_2_GetPhaseCurrents+0x56>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800932a:	6f44      	ldr	r4, [r0, #116]	; 0x74
      if ( Aux < -INT16_MAX )
 800932c:	4b32      	ldr	r3, [pc, #200]	; (80093f8 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800932e:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8009330:	429c      	cmp	r4, r3
 8009332:	db14      	blt.n	800935e <R3_2_GetPhaseCurrents+0xd2>
      else  if ( Aux > INT16_MAX )
 8009334:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009338:	db43      	blt.n	80093c2 <R3_2_GetPhaseCurrents+0x136>
        Iab->b = INT16_MAX;
 800933a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800933e:	461a      	mov	r2, r3
 8009340:	804b      	strh	r3, [r1, #2]
 8009342:	461c      	mov	r4, r3
 8009344:	461f      	mov	r7, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8009346:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8009348:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 800934a:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 800934c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009350:	db23      	blt.n	800939a <R3_2_GetPhaseCurrents+0x10e>
        Iab->a = INT16_MAX;
 8009352:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8009356:	4623      	mov	r3, r4
 8009358:	800c      	strh	r4, [r1, #0]
 800935a:	4625      	mov	r5, r4
 800935c:	e7c1      	b.n	80092e2 <R3_2_GetPhaseCurrents+0x56>
        Iab->b = -INT16_MAX;
 800935e:	461c      	mov	r4, r3
 8009360:	804b      	strh	r3, [r1, #2]
 8009362:	461f      	mov	r7, r3
 8009364:	f248 0201 	movw	r2, #32769	; 0x8001
 8009368:	e7ed      	b.n	8009346 <R3_2_GetPhaseCurrents+0xba>
        Iab->a = -INT16_MAX;
 800936a:	461c      	mov	r4, r3
 800936c:	800b      	strh	r3, [r1, #0]
 800936e:	461d      	mov	r5, r3
 8009370:	f248 0301 	movw	r3, #32769	; 0x8001
 8009374:	e7cd      	b.n	8009312 <R3_2_GetPhaseCurrents+0x86>
      else  if ( Aux > INT16_MAX )
 8009376:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800937a:	db1c      	blt.n	80093b6 <R3_2_GetPhaseCurrents+0x12a>
        Iab->a = INT16_MAX;
 800937c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009380:	e7a3      	b.n	80092ca <R3_2_GetPhaseCurrents+0x3e>
      else  if ( Aux > INT16_MAX )
 8009382:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009386:	db20      	blt.n	80093ca <R3_2_GetPhaseCurrents+0x13e>
        Iab->b = INT16_MAX;
 8009388:	f9b1 5000 	ldrsh.w	r5, [r1]
 800938c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009390:	804b      	strh	r3, [r1, #2]
 8009392:	461a      	mov	r2, r3
 8009394:	461f      	mov	r7, r3
 8009396:	b2ab      	uxth	r3, r5
 8009398:	e7a3      	b.n	80092e2 <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 800939a:	4d17      	ldr	r5, [pc, #92]	; (80093f8 <R3_2_GetPhaseCurrents+0x16c>)
 800939c:	42ac      	cmp	r4, r5
 800939e:	da1f      	bge.n	80093e0 <R3_2_GetPhaseCurrents+0x154>
        Iab->a = -INT16_MAX;
 80093a0:	800d      	strh	r5, [r1, #0]
 80093a2:	f248 0301 	movw	r3, #32769	; 0x8001
 80093a6:	e79c      	b.n	80092e2 <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 80093a8:	4f13      	ldr	r7, [pc, #76]	; (80093f8 <R3_2_GetPhaseCurrents+0x16c>)
 80093aa:	42ba      	cmp	r2, r7
 80093ac:	da05      	bge.n	80093ba <R3_2_GetPhaseCurrents+0x12e>
        Iab->b = -INT16_MAX;
 80093ae:	804f      	strh	r7, [r1, #2]
 80093b0:	f248 0201 	movw	r2, #32769	; 0x8001
 80093b4:	e795      	b.n	80092e2 <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 80093b6:	800c      	strh	r4, [r1, #0]
 80093b8:	e788      	b.n	80092cc <R3_2_GetPhaseCurrents+0x40>
        Iab->b = ( int16_t )Aux;
 80093ba:	b217      	sxth	r7, r2
 80093bc:	804f      	strh	r7, [r1, #2]
 80093be:	b292      	uxth	r2, r2
 80093c0:	e78f      	b.n	80092e2 <R3_2_GetPhaseCurrents+0x56>
        Iab->b = ( int16_t )Aux;
 80093c2:	b227      	sxth	r7, r4
 80093c4:	804f      	strh	r7, [r1, #2]
 80093c6:	b2a2      	uxth	r2, r4
 80093c8:	e7bd      	b.n	8009346 <R3_2_GetPhaseCurrents+0xba>
        Iab->b = ( int16_t )Aux;
 80093ca:	f9b1 5000 	ldrsh.w	r5, [r1]
 80093ce:	b217      	sxth	r7, r2
 80093d0:	b2ab      	uxth	r3, r5
 80093d2:	804f      	strh	r7, [r1, #2]
 80093d4:	b292      	uxth	r2, r2
 80093d6:	e784      	b.n	80092e2 <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 80093d8:	b225      	sxth	r5, r4
 80093da:	800d      	strh	r5, [r1, #0]
 80093dc:	b2a3      	uxth	r3, r4
 80093de:	e798      	b.n	8009312 <R3_2_GetPhaseCurrents+0x86>
        Iab->a = ( int16_t )Aux;
 80093e0:	b225      	sxth	r5, r4
 80093e2:	800d      	strh	r5, [r1, #0]
 80093e4:	b2a3      	uxth	r3, r4
 80093e6:	e77c      	b.n	80092e2 <R3_2_GetPhaseCurrents+0x56>
 80093e8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80093ec:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 80093f0:	880b      	ldrh	r3, [r1, #0]
 80093f2:	884a      	ldrh	r2, [r1, #2]
 80093f4:	e775      	b.n	80092e2 <R3_2_GetPhaseCurrents+0x56>
 80093f6:	bf00      	nop
 80093f8:	ffff8001 	.word	0xffff8001

080093fc <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 80093fc:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80093fe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8009402:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8009406:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800940a:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800940e:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8009410:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009412:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8009414:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8009416:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8009418:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR2, CompareValue);
 800941a:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800941c:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800941e:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009420:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009422:	4904      	ldr	r1, [pc, #16]	; (8009434 <R3_2_SetADCSampPointPolarization+0x38>)
 8009424:	685b      	ldr	r3, [r3, #4]
}
 8009426:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800942a:	420b      	tst	r3, r1
}
 800942c:	bf14      	ite	ne
 800942e:	2001      	movne	r0, #1
 8009430:	2000      	moveq	r0, #0
 8009432:	4770      	bx	lr
 8009434:	02000070 	.word	0x02000070

08009438 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8009438:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800943a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800943e:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8009442:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8009444:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009448:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800944a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800944c:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800944e:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009450:	6853      	ldr	r3, [r2, #4]
 8009452:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945a:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800945c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009460:	2b0f      	cmp	r3, #15
 8009462:	d80b      	bhi.n	800947c <R3_2_HFCurrentsPolarizationAB+0x44>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 8009464:	e9d0 421c 	ldrd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 8009468:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseAOffset += ADCDataReg1;
 800946c:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 800946e:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8009470:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8009472:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 8009476:	b2db      	uxtb	r3, r3
 8009478:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800947c:	2300      	movs	r3, #0
  Iab->b = 0;
}
 800947e:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 8009480:	600b      	str	r3, [r1, #0]
}
 8009482:	4770      	bx	lr

08009484 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009484:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8009488:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800948a:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800948e:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8009490:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009496:	681c      	ldr	r4, [r3, #0]
 8009498:	6853      	ldr	r3, [r2, #4]
 800949a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800949e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a2:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80094a4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80094a8:	2b0f      	cmp	r3, #15
 80094aa:	d808      	bhi.n	80094be <R3_2_HFCurrentsPolarizationC+0x3a>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 80094ac:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80094b0:	6f82      	ldr	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 80094b2:	3301      	adds	r3, #1
 80094b4:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80094b6:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80094b8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80094bc:	6782      	str	r2, [r0, #120]	; 0x78
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 80094be:	2300      	movs	r3, #0
  Iab->b = 0;
}
 80094c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 80094c4:	600b      	str	r3, [r1, #0]
}
 80094c6:	4770      	bx	lr

080094c8 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80094c8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 80094cc:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80094ce:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80094d0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  WRITE_REG(TIMx->CCR1, CompareValue);
 80094d4:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80094d6:	f06f 0001 	mvn.w	r0, #1
 80094da:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80094dc:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80094de:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80094e0:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80094e2:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80094e4:	07db      	lsls	r3, r3, #31
 80094e6:	d5fc      	bpl.n	80094e2 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80094e8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80094ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ee:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80094f0:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d000      	beq.n	80094fa <R3_2_TurnOnLowSides+0x32>
 80094f8:	4770      	bx	lr
{
 80094fa:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80094fc:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009500:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009502:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009506:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800950a:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800950e:	61ae      	str	r6, [r5, #24]
 8009510:	6184      	str	r4, [r0, #24]
  }
  return;
}
 8009512:	bc70      	pop	{r4, r5, r6}
 8009514:	619a      	str	r2, [r3, #24]
 8009516:	4770      	bx	lr

08009518 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009518:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800951c:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009520:	688b      	ldr	r3, [r1, #8]
{
 8009522:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 8009524:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009526:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 8009528:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 800952c:	f880 5069 	strb.w	r5, [r0, #105]	; 0x69
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8009530:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009534:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8009538:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800953a:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800953c:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800953e:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009540:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009542:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009544:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8009546:	07d2      	lsls	r2, r2, #31
 8009548:	d5fc      	bpl.n	8009544 <R3_2_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800954a:	f06f 0201 	mvn.w	r2, #1
 800954e:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009556:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800955a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800955e:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009560:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8009564:	2a02      	cmp	r2, #2
 8009566:	d008      	beq.n	800957a <R3_2_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009568:	f06f 0201 	mvn.w	r2, #1
 800956c:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8009574:	bc30      	pop	{r4, r5}
 8009576:	60da      	str	r2, [r3, #12]
 8009578:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800957a:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800957c:	6a0c      	ldr	r4, [r1, #32]
 800957e:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8009582:	f240 5255 	movw	r2, #1365	; 0x555
 8009586:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009588:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800958c:	d007      	beq.n	800959e <R3_2_SwitchOnPWM+0x86>
 800958e:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009590:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009594:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8009598:	6184      	str	r4, [r0, #24]
 800959a:	6191      	str	r1, [r2, #24]
}
 800959c:	e7e4      	b.n	8009568 <R3_2_SwitchOnPWM+0x50>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800959e:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80095a0:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80095a4:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80095a8:	6284      	str	r4, [r0, #40]	; 0x28
 80095aa:	6291      	str	r1, [r2, #40]	; 0x28
}
 80095ac:	e7dc      	b.n	8009568 <R3_2_SwitchOnPWM+0x50>
 80095ae:	bf00      	nop

080095b0 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80095b0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80095b4:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80095b6:	68d3      	ldr	r3, [r2, #12]
 80095b8:	f023 0301 	bic.w	r3, r3, #1
{
 80095bc:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 80095be:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
 80095c2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80095c4:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 80095c6:	2500      	movs	r5, #0
 80095c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095cc:	f880 5069 	strb.w	r5, [r0, #105]	; 0x69
 80095d0:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 80095d2:	b91c      	cbnz	r4, 80095dc <R3_2_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80095d4:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d00d      	beq.n	80095f8 <R3_2_SwitchOffPWM+0x48>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80095dc:	f06f 0301 	mvn.w	r3, #1
 80095e0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80095e2:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80095e4:	07db      	lsls	r3, r3, #31
 80095e6:	d5fc      	bpl.n	80095e2 <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80095e8:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 80095ec:	2300      	movs	r3, #0
 80095ee:	6111      	str	r1, [r2, #16]
}
 80095f0:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 80095f2:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
}
 80095f6:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80095f8:	e9d1 3408 	ldrd	r3, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80095fc:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8009600:	629d      	str	r5, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009602:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009604:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009608:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800960c:	62a5      	str	r5, [r4, #40]	; 0x28
 800960e:	6299      	str	r1, [r3, #40]	; 0x28
}
 8009610:	e7e4      	b.n	80095dc <R3_2_SwitchOffPWM+0x2c>
 8009612:	bf00      	nop

08009614 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8009614:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009616:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800961a:	6f43      	ldr	r3, [r0, #116]	; 0x74
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800961c:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800961e:	686a      	ldr	r2, [r5, #4]
 8009620:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8009624:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009628:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800962a:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800962e:	4a0d      	ldr	r2, [pc, #52]	; (8009664 <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8009630:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009634:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 800963a:	4293      	cmp	r3, r2
 800963c:	db05      	blt.n	800964a <R3_2_RLGetPhaseCurrents+0x36>
  {
    if ( wAux < INT16_MAX )
 800963e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009642:	4293      	cmp	r3, r2
 8009644:	dc0a      	bgt.n	800965c <R3_2_RLGetPhaseCurrents+0x48>
 8009646:	b21b      	sxth	r3, r3
 8009648:	e000      	b.n	800964c <R3_2_RLGetPhaseCurrents+0x38>
 800964a:	4b07      	ldr	r3, [pc, #28]	; (8009668 <R3_2_RLGetPhaseCurrents+0x54>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 800964c:	2200      	movs	r2, #0
 800964e:	f363 020f 	bfi	r2, r3, #0, #16
 8009652:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 8009656:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 8009658:	600a      	str	r2, [r1, #0]
}
 800965a:	4770      	bx	lr
 800965c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009660:	e7f4      	b.n	800964c <R3_2_RLGetPhaseCurrents+0x38>
 8009662:	bf00      	nop
 8009664:	ffff8002 	.word	0xffff8002
 8009668:	ffff8001 	.word	0xffff8001

0800966c <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800966c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->ADCRegularLocked=true;
 8009670:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009672:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 8009674:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009678:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800967a:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800967e:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009680:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009682:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8009684:	07db      	lsls	r3, r3, #31
 8009686:	d5fc      	bpl.n	8009682 <R3_2_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009688:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800968a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800968e:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009690:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8009694:	2b02      	cmp	r3, #2
 8009696:	d000      	beq.n	800969a <R3_2_RLTurnOnLowSides+0x2e>
 8009698:	4770      	bx	lr
{
 800969a:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800969c:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80096a0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80096a2:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80096a6:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80096aa:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 80096ae:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80096b0:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 80096b2:	bc70      	pop	{r4, r5, r6}
 80096b4:	629a      	str	r2, [r3, #40]	; 0x28
 80096b6:	4770      	bx	lr

080096b8 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80096b8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 80096bc:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80096be:	688b      	ldr	r3, [r1, #8]
{
 80096c0:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80096c2:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 80096c6:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80096ca:	f06f 0201 	mvn.w	r2, #1
 80096ce:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80096d0:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80096d2:	07d6      	lsls	r6, r2, #31
 80096d4:	d5fc      	bpl.n	80096d0 <R3_2_RLSwitchOnPWM+0x18>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 80096d6:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80096da:	f06f 0701 	mvn.w	r7, #1
 80096de:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80096e0:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80096e2:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80096e4:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80096e6:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80096e8:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80096ea:	07d2      	lsls	r2, r2, #31
 80096ec:	d5fc      	bpl.n	80096e8 <R3_2_RLSwitchOnPWM+0x30>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80096ee:	68da      	ldr	r2, [r3, #12]
 80096f0:	f042 0201 	orr.w	r2, r2, #1
 80096f4:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 80096f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096fc:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80096fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009700:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009704:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009706:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 800970a:	2a02      	cmp	r2, #2
 800970c:	d00f      	beq.n	800972e <R3_2_RLSwitchOnPWM+0x76>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800970e:	2303      	movs	r3, #3
 8009710:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  MODIFY_REG(ADCx->CR,
 8009714:	68aa      	ldr	r2, [r5, #8]
 8009716:	4913      	ldr	r1, [pc, #76]	; (8009764 <R3_2_RLSwitchOnPWM+0xac>)
 8009718:	400a      	ands	r2, r1
 800971a:	f042 0208 	orr.w	r2, r2, #8
 800971e:	60aa      	str	r2, [r5, #8]
 8009720:	68a3      	ldr	r3, [r4, #8]
 8009722:	400b      	ands	r3, r1
 8009724:	f043 0308 	orr.w	r3, r3, #8
 8009728:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 800972a:	bcf0      	pop	{r4, r5, r6, r7}
 800972c:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800972e:	6a1a      	ldr	r2, [r3, #32]
 8009730:	f240 5355 	movw	r3, #1365	; 0x555
 8009734:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009736:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800973a:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800973e:	d008      	beq.n	8009752 <R3_2_RLSwitchOnPWM+0x9a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009740:	619a      	str	r2, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009742:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009744:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009748:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 800974c:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800974e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009750:	e7dd      	b.n	800970e <R3_2_RLSwitchOnPWM+0x56>
  WRITE_REG(GPIOx->BRR, PinMask);
 8009752:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009754:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009756:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800975a:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 800975e:	62b7      	str	r7, [r6, #40]	; 0x28
 8009760:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009762:	e7d4      	b.n	800970e <R3_2_RLSwitchOnPWM+0x56>
 8009764:	7fffffc0 	.word	0x7fffffc0

08009768 <R3_2_SetAOReferenceVoltage>:
{
 8009768:	b430      	push	{r4, r5}
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800976a:	0c84      	lsrs	r4, r0, #18
 800976c:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 8009770:	f101 0508 	add.w	r5, r1, #8
 8009774:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8009776:	5963      	ldr	r3, [r4, r5]
 8009778:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800977c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009780:	431a      	orrs	r2, r3
 8009782:	5162      	str	r2, [r4, r5]
  SET_BIT(DACx->SWTRIGR,
 8009784:	684a      	ldr	r2, [r1, #4]
 8009786:	f000 0303 	and.w	r3, r0, #3
 800978a:	4313      	orrs	r3, r2
 800978c:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800978e:	680a      	ldr	r2, [r1, #0]
 8009790:	2301      	movs	r3, #1
 8009792:	f000 0010 	and.w	r0, r0, #16
 8009796:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800979a:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800979e:	4b15      	ldr	r3, [pc, #84]	; (80097f4 <R3_2_SetAOReferenceVoltage+0x8c>)
 80097a0:	d014      	beq.n	80097cc <R3_2_SetAOReferenceVoltage+0x64>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4c14      	ldr	r4, [pc, #80]	; (80097f8 <R3_2_SetAOReferenceVoltage+0x90>)
  SET_BIT(DACx->CR,
 80097a6:	680a      	ldr	r2, [r1, #0]
 80097a8:	fba4 4303 	umull	r4, r3, r4, r3
 80097ac:	0cdb      	lsrs	r3, r3, #19
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	4310      	orrs	r0, r2
 80097b2:	6008      	str	r0, [r1, #0]
 80097b4:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 80097b6:	9b00      	ldr	r3, [sp, #0]
 80097b8:	b12b      	cbz	r3, 80097c6 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 80097ba:	9b00      	ldr	r3, [sp, #0]
 80097bc:	3b01      	subs	r3, #1
 80097be:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 80097c0:	9b00      	ldr	r3, [sp, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1f9      	bne.n	80097ba <R3_2_SetAOReferenceVoltage+0x52>
}
 80097c6:	b002      	add	sp, #8
 80097c8:	bc30      	pop	{r4, r5}
 80097ca:	4770      	bx	lr
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80097cc:	4a0a      	ldr	r2, [pc, #40]	; (80097f8 <R3_2_SetAOReferenceVoltage+0x90>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	fba2 2303 	umull	r2, r3, r2, r3
 80097d4:	0cdb      	lsrs	r3, r3, #19
 80097d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80097da:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80097dc:	9b01      	ldr	r3, [sp, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0f1      	beq.n	80097c6 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 80097e2:	9b01      	ldr	r3, [sp, #4]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80097e8:	9b01      	ldr	r3, [sp, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1f9      	bne.n	80097e2 <R3_2_SetAOReferenceVoltage+0x7a>
}
 80097ee:	b002      	add	sp, #8
 80097f0:	bc30      	pop	{r4, r5}
 80097f2:	4770      	bx	lr
 80097f4:	20000608 	.word	0x20000608
 80097f8:	431bde83 	.word	0x431bde83

080097fc <R3_2_Init>:
{
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	4607      	mov	r7, r0
 8009802:	b087      	sub	sp, #28
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8009804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    if ( TIMx == TIM1 )
 8009808:	f8df e28c 	ldr.w	lr, [pc, #652]	; 8009a98 <R3_2_Init+0x29c>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800980c:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 800980e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009810:	686a      	ldr	r2, [r5, #4]
 8009812:	9100      	str	r1, [sp, #0]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8009814:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009816:	9101      	str	r1, [sp, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009818:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800981a:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800981c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8009820:	9102      	str	r1, [sp, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009822:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009826:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800982a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800982c:	9103      	str	r1, [sp, #12]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800982e:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8009832:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 8009836:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009838:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800983a:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800983c:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800983e:	f022 0220 	bic.w	r2, r2, #32
 8009842:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009844:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009846:	6872      	ldr	r2, [r6, #4]
 8009848:	f022 0204 	bic.w	r2, r2, #4
 800984c:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800984e:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009850:	6872      	ldr	r2, [r6, #4]
 8009852:	f022 0220 	bic.w	r2, r2, #32
 8009856:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009858:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800985a:	498e      	ldr	r1, [pc, #568]	; (8009a94 <R3_2_Init+0x298>)
 800985c:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 800985e:	4574      	cmp	r4, lr
 8009860:	bf0c      	ite	eq
 8009862:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8009866:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 800986a:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 800986c:	f1bc 0f00 	cmp.w	ip, #0
 8009870:	d014      	beq.n	800989c <R3_2_Init+0xa0>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 8009872:	f8dc 2000 	ldr.w	r2, [ip]
 8009876:	b11a      	cbz	r2, 8009880 <R3_2_Init+0x84>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8009878:	6811      	ldr	r1, [r2, #0]
 800987a:	f041 0101 	orr.w	r1, r1, #1
 800987e:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 8009880:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8009884:	b11a      	cbz	r2, 800988e <R3_2_Init+0x92>
 8009886:	6811      	ldr	r1, [r2, #0]
 8009888:	f041 0101 	orr.w	r1, r1, #1
 800988c:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 800988e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8009892:	b11a      	cbz	r2, 800989c <R3_2_Init+0xa0>
 8009894:	6811      	ldr	r1, [r2, #0]
 8009896:	f041 0101 	orr.w	r1, r1, #1
 800989a:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 800989c:	f1bb 0f00 	cmp.w	fp, #0
 80098a0:	d017      	beq.n	80098d2 <R3_2_Init+0xd6>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 80098a2:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 80098a6:	2a01      	cmp	r2, #1
 80098a8:	d007      	beq.n	80098ba <R3_2_Init+0xbe>
 80098aa:	9a00      	ldr	r2, [sp, #0]
 80098ac:	b12a      	cbz	r2, 80098ba <R3_2_Init+0xbe>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80098ae:	4611      	mov	r1, r2
 80098b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80098b2:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 80098b6:	f7ff ff57 	bl	8009768 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80098ba:	f8db 3000 	ldr.w	r3, [fp]
 80098be:	f043 0301 	orr.w	r3, r3, #1
 80098c2:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80098c6:	f8db 3000 	ldr.w	r3, [fp]
 80098ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098ce:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 80098d2:	f1ba 0f00 	cmp.w	sl, #0
 80098d6:	d019      	beq.n	800990c <R3_2_Init+0x110>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 80098d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098dc:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 80098e0:	2a01      	cmp	r2, #1
 80098e2:	d007      	beq.n	80098f4 <R3_2_Init+0xf8>
 80098e4:	9a01      	ldr	r2, [sp, #4]
 80098e6:	b12a      	cbz	r2, 80098f4 <R3_2_Init+0xf8>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80098e8:	4611      	mov	r1, r2
 80098ea:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80098ec:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 80098f0:	f7ff ff3a 	bl	8009768 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80098f4:	f8da 3000 	ldr.w	r3, [sl]
 80098f8:	f043 0301 	orr.w	r3, r3, #1
 80098fc:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009900:	f8da 3000 	ldr.w	r3, [sl]
 8009904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009908:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 800990c:	f1b9 0f00 	cmp.w	r9, #0
 8009910:	d019      	beq.n	8009946 <R3_2_Init+0x14a>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 8009912:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009916:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 800991a:	2a01      	cmp	r2, #1
 800991c:	d007      	beq.n	800992e <R3_2_Init+0x132>
 800991e:	9a02      	ldr	r2, [sp, #8]
 8009920:	b12a      	cbz	r2, 800992e <R3_2_Init+0x132>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8009922:	4611      	mov	r1, r2
 8009924:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009926:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 800992a:	f7ff ff1d 	bl	8009768 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800992e:	f8d9 3000 	ldr.w	r3, [r9]
 8009932:	f043 0301 	orr.w	r3, r3, #1
 8009936:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800993a:	f8d9 3000 	ldr.w	r3, [r9]
 800993e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009942:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 8009946:	f1b8 0f00 	cmp.w	r8, #0
 800994a:	d019      	beq.n	8009980 <R3_2_Init+0x184>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 800994c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009950:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 8009954:	2a01      	cmp	r2, #1
 8009956:	d007      	beq.n	8009968 <R3_2_Init+0x16c>
 8009958:	9a03      	ldr	r2, [sp, #12]
 800995a:	b12a      	cbz	r2, 8009968 <R3_2_Init+0x16c>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800995c:	4611      	mov	r1, r2
 800995e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009960:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
 8009964:	f7ff ff00 	bl	8009768 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009968:	f8d8 3000 	ldr.w	r3, [r8]
 800996c:	f043 0301 	orr.w	r3, r3, #1
 8009970:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009974:	f8d8 3000 	ldr.w	r3, [r8]
 8009978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800997c:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009980:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 8009982:	07d8      	lsls	r0, r3, #31
 8009984:	d56d      	bpl.n	8009a62 <R3_2_Init+0x266>
 8009986:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8009988:	07d9      	lsls	r1, r3, #31
 800998a:	d576      	bpl.n	8009a7a <R3_2_Init+0x27e>
  volatile uint32_t Brk2Timeout = 1000;
 800998c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009990:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009992:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8009994:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009998:	f023 0301 	bic.w	r3, r3, #1
 800999c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800999e:	6863      	ldr	r3, [r4, #4]
 80099a0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80099a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a8:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80099aa:	69a3      	ldr	r3, [r4, #24]
 80099ac:	f043 0308 	orr.w	r3, r3, #8
 80099b0:	61a3      	str	r3, [r4, #24]
 80099b2:	69a3      	ldr	r3, [r4, #24]
 80099b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80099b8:	61a3      	str	r3, [r4, #24]
 80099ba:	69e3      	ldr	r3, [r4, #28]
 80099bc:	f043 0308 	orr.w	r3, r3, #8
 80099c0:	61e3      	str	r3, [r4, #28]
 80099c2:	69e3      	ldr	r3, [r4, #28]
 80099c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80099c8:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80099ca:	6963      	ldr	r3, [r4, #20]
 80099cc:	f043 0301 	orr.w	r3, r3, #1
 80099d0:	6163      	str	r3, [r4, #20]
 80099d2:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d029      	beq.n	8009a2e <R3_2_Init+0x232>
    if ( pHandle->_Super.Motor == M1 )
 80099da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80099de:	b92b      	cbnz	r3, 80099ec <R3_2_Init+0x1f0>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 80099e0:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d030      	beq.n	8009a4a <R3_2_Init+0x24e>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80099e8:	2b03      	cmp	r3, #3
 80099ea:	d04a      	beq.n	8009a82 <R3_2_Init+0x286>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80099ec:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80099f0:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 80099f2:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 80099f6:	b16b      	cbz	r3, 8009a14 <R3_2_Init+0x218>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80099f8:	6923      	ldr	r3, [r4, #16]
 80099fa:	05da      	lsls	r2, r3, #23
 80099fc:	d50a      	bpl.n	8009a14 <R3_2_Init+0x218>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80099fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8009a02:	9b05      	ldr	r3, [sp, #20]
 8009a04:	b133      	cbz	r3, 8009a14 <R3_2_Init+0x218>
 8009a06:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 8009a08:	9b05      	ldr	r3, [sp, #20]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8009a0e:	6923      	ldr	r3, [r4, #16]
 8009a10:	05db      	lsls	r3, r3, #23
 8009a12:	d4f6      	bmi.n	8009a02 <R3_2_Init+0x206>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8009a14:	68e3      	ldr	r3, [r4, #12]
 8009a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1a:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8009a1c:	6a23      	ldr	r3, [r4, #32]
 8009a1e:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8009a22:	f043 0305 	orr.w	r3, r3, #5
 8009a26:	6223      	str	r3, [r4, #32]
}
 8009a28:	b007      	add	sp, #28
 8009a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8009a2e:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d109      	bne.n	8009a4a <R3_2_Init+0x24e>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8009a36:	f892 10c1 	ldrb.w	r1, [r2, #193]	; 0xc1
 8009a3a:	2903      	cmp	r1, #3
 8009a3c:	d105      	bne.n	8009a4a <R3_2_Init+0x24e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009a3e:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009a40:	6963      	ldr	r3, [r4, #20]
 8009a42:	f043 0301 	orr.w	r3, r3, #1
 8009a46:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009a48:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8009a4a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8009a4e:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8009a50:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8009a52:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8009a56:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8009a58:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1cb      	bne.n	80099f8 <R3_2_Init+0x1fc>
 8009a60:	e7d8      	b.n	8009a14 <R3_2_Init+0x218>
      R3_2_ADCxInit (ADCx_1);
 8009a62:	4628      	mov	r0, r5
 8009a64:	f7ff fbb8 	bl	80091d8 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8009a68:	2340      	movs	r3, #64	; 0x40
 8009a6a:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8009a6c:	686b      	ldr	r3, [r5, #4]
 8009a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a72:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009a74:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8009a76:	07d9      	lsls	r1, r3, #31
 8009a78:	d488      	bmi.n	800998c <R3_2_Init+0x190>
      R3_2_ADCxInit (ADCx_2);
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff fbac 	bl	80091d8 <R3_2_ADCxInit>
 8009a80:	e784      	b.n	800998c <R3_2_Init+0x190>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009a82:	2101      	movs	r1, #1
 8009a84:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009a86:	6961      	ldr	r1, [r4, #20]
 8009a88:	f041 0101 	orr.w	r1, r1, #1
 8009a8c:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009a8e:	6323      	str	r3, [r4, #48]	; 0x30
}
 8009a90:	e7ac      	b.n	80099ec <R3_2_Init+0x1f0>
 8009a92:	bf00      	nop
 8009a94:	e0042000 	.word	0xe0042000
 8009a98:	40012c00 	.word	0x40012c00

08009a9c <R3_2_CurrentReadingPolarization>:
{
 8009a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009a9e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8009aa2:	6846      	ldr	r6, [r0, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009aa4:	689d      	ldr	r5, [r3, #8]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8009aa6:	6981      	ldr	r1, [r0, #24]
{
 8009aa8:	b085      	sub	sp, #20
  pHandle->PhaseAOffset = 0u;
 8009aaa:	2200      	movs	r2, #0
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8009aac:	9602      	str	r6, [sp, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009aae:	e9d3 7600 	ldrd	r7, r6, [r3]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8009ab2:	9103      	str	r1, [sp, #12]
  pHandle->PolarizationCounter = 0u;
 8009ab4:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  CLEAR_BIT(TIMx->CCER, Channels);
 8009ab8:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8009aba:	6702      	str	r2, [r0, #112]	; 0x70
 8009abc:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8009ac0:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8009ac4:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
 8009ac8:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8009aca:	4a3f      	ldr	r2, [pc, #252]	; (8009bc8 <R3_2_CurrentReadingPolarization+0x12c>)
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8009acc:	4b3f      	ldr	r3, [pc, #252]	; (8009bcc <R3_2_CurrentReadingPolarization+0x130>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8009ace:	6042      	str	r2, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8009ad0:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8009ad2:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 8009ad4:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8009ad6:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
  pHandle->PolarizationSector=SECTOR_5;
 8009ada:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 8009ade:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
{
 8009ae2:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8009ae4:	f7ff fd18 	bl	8009518 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8009ae8:	4a39      	ldr	r2, [pc, #228]	; (8009bd0 <R3_2_CurrentReadingPolarization+0x134>)
 8009aea:	686b      	ldr	r3, [r5, #4]
 8009aec:	4013      	ands	r3, r2
 8009aee:	2b70      	cmp	r3, #112	; 0x70
 8009af0:	d1fb      	bne.n	8009aea <R3_2_CurrentReadingPolarization+0x4e>
  MODIFY_REG(ADCx->CR,
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	4937      	ldr	r1, [pc, #220]	; (8009bd4 <R3_2_CurrentReadingPolarization+0x138>)
  waitForPolarizationEnd( TIMx,
 8009af6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009afa:	400a      	ands	r2, r1
 8009afc:	f042 0208 	orr.w	r2, r2, #8
 8009b00:	60ba      	str	r2, [r7, #8]
 8009b02:	68b3      	ldr	r3, [r6, #8]
 8009b04:	400b      	ands	r3, r1
 8009b06:	f043 0308 	orr.w	r3, r3, #8
 8009b0a:	60b3      	str	r3, [r6, #8]
 8009b0c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8009b10:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8009b14:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
 8009b18:	4628      	mov	r0, r5
 8009b1a:	e9cd 3100 	strd	r3, r1, [sp]
 8009b1e:	f7ff fb3f 	bl	80091a0 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8009b22:	4620      	mov	r0, r4
 8009b24:	f7ff fd44 	bl	80095b0 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8009b28:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8009b2a:	4a2b      	ldr	r2, [pc, #172]	; (8009bd8 <R3_2_CurrentReadingPolarization+0x13c>)
 8009b2c:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8009b2e:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8009b30:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
  pHandle->PolarizationSector=SECTOR_1;
 8009b34:	f884 6081 	strb.w	r6, [r4, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 8009b38:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8009b3c:	f7ff fcec 	bl	8009518 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8009b40:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8009b44:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009b48:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	f7ff fb27 	bl	80091a0 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7ff fd2c 	bl	80095b0 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009b58:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009b5c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009b5e:	9f02      	ldr	r7, [sp, #8]
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8009b60:	9803      	ldr	r0, [sp, #12]
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009b62:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8009b64:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009b66:	0912      	lsrs	r2, r2, #4
 8009b68:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009b6c:	091b      	lsrs	r3, r3, #4
 8009b6e:	67a3      	str	r3, [r4, #120]	; 0x78
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009b70:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8009b72:	61a0      	str	r0, [r4, #24]
 8009b74:	f023 0308 	bic.w	r3, r3, #8
 8009b78:	61ab      	str	r3, [r5, #24]
 8009b7a:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8009b7c:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8009b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b84:	61aa      	str	r2, [r5, #24]
 8009b86:	69ea      	ldr	r2, [r5, #28]
 8009b88:	f022 0208 	bic.w	r2, r2, #8
 8009b8c:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009b8e:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009b90:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009b92:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009b94:	69ab      	ldr	r3, [r5, #24]
 8009b96:	f043 0308 	orr.w	r3, r3, #8
 8009b9a:	61ab      	str	r3, [r5, #24]
 8009b9c:	69ab      	ldr	r3, [r5, #24]
 8009b9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009ba2:	61ab      	str	r3, [r5, #24]
 8009ba4:	69eb      	ldr	r3, [r5, #28]
 8009ba6:	f043 0308 	orr.w	r3, r3, #8
 8009baa:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009bac:	6a2b      	ldr	r3, [r5, #32]
 8009bae:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8009bb2:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 8009bb6:	2204      	movs	r2, #4
 8009bb8:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8009bba:	f884 6084 	strb.w	r6, [r4, #132]	; 0x84
  pHandle->_Super.Sector=SECTOR_5;
 8009bbe:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
}
 8009bc2:	b005      	add	sp, #20
 8009bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	08009439 	.word	0x08009439
 8009bcc:	080093fd 	.word	0x080093fd
 8009bd0:	02000070 	.word	0x02000070
 8009bd4:	7fffffc0 	.word	0x7fffffc0
 8009bd8:	08009485 	.word	0x08009485

08009bdc <R3_2_SetADCSampPointSectX>:
{
 8009bdc:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8009bde:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 8009be2:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 8009be6:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8009bea:	1aca      	subs	r2, r1, r3
 8009bec:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 8009bf0:	b292      	uxth	r2, r2
 8009bf2:	42b2      	cmp	r2, r6
 8009bf4:	d914      	bls.n	8009c20 <R3_2_SetADCSampPointSectX+0x44>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8009bf6:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 8009bf8:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8009bfa:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 8009bfc:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009c00:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8009c02:	8f45      	ldrh	r5, [r0, #58]	; 0x3a
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8009c04:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8009c06:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009c08:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009c0a:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009c0c:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009c0e:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009c10:	6852      	ldr	r2, [r2, #4]
 8009c12:	4b10      	ldr	r3, [pc, #64]	; (8009c54 <R3_2_SetADCSampPointSectX+0x78>)
 8009c14:	421a      	tst	r2, r3
}
 8009c16:	bf14      	ite	ne
 8009c18:	2001      	movne	r0, #1
 8009c1a:	2000      	moveq	r0, #0
 8009c1c:	bc70      	pop	{r4, r5, r6}
 8009c1e:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8009c20:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8009c24:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8009c26:	b2ad      	uxth	r5, r5
 8009c28:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8009c2c:	d904      	bls.n	8009c38 <R3_2_SetADCSampPointSectX+0x5c>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8009c2e:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	; 0xb6
 8009c32:	1a9b      	subs	r3, r3, r2
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	e7e3      	b.n	8009c00 <R3_2_SetADCSampPointSectX+0x24>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8009c38:	4433      	add	r3, r6
 8009c3a:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8009c3c:	4299      	cmp	r1, r3
 8009c3e:	d8df      	bhi.n	8009c00 <R3_2_SetADCSampPointSectX+0x24>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8009c40:	43db      	mvns	r3, r3
 8009c42:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8009c46:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8009c4a:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8009c4c:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8009c50:	e7d6      	b.n	8009c00 <R3_2_SetADCSampPointSectX+0x24>
 8009c52:	bf00      	nop
 8009c54:	02000070 	.word	0x02000070

08009c58 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009c58:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8009c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c60:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009c62:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009c66:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d033      	beq.n	8009cd6 <R3_2_TIMx_UP_IRQHandler+0x7e>
    while (ADCx_1->JSQR != 0x0u)
 8009c6e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1fc      	bne.n	8009c6e <R3_2_TIMx_UP_IRQHandler+0x16>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8009c74:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
 8009c78:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8009c7c:	68df      	ldr	r7, [r3, #12]
    if (Opamp != NULL )
 8009c7e:	b12f      	cbz	r7, 8009c8c <R3_2_TIMx_UP_IRQHandler+0x34>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8009c80:	6838      	ldr	r0, [r7, #0]
 8009c82:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8009c84:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8009c88:	4330      	orrs	r0, r6
 8009c8a:	6038      	str	r0, [r7, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8009c8c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8009c8e:	b13f      	cbz	r7, 8009ca0 <R3_2_TIMx_UP_IRQHandler+0x48>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8009c90:	6838      	ldr	r0, [r7, #0]
 8009c92:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 8009c96:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 8009c9a:	ea43 030e 	orr.w	r3, r3, lr
 8009c9e:	603b      	str	r3, [r7, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009ca0:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8009ca4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 8009ca8:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009caa:	f8d2 7094 	ldr.w	r7, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009cae:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009cb0:	433b      	orrs	r3, r7
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009cb2:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009cb4:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009cb8:	686b      	ldr	r3, [r5, #4]
 8009cba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009cc6:	2280      	movs	r2, #128	; 0x80
 8009cc8:	606b      	str	r3, [r5, #4]
}
 8009cca:	f104 0066 	add.w	r0, r4, #102	; 0x66
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009cce:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
}
 8009cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd6:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
 8009cda:	e7e1      	b.n	8009ca0 <R3_2_TIMx_UP_IRQHandler+0x48>

08009cdc <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8009cdc:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8009ce0:	b92b      	cbnz	r3, 8009cee <R3_2_BRK2_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009ce2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009ce6:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8009cea:	2a02      	cmp	r2, #2
 8009cec:	d004      	beq.n	8009cf8 <R3_2_BRK2_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8009cf4:	3066      	adds	r0, #102	; 0x66
 8009cf6:	4770      	bx	lr
{
 8009cf8:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009cfa:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009cfe:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009d02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8009d04:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009d06:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009d0a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8009d0e:	628c      	str	r4, [r1, #40]	; 0x28
 8009d10:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8009d12:	2301      	movs	r3, #1
 8009d14:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8009d18:	bc30      	pop	{r4, r5}
 8009d1a:	3066      	adds	r0, #102	; 0x66
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop

08009d20 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009d20:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8009d24:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009d26:	6890      	ldr	r0, [r2, #8]
 8009d28:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8009d2a:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d30:	6442      	str	r2, [r0, #68]	; 0x44
}
 8009d32:	f103 0066 	add.w	r0, r3, #102	; 0x66
  pHandle->OverVoltageFlag = true;
 8009d36:	f883 1083 	strb.w	r1, [r3, #131]	; 0x83
  pHandle->BrakeActionLock = true;
 8009d3a:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8009d3e:	4770      	bx	lr

08009d40 <R3_2_IsOverCurrentOccurred>:
{
 8009d40:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 8009d42:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
 8009d46:	b160      	cbz	r0, 8009d62 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8009d4e:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8009d50:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8009d52:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8009d56:	b11a      	cbz	r2, 8009d60 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8009d58:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 8009d5a:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8009d5c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8009d60:	4770      	bx	lr
 8009d62:	2140      	movs	r1, #64	; 0x40
 8009d64:	e7f5      	b.n	8009d52 <R3_2_IsOverCurrentOccurred+0x12>
 8009d66:	bf00      	nop

08009d68 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8009d68:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
{
 8009d6c:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 8009d6e:	2900      	cmp	r1, #0
 8009d70:	d13d      	bne.n	8009dee <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009d72:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8009d76:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009d78:	699a      	ldr	r2, [r3, #24]
 8009d7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d7e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009d82:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009d86:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009d88:	6a1a      	ldr	r2, [r3, #32]
 8009d8a:	f042 0201 	orr.w	r2, r2, #1
 8009d8e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009d90:	6a1a      	ldr	r2, [r3, #32]
 8009d92:	f022 0204 	bic.w	r2, r2, #4
 8009d96:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009d98:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8009d9a:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8009d9e:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8009da0:	f103 0118 	add.w	r1, r3, #24
 8009da4:	d031      	beq.n	8009e0a <R3_2_RLDetectionModeEnable+0xa2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009da6:	2a02      	cmp	r2, #2
 8009da8:	d10f      	bne.n	8009dca <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009daa:	699a      	ldr	r2, [r3, #24]
 8009dac:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009db0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009db8:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009dba:	6a1a      	ldr	r2, [r3, #32]
 8009dbc:	f042 0210 	orr.w	r2, r2, #16
 8009dc0:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009dc2:	6a1a      	ldr	r2, [r3, #32]
 8009dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dc8:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009dca:	684a      	ldr	r2, [r1, #4]
 8009dcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009dd0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009dd4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8009dd8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009dda:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8009ddc:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8009dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009de2:	621a      	str	r2, [r3, #32]
 8009de4:	6a1a      	ldr	r2, [r3, #32]
 8009de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dea:	621a      	str	r2, [r3, #32]
 8009dec:	6701      	str	r1, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009dee:	4b0f      	ldr	r3, [pc, #60]	; (8009e2c <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8009df0:	490f      	ldr	r1, [pc, #60]	; (8009e30 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009df2:	4a10      	ldr	r2, [pc, #64]	; (8009e34 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009df4:	4c10      	ldr	r4, [pc, #64]	; (8009e38 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009df6:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8009df8:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009dfa:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009dfc:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8009e00:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8009e04:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8009e08:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009e0a:	699a      	ldr	r2, [r3, #24]
 8009e0c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009e10:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009e14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e18:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009e1a:	6a1a      	ldr	r2, [r3, #32]
 8009e1c:	f022 0210 	bic.w	r2, r2, #16
 8009e20:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8009e22:	6a1a      	ldr	r2, [r3, #32]
 8009e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e28:	621a      	str	r2, [r3, #32]
}
 8009e2a:	e7ce      	b.n	8009dca <R3_2_RLDetectionModeEnable+0x62>
 8009e2c:	08009615 	.word	0x08009615
 8009e30:	080096b9 	.word	0x080096b9
 8009e34:	080095b1 	.word	0x080095b1
 8009e38:	0800966d 	.word	0x0800966d

08009e3c <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8009e3c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d05a      	beq.n	8009efa <R3_2_RLDetectionModeDisable+0xbe>
{
 8009e44:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009e46:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8009e4a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009e4c:	699a      	ldr	r2, [r3, #24]
 8009e4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009e52:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009e56:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009e5a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009e5c:	6a1a      	ldr	r2, [r3, #32]
 8009e5e:	f042 0201 	orr.w	r2, r2, #1
 8009e62:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8009e64:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8009e68:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8009e6a:	f103 0518 	add.w	r5, r3, #24
 8009e6e:	d045      	beq.n	8009efc <R3_2_RLDetectionModeDisable+0xc0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009e70:	2a02      	cmp	r2, #2
 8009e72:	d103      	bne.n	8009e7c <R3_2_RLDetectionModeDisable+0x40>
  CLEAR_BIT(TIMx->CCER, Channels);
 8009e74:	6a1a      	ldr	r2, [r3, #32]
 8009e76:	f022 0204 	bic.w	r2, r2, #4
 8009e7a:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8009e7c:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 8009e80:	0849      	lsrs	r1, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009e82:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009e84:	699a      	ldr	r2, [r3, #24]
 8009e86:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009e8a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009e8e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8009e92:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009e94:	6a1a      	ldr	r2, [r3, #32]
 8009e96:	f042 0210 	orr.w	r2, r2, #16
 8009e9a:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8009e9c:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8009ea0:	2a01      	cmp	r2, #1
 8009ea2:	d035      	beq.n	8009f10 <R3_2_RLDetectionModeDisable+0xd4>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009ea4:	2a02      	cmp	r2, #2
 8009ea6:	d103      	bne.n	8009eb0 <R3_2_RLDetectionModeDisable+0x74>
  CLEAR_BIT(TIMx->CCER, Channels);
 8009ea8:	6a1a      	ldr	r2, [r3, #32]
 8009eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009eae:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009eb0:	6399      	str	r1, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009eb2:	686a      	ldr	r2, [r5, #4]
 8009eb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009eb8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009ebc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009ec0:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 8009ec2:	6a1a      	ldr	r2, [r3, #32]
 8009ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ec8:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8009eca:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8009ece:	2a01      	cmp	r2, #1
 8009ed0:	d019      	beq.n	8009f06 <R3_2_RLDetectionModeDisable+0xca>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009ed2:	2a02      	cmp	r2, #2
 8009ed4:	d103      	bne.n	8009ede <R3_2_RLDetectionModeDisable+0xa2>
  CLEAR_BIT(TIMx->CCER, Channels);
 8009ed6:	6a1a      	ldr	r2, [r3, #32]
 8009ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009edc:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8009ede:	4c0f      	ldr	r4, [pc, #60]	; (8009f1c <R3_2_RLDetectionModeDisable+0xe0>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009ee0:	4a0f      	ldr	r2, [pc, #60]	; (8009f20 <R3_2_RLDetectionModeDisable+0xe4>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009ee2:	63d9      	str	r1, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009ee4:	4e0f      	ldr	r6, [pc, #60]	; (8009f24 <R3_2_RLDetectionModeDisable+0xe8>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8009ee6:	4d10      	ldr	r5, [pc, #64]	; (8009f28 <R3_2_RLDetectionModeDisable+0xec>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009ee8:	6046      	str	r6, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8009eea:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009eec:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8009ef0:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8009ef2:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8009ef6:	bc70      	pop	{r4, r5, r6}
 8009ef8:	4770      	bx	lr
 8009efa:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8009efc:	6a1a      	ldr	r2, [r3, #32]
 8009efe:	f042 0204 	orr.w	r2, r2, #4
 8009f02:	621a      	str	r2, [r3, #32]
}
 8009f04:	e7ba      	b.n	8009e7c <R3_2_RLDetectionModeDisable+0x40>
  SET_BIT(TIMx->CCER, Channels);
 8009f06:	6a1a      	ldr	r2, [r3, #32]
 8009f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f0c:	621a      	str	r2, [r3, #32]
}
 8009f0e:	e7e6      	b.n	8009ede <R3_2_RLDetectionModeDisable+0xa2>
  SET_BIT(TIMx->CCER, Channels);
 8009f10:	6a1a      	ldr	r2, [r3, #32]
 8009f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f16:	621a      	str	r2, [r3, #32]
}
 8009f18:	e7ca      	b.n	8009eb0 <R3_2_RLDetectionModeDisable+0x74>
 8009f1a:	bf00      	nop
 8009f1c:	08009519 	.word	0x08009519
 8009f20:	080095b1 	.word	0x080095b1
 8009f24:	0800928d 	.word	0x0800928d
 8009f28:	080094c9 	.word	0x080094c9

08009f2c <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009f2c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009f30:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009f32:	69da      	ldr	r2, [r3, #28]
{
 8009f34:	b470      	push	{r4, r5, r6}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8009f36:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8009f3a:	f8b0 6062 	ldrh.w	r6, [r0, #98]	; 0x62
 8009f3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8009f42:	fb01 f104 	mul.w	r1, r1, r4
  pHandle->ADCRegularLocked=true;
 8009f46:	2501      	movs	r5, #1
 8009f48:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009f4c:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8009f50:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8009f52:	f8b0 5064 	ldrh.w	r5, [r0, #100]	; 0x64
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8009f56:	8741      	strh	r1, [r0, #58]	; 0x3a
 8009f58:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8009f5c:	1ba4      	subs	r4, r4, r6
 8009f5e:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009f60:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009f62:	63dd      	str	r5, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009f64:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009f66:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8009f68:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
 8009f6c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8009f70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f74:	f042 0270 	orr.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8009f78:	2403      	movs	r4, #3
 8009f7a:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8009f7c:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 8009f7e:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009f82:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8009f84:	d007      	beq.n	8009f96 <R3_2_RLDetectionModeSetDuty+0x6a>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009f86:	4a07      	ldr	r2, [pc, #28]	; (8009fa4 <R3_2_RLDetectionModeSetDuty+0x78>)
 8009f88:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 8009f8a:	bf14      	ite	ne
 8009f8c:	2101      	movne	r1, #1
 8009f8e:	2100      	moveq	r1, #0
}
 8009f90:	4608      	mov	r0, r1
 8009f92:	bc70      	pop	{r4, r5, r6}
 8009f94:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8009f96:	2300      	movs	r3, #0
 8009f98:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8009f9c:	bc70      	pop	{r4, r5, r6}
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	02000070 	.word	0x02000070

08009fa8 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8009fa8:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8009faa:	8b82      	ldrh	r2, [r0, #28]
 8009fac:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8009fae:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8009fb0:	4414      	add	r4, r2
 8009fb2:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8009fb4:	b14b      	cbz	r3, 8009fca <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 8009fb6:	6a05      	ldr	r5, [r0, #32]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8009fc2:	8b01      	ldrh	r1, [r0, #24]
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	4291      	cmp	r1, r2
 8009fc8:	d8f7      	bhi.n	8009fba <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f364 030f 	bfi	r3, r4, #0, #16
 8009fd0:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8009fd4:	2200      	movs	r2, #0
}
 8009fd6:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 8009fd8:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8009fda:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8009fde:	4770      	bx	lr

08009fe0 <RVBS_Init>:
{
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8009fe4:	300c      	adds	r0, #12
 8009fe6:	f7f9 fdf5 	bl	8003bd4 <RCM_RegisterRegConv>
 8009fea:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f7ff ffda 	bl	8009fa8 <RVBS_Clear>
}
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	bf00      	nop

08009ff8 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8009ff8:	88c3      	ldrh	r3, [r0, #6]
 8009ffa:	8b42      	ldrh	r2, [r0, #26]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d305      	bcc.n	800a00c <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800a000:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 800a002:	4298      	cmp	r0, r3
 800a004:	bf8c      	ite	hi
 800a006:	2004      	movhi	r0, #4
 800a008:	2000      	movls	r0, #0
 800a00a:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 800a00c:	2002      	movs	r0, #2
  }
  return fault;
}
 800a00e:	4770      	bx	lr

0800a010 <RVBS_CalcAvVbus>:
{
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800a014:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800a018:	f7f9 feb0 	bl	8003d7c <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 800a01c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a020:	4298      	cmp	r0, r3
 800a022:	d01c      	beq.n	800a05e <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 800a024:	6a2f      	ldr	r7, [r5, #32]
 800a026:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800a02a:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a02e:	8b2e      	ldrh	r6, [r5, #24]
 800a030:	b1d6      	cbz	r6, 800a068 <RVBS_CalcAvVbus+0x58>
 800a032:	2300      	movs	r3, #0
    wtemp = 0;
 800a034:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 800a036:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a03a:	3301      	adds	r3, #1
 800a03c:	b2d9      	uxtb	r1, r3
 800a03e:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 800a040:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a042:	460b      	mov	r3, r1
 800a044:	d3f7      	bcc.n	800a036 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 800a046:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800a04a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800a04e:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800a050:	3e01      	subs	r6, #1
 800a052:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 800a054:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800a056:	da09      	bge.n	800a06c <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 800a058:	3301      	adds	r3, #1
 800a05a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800a05e:	4628      	mov	r0, r5
 800a060:	f7ff ffca 	bl	8009ff8 <RVBS_CheckFaultState>
 800a064:	8128      	strh	r0, [r5, #8]
}
 800a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800a068:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 800a06a:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800a072:	4628      	mov	r0, r5
 800a074:	f7ff ffc0 	bl	8009ff8 <RVBS_CheckFaultState>
 800a078:	8128      	strh	r0, [r5, #8]
}
 800a07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a07c <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 800a07c:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800a07e:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 800a080:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 800a084:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 800a088:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800a08a:	4770      	bx	lr

0800a08c <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 800a08c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop

0800a094 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 800a094:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop

0800a09c <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 800a09c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop

0800a0a4 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800a0a4:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800a0a8:	8a81      	ldrh	r1, [r0, #20]
{
 800a0aa:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 800a0ac:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 800a0ae:	bfb8      	it	lt
 800a0b0:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800a0b2:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800a0b4:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800a0b6:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800a0b8:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800a0ba:	429d      	cmp	r5, r3
 800a0bc:	d817      	bhi.n	800a0ee <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800a0be:	4299      	cmp	r1, r3
 800a0c0:	bf2c      	ite	cs
 800a0c2:	2300      	movcs	r3, #0
 800a0c4:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800a0c6:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800a0ca:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 800a0cc:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 800a0ce:	bfb8      	it	lt
 800a0d0:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800a0d2:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800a0d4:	428d      	cmp	r5, r1
 800a0d6:	d300      	bcc.n	800a0da <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 800a0d8:	b15b      	cbz	r3, 800a0f2 <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800a0da:	4294      	cmp	r4, r2
 800a0dc:	d901      	bls.n	800a0e2 <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 800a0de:	3201      	adds	r2, #1
 800a0e0:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800a0e2:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 800a0e4:	1b10      	subs	r0, r2, r4
 800a0e6:	bf18      	it	ne
 800a0e8:	2001      	movne	r0, #1
 800a0ea:	bc30      	pop	{r4, r5}
 800a0ec:	4770      	bx	lr
    SpeedError = true;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e7e9      	b.n	800a0c6 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 800a0f2:	4294      	cmp	r4, r2
 800a0f4:	bf88      	it	hi
 800a0f6:	2200      	movhi	r2, #0
 800a0f8:	e7f3      	b.n	800a0e2 <SPD_IsMecSpeedReliable+0x3e>
 800a0fa:	bf00      	nop

0800a0fc <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 800a0fc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800a100:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 800a104:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800a108:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 800a10c:	b200      	sxth	r0, r0
 800a10e:	4770      	bx	lr

0800a110 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800a110:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800a112:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800a116:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 800a11a:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 800a11e:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800a120:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800a122:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 800a124:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800a126:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 800a12a:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 800a12c:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800a12e:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 800a130:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 800a132:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800a134:	6183      	str	r3, [r0, #24]
}
 800a136:	4770      	bx	lr

0800a138 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 800a138:	6141      	str	r1, [r0, #20]
}
 800a13a:	4770      	bx	lr

0800a13c <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 800a13c:	6940      	ldr	r0, [r0, #20]
 800a13e:	4770      	bx	lr

0800a140 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800a140:	7803      	ldrb	r3, [r0, #0]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d000      	beq.n	800a148 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 800a146:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800a148:	6900      	ldr	r0, [r0, #16]
 800a14a:	2100      	movs	r1, #0
 800a14c:	f7fe bf44 	b.w	8008fd8 <PID_SetIntegralTerm>

0800a150 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800a150:	6840      	ldr	r0, [r0, #4]
 800a152:	2800      	cmp	r0, #0
 800a154:	bfbc      	itt	lt
 800a156:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800a15a:	30ff      	addlt	r0, #255	; 0xff
}
 800a15c:	1400      	asrs	r0, r0, #16
 800a15e:	4770      	bx	lr

0800a160 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800a160:	6880      	ldr	r0, [r0, #8]
 800a162:	2800      	cmp	r0, #0
 800a164:	bfbc      	itt	lt
 800a166:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800a16a:	30ff      	addlt	r0, #255	; 0xff
}
 800a16c:	1400      	asrs	r0, r0, #16
 800a16e:	4770      	bx	lr

0800a170 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800a170:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800a172:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800a174:	60c3      	str	r3, [r0, #12]
}
 800a176:	4770      	bx	lr

0800a178 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800a17a:	7806      	ldrb	r6, [r0, #0]
{
 800a17c:	4604      	mov	r4, r0
 800a17e:	460d      	mov	r5, r1
 800a180:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800a182:	b326      	cbz	r6, 800a1ce <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800a184:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800a186:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800a188:	2800      	cmp	r0, #0
 800a18a:	bfbc      	itt	lt
 800a18c:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800a190:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800a192:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800a194:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800a198:	dd01      	ble.n	800a19e <STC_ExecRamp+0x26>
      AllowedRange = false;
 800a19a:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 800a19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800a19e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 800a1a2:	42a9      	cmp	r1, r5
 800a1a4:	dcf9      	bgt.n	800a19a <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800a1a6:	8c23      	ldrh	r3, [r4, #32]
 800a1a8:	429d      	cmp	r5, r3
 800a1aa:	da03      	bge.n	800a1b4 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800a1ac:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800a1b0:	42ab      	cmp	r3, r5
 800a1b2:	dbf2      	blt.n	800a19a <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 800a1b4:	b9af      	cbnz	r7, 800a1e2 <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 800a1b6:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800a1b8:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 800a1ba:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 800a1bc:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800a1c0:	bf0c      	ite	eq
 800a1c2:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800a1c4:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 800a1c6:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 800a1c8:	61a3      	str	r3, [r4, #24]
 800a1ca:	2001      	movs	r0, #1
}
 800a1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800a1ce:	f7ff ffc7 	bl	800a160 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800a1d2:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 800a1d4:	42b5      	cmp	r5, r6
 800a1d6:	dce0      	bgt.n	800a19a <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800a1d8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800a1dc:	42ab      	cmp	r3, r5
 800a1de:	dcdc      	bgt.n	800a19a <STC_ExecRamp+0x22>
 800a1e0:	e7e8      	b.n	800a1b4 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800a1e2:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 800a1e4:	4a07      	ldr	r2, [pc, #28]	; (800a204 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 800a1e6:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800a1e8:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 800a1ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f0:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800a1f2:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800a1f4:	1a2d      	subs	r5, r5, r0
 800a1f6:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 800a1f8:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800a1fa:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 800a1fe:	2001      	movs	r0, #1
 800a200:	61a5      	str	r5, [r4, #24]
}
 800a202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a204:	10624dd3 	.word	0x10624dd3

0800a208 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 800a208:	2300      	movs	r3, #0
 800a20a:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800a20c:	6183      	str	r3, [r0, #24]
}
 800a20e:	4770      	bx	lr

0800a210 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800a210:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800a212:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800a216:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800a218:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	bf08      	it	eq
 800a21e:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 800a220:	2b01      	cmp	r3, #1
{
 800a222:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 800a224:	d90c      	bls.n	800a240 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800a226:	6981      	ldr	r1, [r0, #24]
 800a228:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800a22a:	3b01      	subs	r3, #1
 800a22c:	2e00      	cmp	r6, #0
 800a22e:	60c3      	str	r3, [r0, #12]
 800a230:	4630      	mov	r0, r6
 800a232:	db09      	blt.n	800a248 <STC_CalcTorqueReference+0x38>
 800a234:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800a236:	2a01      	cmp	r2, #1
 800a238:	d00a      	beq.n	800a250 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800a23a:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800a23c:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800a23e:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 800a240:	d012      	beq.n	800a268 <STC_CalcTorqueReference+0x58>
 800a242:	2e00      	cmp	r6, #0
 800a244:	4630      	mov	r0, r6
 800a246:	daf5      	bge.n	800a234 <STC_CalcTorqueReference+0x24>
 800a248:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 800a24c:	30ff      	adds	r0, #255	; 0xff
 800a24e:	e7f1      	b.n	800a234 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800a250:	6960      	ldr	r0, [r4, #20]
 800a252:	f7ff ff1f 	bl	800a094 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800a256:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800a258:	b201      	sxth	r1, r0
 800a25a:	6920      	ldr	r0, [r4, #16]
 800a25c:	f7fe feee 	bl	800903c <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800a260:	0403      	lsls	r3, r0, #16
 800a262:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 800a266:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800a268:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800a26c:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800a26e:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 800a270:	60c3      	str	r3, [r0, #12]
 800a272:	e7e0      	b.n	800a236 <STC_CalcTorqueReference+0x26>

0800a274 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 800a274:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop

0800a27c <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800a27c:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800a280:	2200      	movs	r2, #0
 800a282:	b299      	uxth	r1, r3
 800a284:	f361 020f 	bfi	r2, r1, #0, #16
 800a288:	0c1b      	lsrs	r3, r3, #16
 800a28a:	f363 421f 	bfi	r2, r3, #16, #16
{
 800a28e:	b082      	sub	sp, #8
}
 800a290:	4610      	mov	r0, r2
 800a292:	b002      	add	sp, #8
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop

0800a298 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800a298:	b510      	push	{r4, lr}
 800a29a:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800a29c:	6940      	ldr	r0, [r0, #20]
 800a29e:	f7ff fef9 	bl	800a094 <SPD_GetAvrgMecSpeedUnit>
 800a2a2:	0400      	lsls	r0, r0, #16
 800a2a4:	6060      	str	r0, [r4, #4]
}
 800a2a6:	bd10      	pop	{r4, pc}

0800a2a8 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800a2ac:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop

0800a2b4 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800a2b4:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800a2b6:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800a2b8:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 800a2ba:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800a2bc:	430b      	orrs	r3, r1
 800a2be:	ea23 0202 	bic.w	r2, r3, r2
 800a2c2:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800a2c4:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 800a2c6:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800a2c8:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800a2ca:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 800a2cc:	d008      	beq.n	800a2e0 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800a2ce:	b912      	cbnz	r2, 800a2d6 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	bc30      	pop	{r4, r5}
 800a2d4:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800a2d6:	240a      	movs	r4, #10
 800a2d8:	7004      	strb	r4, [r0, #0]
}
 800a2da:	4620      	mov	r0, r4
 800a2dc:	bc30      	pop	{r4, r5}
 800a2de:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800a2e0:	2a00      	cmp	r2, #0
 800a2e2:	d1f5      	bne.n	800a2d0 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 800a2e4:	240b      	movs	r4, #11
 800a2e6:	7004      	strb	r4, [r0, #0]
}
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	bc30      	pop	{r4, r5}
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop

0800a2f0 <STM_NextState>:
{
 800a2f0:	b508      	push	{r3, lr}
 800a2f2:	7803      	ldrb	r3, [r0, #0]
 800a2f4:	2b14      	cmp	r3, #20
 800a2f6:	d810      	bhi.n	800a31a <STM_NextState+0x2a>
 800a2f8:	e8df f003 	tbb	[pc, r3]
 800a2fc:	240d545e 	.word	0x240d545e
 800a300:	390d352e 	.word	0x390d352e
 800a304:	0f0f3f3c 	.word	0x0f0f3f3c
 800a308:	47650b44 	.word	0x47650b44
 800a30c:	504d1b4a 	.word	0x504d1b4a
 800a310:	5b          	.byte	0x5b
 800a311:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800a312:	290e      	cmp	r1, #14
 800a314:	d013      	beq.n	800a33e <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 800a316:	2907      	cmp	r1, #7
 800a318:	d011      	beq.n	800a33e <STM_NextState+0x4e>
 800a31a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d018      	beq.n	800a354 <STM_NextState+0x64>
 800a322:	2907      	cmp	r1, #7
 800a324:	d016      	beq.n	800a354 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800a326:	2200      	movs	r2, #0
 800a328:	2180      	movs	r1, #128	; 0x80
 800a32a:	f7ff ffc3 	bl	800a2b4 <STM_FaultProcessing>
 800a32e:	2000      	movs	r0, #0
}
 800a330:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800a332:	2914      	cmp	r1, #20
 800a334:	d8f1      	bhi.n	800a31a <STM_NextState+0x2a>
 800a336:	4b26      	ldr	r3, [pc, #152]	; (800a3d0 <STM_NextState+0xe0>)
 800a338:	40cb      	lsrs	r3, r1
 800a33a:	07db      	lsls	r3, r3, #31
 800a33c:	d5ed      	bpl.n	800a31a <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800a33e:	7001      	strb	r1, [r0, #0]
 800a340:	2001      	movs	r0, #1
}
 800a342:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800a344:	2911      	cmp	r1, #17
 800a346:	d8ee      	bhi.n	800a326 <STM_NextState+0x36>
 800a348:	4b22      	ldr	r3, [pc, #136]	; (800a3d4 <STM_NextState+0xe4>)
 800a34a:	40cb      	lsrs	r3, r1
 800a34c:	07da      	lsls	r2, r3, #31
 800a34e:	d4f6      	bmi.n	800a33e <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800a350:	2903      	cmp	r1, #3
 800a352:	d1e8      	bne.n	800a326 <STM_NextState+0x36>
 800a354:	2000      	movs	r0, #0
}
 800a356:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800a358:	2913      	cmp	r1, #19
 800a35a:	d0f0      	beq.n	800a33e <STM_NextState+0x4e>
 800a35c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800a360:	2b05      	cmp	r3, #5
 800a362:	d1dc      	bne.n	800a31e <STM_NextState+0x2e>
 800a364:	e7eb      	b.n	800a33e <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800a366:	1f8b      	subs	r3, r1, #6
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d8d6      	bhi.n	800a31a <STM_NextState+0x2a>
 800a36c:	e7e7      	b.n	800a33e <STM_NextState+0x4e>
      if ( bState == STOP )
 800a36e:	2908      	cmp	r1, #8
 800a370:	d1d3      	bne.n	800a31a <STM_NextState+0x2a>
 800a372:	e7e4      	b.n	800a33e <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 800a374:	2909      	cmp	r1, #9
 800a376:	d1d0      	bne.n	800a31a <STM_NextState+0x2a>
 800a378:	e7e1      	b.n	800a33e <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800a37a:	2900      	cmp	r1, #0
 800a37c:	d0df      	beq.n	800a33e <STM_NextState+0x4e>
 800a37e:	290c      	cmp	r1, #12
 800a380:	d1cb      	bne.n	800a31a <STM_NextState+0x2a>
 800a382:	e7dc      	b.n	800a33e <STM_NextState+0x4e>
      if ( bState == IDLE )
 800a384:	2900      	cmp	r1, #0
 800a386:	d0da      	beq.n	800a33e <STM_NextState+0x4e>
 800a388:	e7c7      	b.n	800a31a <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800a38a:	2902      	cmp	r1, #2
 800a38c:	d1c3      	bne.n	800a316 <STM_NextState+0x26>
 800a38e:	e7d6      	b.n	800a33e <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800a390:	2911      	cmp	r1, #17
 800a392:	d1c0      	bne.n	800a316 <STM_NextState+0x26>
 800a394:	e7d3      	b.n	800a33e <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800a396:	2904      	cmp	r1, #4
 800a398:	d1bd      	bne.n	800a316 <STM_NextState+0x26>
 800a39a:	e7d0      	b.n	800a33e <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800a39c:	1f0b      	subs	r3, r1, #4
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d8b9      	bhi.n	800a316 <STM_NextState+0x26>
 800a3a2:	e7cc      	b.n	800a33e <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800a3a4:	2907      	cmp	r1, #7
 800a3a6:	d0ca      	beq.n	800a33e <STM_NextState+0x4e>
 800a3a8:	f1a1 030d 	sub.w	r3, r1, #13
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d8b4      	bhi.n	800a31a <STM_NextState+0x2a>
 800a3b0:	e7c5      	b.n	800a33e <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800a3b2:	2912      	cmp	r1, #18
 800a3b4:	d1af      	bne.n	800a316 <STM_NextState+0x26>
 800a3b6:	e7c2      	b.n	800a33e <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800a3b8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d0be      	beq.n	800a33e <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 800a3c0:	290c      	cmp	r1, #12
 800a3c2:	d1ae      	bne.n	800a322 <STM_NextState+0x32>
 800a3c4:	e7bb      	b.n	800a33e <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800a3c6:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 800a3ca:	2b07      	cmp	r3, #7
 800a3cc:	d1a5      	bne.n	800a31a <STM_NextState+0x2a>
 800a3ce:	e7b6      	b.n	800a33e <STM_NextState+0x4e>
 800a3d0:	00140080 	.word	0x00140080
 800a3d4:	00030092 	.word	0x00030092

0800a3d8 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 800a3d8:	7800      	ldrb	r0, [r0, #0]
 800a3da:	4770      	bx	lr

0800a3dc <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800a3dc:	7803      	ldrb	r3, [r0, #0]
 800a3de:	2b0b      	cmp	r3, #11
 800a3e0:	d001      	beq.n	800a3e6 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800a3e2:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 800a3e4:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 800a3e6:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800a3e8:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800a3ea:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800a3ec:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop

0800a3f4 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800a3f4:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800a3f6:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 800a3f8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop

0800a400 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800a400:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800a402:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 800a404:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 800a406:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800a40a:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 800a40c:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800a40e:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 800a410:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 800a412:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 800a414:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 800a416:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop

0800a41c <VSS_Init>:
{
 800a41c:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 800a41e:	f7ff ffef 	bl	800a400 <VSS_Clear>
}
 800a422:	bd08      	pop	{r3, pc}

0800a424 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800a424:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 800a426:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 800a428:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800a42a:	fb91 f1f3 	sdiv	r1, r1, r3
 800a42e:	80c1      	strh	r1, [r0, #6]
}
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop

0800a434 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800a434:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800a436:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 800a43a:	b984      	cbnz	r4, 800a45e <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 800a43c:	b98a      	cbnz	r2, 800a462 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800a43e:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800a440:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800a442:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800a444:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800a446:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a44a:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800a44c:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800a450:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800a454:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 800a458:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a45a:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800a45c:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800a45e:	bc70      	pop	{r4, r5, r6}
 800a460:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800a462:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 800a464:	4d11      	ldr	r5, [pc, #68]	; (800a4ac <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800a466:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800a468:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a46c:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800a46e:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800a472:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800a476:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800a478:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800a47a:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800a47e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a482:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800a484:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 800a488:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800a48a:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800a48e:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800a492:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 800a494:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800a496:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800a498:	0412      	lsls	r2, r2, #16
 800a49a:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800a49e:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800a4a2:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 800a4a6:	8503      	strh	r3, [r0, #40]	; 0x28
}
 800a4a8:	bc70      	pop	{r4, r5, r6}
 800a4aa:	4770      	bx	lr
 800a4ac:	10624dd3 	.word	0x10624dd3

0800a4b0 <__libc_init_array>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	4d0d      	ldr	r5, [pc, #52]	; (800a4e8 <__libc_init_array+0x38>)
 800a4b4:	4c0d      	ldr	r4, [pc, #52]	; (800a4ec <__libc_init_array+0x3c>)
 800a4b6:	1b64      	subs	r4, r4, r5
 800a4b8:	10a4      	asrs	r4, r4, #2
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	42a6      	cmp	r6, r4
 800a4be:	d109      	bne.n	800a4d4 <__libc_init_array+0x24>
 800a4c0:	4d0b      	ldr	r5, [pc, #44]	; (800a4f0 <__libc_init_array+0x40>)
 800a4c2:	4c0c      	ldr	r4, [pc, #48]	; (800a4f4 <__libc_init_array+0x44>)
 800a4c4:	f000 f82e 	bl	800a524 <_init>
 800a4c8:	1b64      	subs	r4, r4, r5
 800a4ca:	10a4      	asrs	r4, r4, #2
 800a4cc:	2600      	movs	r6, #0
 800a4ce:	42a6      	cmp	r6, r4
 800a4d0:	d105      	bne.n	800a4de <__libc_init_array+0x2e>
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d8:	4798      	blx	r3
 800a4da:	3601      	adds	r6, #1
 800a4dc:	e7ee      	b.n	800a4bc <__libc_init_array+0xc>
 800a4de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e2:	4798      	blx	r3
 800a4e4:	3601      	adds	r6, #1
 800a4e6:	e7f2      	b.n	800a4ce <__libc_init_array+0x1e>
 800a4e8:	0800a914 	.word	0x0800a914
 800a4ec:	0800a914 	.word	0x0800a914
 800a4f0:	0800a914 	.word	0x0800a914
 800a4f4:	0800a918 	.word	0x0800a918

0800a4f8 <memcpy>:
 800a4f8:	440a      	add	r2, r1
 800a4fa:	4291      	cmp	r1, r2
 800a4fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a500:	d100      	bne.n	800a504 <memcpy+0xc>
 800a502:	4770      	bx	lr
 800a504:	b510      	push	{r4, lr}
 800a506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a50a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a50e:	4291      	cmp	r1, r2
 800a510:	d1f9      	bne.n	800a506 <memcpy+0xe>
 800a512:	bd10      	pop	{r4, pc}

0800a514 <memset>:
 800a514:	4402      	add	r2, r0
 800a516:	4603      	mov	r3, r0
 800a518:	4293      	cmp	r3, r2
 800a51a:	d100      	bne.n	800a51e <memset+0xa>
 800a51c:	4770      	bx	lr
 800a51e:	f803 1b01 	strb.w	r1, [r3], #1
 800a522:	e7f9      	b.n	800a518 <memset+0x4>

0800a524 <_init>:
 800a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a526:	bf00      	nop
 800a528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a52a:	bc08      	pop	{r3}
 800a52c:	469e      	mov	lr, r3
 800a52e:	4770      	bx	lr

0800a530 <_fini>:
 800a530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a532:	bf00      	nop
 800a534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a536:	bc08      	pop	{r3}
 800a538:	469e      	mov	lr, r3
 800a53a:	4770      	bx	lr
